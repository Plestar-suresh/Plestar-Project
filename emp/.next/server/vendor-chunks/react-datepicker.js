"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-datepicker";
exports.ids = ["vendor-chunks/react-datepicker"];
exports.modules = {

/***/ "(ssr)/../node_modules/react-datepicker/dist/es/index.js":
/*!*********************************************************!*\
  !*** ../node_modules/react-datepicker/dist/es/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CalendarContainer: () => (/* binding */ CalendarContainer),\n/* harmony export */   \"default\": () => (/* binding */ DatePicker),\n/* harmony export */   getDefaultLocale: () => (/* binding */ getDefaultLocale),\n/* harmony export */   registerLocale: () => (/* binding */ registerLocale),\n/* harmony export */   setDefaultLocale: () => (/* binding */ setDefaultLocale)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! clsx */ \"(ssr)/../node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! date-fns/isDate */ \"(ssr)/../node_modules/date-fns/isDate.mjs\");\n/* harmony import */ var date_fns_isValid__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! date-fns/isValid */ \"(ssr)/../node_modules/date-fns/isValid.mjs\");\n/* harmony import */ var date_fns_format__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! date-fns/format */ \"(ssr)/../node_modules/date-fns/_lib/format/longFormatters.mjs\");\n/* harmony import */ var date_fns_format__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! date-fns/format */ \"(ssr)/../node_modules/date-fns/format.mjs\");\n/* harmony import */ var date_fns_addMinutes__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! date-fns/addMinutes */ \"(ssr)/../node_modules/date-fns/addMinutes.mjs\");\n/* harmony import */ var date_fns_addHours__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! date-fns/addHours */ \"(ssr)/../node_modules/date-fns/addHours.mjs\");\n/* harmony import */ var date_fns_addDays__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! date-fns/addDays */ \"(ssr)/../node_modules/date-fns/addDays.mjs\");\n/* harmony import */ var date_fns_addWeeks__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! date-fns/addWeeks */ \"(ssr)/../node_modules/date-fns/addWeeks.mjs\");\n/* harmony import */ var date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! date-fns/addMonths */ \"(ssr)/../node_modules/date-fns/addMonths.mjs\");\n/* harmony import */ var date_fns_addQuarters__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! date-fns/addQuarters */ \"(ssr)/../node_modules/date-fns/addQuarters.mjs\");\n/* harmony import */ var date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! date-fns/addYears */ \"(ssr)/../node_modules/date-fns/addYears.mjs\");\n/* harmony import */ var date_fns_subDays__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! date-fns/subDays */ \"(ssr)/../node_modules/date-fns/subDays.mjs\");\n/* harmony import */ var date_fns_subWeeks__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! date-fns/subWeeks */ \"(ssr)/../node_modules/date-fns/subWeeks.mjs\");\n/* harmony import */ var date_fns_subMonths__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! date-fns/subMonths */ \"(ssr)/../node_modules/date-fns/subMonths.mjs\");\n/* harmony import */ var date_fns_subQuarters__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! date-fns/subQuarters */ \"(ssr)/../node_modules/date-fns/subQuarters.mjs\");\n/* harmony import */ var date_fns_subYears__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! date-fns/subYears */ \"(ssr)/../node_modules/date-fns/subYears.mjs\");\n/* harmony import */ var date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! date-fns */ \"(ssr)/../node_modules/date-fns/getSeconds.mjs\");\n/* harmony import */ var date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! date-fns/getMinutes */ \"(ssr)/../node_modules/date-fns/getMinutes.mjs\");\n/* harmony import */ var date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! date-fns/getHours */ \"(ssr)/../node_modules/date-fns/getHours.mjs\");\n/* harmony import */ var date_fns_getDay__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! date-fns/getDay */ \"(ssr)/../node_modules/date-fns/getDay.mjs\");\n/* harmony import */ var date_fns_getDate__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! date-fns/getDate */ \"(ssr)/../node_modules/date-fns/getDate.mjs\");\n/* harmony import */ var date_fns_getISOWeek__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! date-fns/getISOWeek */ \"(ssr)/../node_modules/date-fns/getISOWeek.mjs\");\n/* harmony import */ var date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! date-fns/getMonth */ \"(ssr)/../node_modules/date-fns/getMonth.mjs\");\n/* harmony import */ var date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! date-fns/getQuarter */ \"(ssr)/../node_modules/date-fns/getQuarter.mjs\");\n/* harmony import */ var date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! date-fns/getYear */ \"(ssr)/../node_modules/date-fns/getYear.mjs\");\n/* harmony import */ var date_fns_getTime__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! date-fns/getTime */ \"(ssr)/../node_modules/date-fns/getTime.mjs\");\n/* harmony import */ var date_fns_setSeconds__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! date-fns/setSeconds */ \"(ssr)/../node_modules/date-fns/setSeconds.mjs\");\n/* harmony import */ var date_fns_setMinutes__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! date-fns/setMinutes */ \"(ssr)/../node_modules/date-fns/setMinutes.mjs\");\n/* harmony import */ var date_fns_setHours__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! date-fns/setHours */ \"(ssr)/../node_modules/date-fns/setHours.mjs\");\n/* harmony import */ var date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! date-fns/setMonth */ \"(ssr)/../node_modules/date-fns/setMonth.mjs\");\n/* harmony import */ var date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! date-fns/setQuarter */ \"(ssr)/../node_modules/date-fns/setQuarter.mjs\");\n/* harmony import */ var date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! date-fns/setYear */ \"(ssr)/../node_modules/date-fns/setYear.mjs\");\n/* harmony import */ var date_fns_min__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! date-fns/min */ \"(ssr)/../node_modules/date-fns/min.mjs\");\n/* harmony import */ var date_fns_max__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! date-fns/max */ \"(ssr)/../node_modules/date-fns/max.mjs\");\n/* harmony import */ var date_fns_differenceInCalendarDays__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! date-fns/differenceInCalendarDays */ \"(ssr)/../node_modules/date-fns/differenceInCalendarDays.mjs\");\n/* harmony import */ var date_fns_differenceInCalendarMonths__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! date-fns/differenceInCalendarMonths */ \"(ssr)/../node_modules/date-fns/differenceInCalendarMonths.mjs\");\n/* harmony import */ var date_fns_differenceInCalendarYears__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! date-fns/differenceInCalendarYears */ \"(ssr)/../node_modules/date-fns/differenceInCalendarYears.mjs\");\n/* harmony import */ var date_fns_differenceInCalendarQuarters__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! date-fns/differenceInCalendarQuarters */ \"(ssr)/../node_modules/date-fns/differenceInCalendarQuarters.mjs\");\n/* harmony import */ var date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! date-fns/startOfDay */ \"(ssr)/../node_modules/date-fns/startOfDay.mjs\");\n/* harmony import */ var date_fns_startOfWeek__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! date-fns/startOfWeek */ \"(ssr)/../node_modules/date-fns/startOfWeek.mjs\");\n/* harmony import */ var date_fns_startOfMonth__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! date-fns/startOfMonth */ \"(ssr)/../node_modules/date-fns/startOfMonth.mjs\");\n/* harmony import */ var date_fns_startOfQuarter__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! date-fns/startOfQuarter */ \"(ssr)/../node_modules/date-fns/startOfQuarter.mjs\");\n/* harmony import */ var date_fns_startOfYear__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! date-fns/startOfYear */ \"(ssr)/../node_modules/date-fns/startOfYear.mjs\");\n/* harmony import */ var date_fns_endOfDay__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! date-fns/endOfDay */ \"(ssr)/../node_modules/date-fns/endOfDay.mjs\");\n/* harmony import */ var date_fns_endOfWeek__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! date-fns/endOfWeek */ \"(ssr)/../node_modules/date-fns/endOfWeek.mjs\");\n/* harmony import */ var date_fns_endOfMonth__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! date-fns/endOfMonth */ \"(ssr)/../node_modules/date-fns/endOfMonth.mjs\");\n/* harmony import */ var date_fns_endOfYear__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! date-fns/endOfYear */ \"(ssr)/../node_modules/date-fns/endOfYear.mjs\");\n/* harmony import */ var date_fns_isEqual__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! date-fns/isEqual */ \"(ssr)/../node_modules/date-fns/isEqual.mjs\");\n/* harmony import */ var date_fns_isSameDay__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! date-fns/isSameDay */ \"(ssr)/../node_modules/date-fns/isSameDay.mjs\");\n/* harmony import */ var date_fns_isSameMonth__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! date-fns/isSameMonth */ \"(ssr)/../node_modules/date-fns/isSameMonth.mjs\");\n/* harmony import */ var date_fns_isSameYear__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! date-fns/isSameYear */ \"(ssr)/../node_modules/date-fns/isSameYear.mjs\");\n/* harmony import */ var date_fns_isSameQuarter__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! date-fns/isSameQuarter */ \"(ssr)/../node_modules/date-fns/isSameQuarter.mjs\");\n/* harmony import */ var date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! date-fns/isAfter */ \"(ssr)/../node_modules/date-fns/isAfter.mjs\");\n/* harmony import */ var date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! date-fns/isBefore */ \"(ssr)/../node_modules/date-fns/isBefore.mjs\");\n/* harmony import */ var date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! date-fns/isWithinInterval */ \"(ssr)/../node_modules/date-fns/isWithinInterval.mjs\");\n/* harmony import */ var date_fns_toDate__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! date-fns/toDate */ \"(ssr)/../node_modules/date-fns/toDate.mjs\");\n/* harmony import */ var date_fns_parse__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! date-fns/parse */ \"(ssr)/../node_modules/date-fns/parse.mjs\");\n/* harmony import */ var date_fns_parseISO__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! date-fns/parseISO */ \"(ssr)/../node_modules/date-fns/parseISO.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! date-fns */ \"(ssr)/../node_modules/date-fns/addSeconds.mjs\");\n/* harmony import */ var react_onclickoutside__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-onclickoutside */ \"(ssr)/../node_modules/react-onclickoutside/dist/react-onclickoutside.es.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/../node_modules/@floating-ui/react/dist/floating-ui.react.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/../node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/../node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs\");\n/* harmony import */ var date_fns_set__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! date-fns/set */ \"(ssr)/../node_modules/date-fns/set.mjs\");\n/*!\r\n  react-datepicker v6.9.0\r\n  https://github.com/Hacker0x01/react-datepicker\r\n  Released under the MIT License.\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction _callSuper(t, o, e) {\r\n  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));\r\n}\r\nfunction _isNativeReflectConstruct() {\r\n  try {\r\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\r\n  } catch (t) {}\r\n  return (_isNativeReflectConstruct = function () {\r\n    return !!t;\r\n  })();\r\n}\r\nfunction ownKeys(e, r) {\r\n  var t = Object.keys(e);\r\n  if (Object.getOwnPropertySymbols) {\r\n    var o = Object.getOwnPropertySymbols(e);\r\n    r && (o = o.filter(function (r) {\r\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\r\n    })), t.push.apply(t, o);\r\n  }\r\n  return t;\r\n}\r\nfunction _objectSpread2(e) {\r\n  for (var r = 1; r < arguments.length; r++) {\r\n    var t = null != arguments[r] ? arguments[r] : {};\r\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\r\n      _defineProperty(e, r, t[r]);\r\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\r\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\r\n    });\r\n  }\r\n  return e;\r\n}\r\nfunction _toPrimitive(t, r) {\r\n  if (\"object\" != typeof t || !t) return t;\r\n  var e = t[Symbol.toPrimitive];\r\n  if (void 0 !== e) {\r\n    var i = e.call(t, r || \"default\");\r\n    if (\"object\" != typeof i) return i;\r\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\r\n  }\r\n  return (\"string\" === r ? String : Number)(t);\r\n}\r\nfunction _toPropertyKey(t) {\r\n  var i = _toPrimitive(t, \"string\");\r\n  return \"symbol\" == typeof i ? i : i + \"\";\r\n}\r\nfunction _typeof(o) {\r\n  \"@babel/helpers - typeof\";\r\n\r\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\r\n    return typeof o;\r\n  } : function (o) {\r\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\r\n  }, _typeof(o);\r\n}\r\nfunction _classCallCheck(instance, Constructor) {\r\n  if (!(instance instanceof Constructor)) {\r\n    throw new TypeError(\"Cannot call a class as a function\");\r\n  }\r\n}\r\nfunction _defineProperties(target, props) {\r\n  for (var i = 0; i < props.length; i++) {\r\n    var descriptor = props[i];\r\n    descriptor.enumerable = descriptor.enumerable || false;\r\n    descriptor.configurable = true;\r\n    if (\"value\" in descriptor) descriptor.writable = true;\r\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\r\n  }\r\n}\r\nfunction _createClass(Constructor, protoProps, staticProps) {\r\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\r\n  if (staticProps) _defineProperties(Constructor, staticProps);\r\n  Object.defineProperty(Constructor, \"prototype\", {\r\n    writable: false\r\n  });\r\n  return Constructor;\r\n}\r\nfunction _defineProperty(obj, key, value) {\r\n  key = _toPropertyKey(key);\r\n  if (key in obj) {\r\n    Object.defineProperty(obj, key, {\r\n      value: value,\r\n      enumerable: true,\r\n      configurable: true,\r\n      writable: true\r\n    });\r\n  } else {\r\n    obj[key] = value;\r\n  }\r\n  return obj;\r\n}\r\nfunction _extends() {\r\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      var source = arguments[i];\r\n      for (var key in source) {\r\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n          target[key] = source[key];\r\n        }\r\n      }\r\n    }\r\n    return target;\r\n  };\r\n  return _extends.apply(this, arguments);\r\n}\r\nfunction _inherits(subClass, superClass) {\r\n  if (typeof superClass !== \"function\" && superClass !== null) {\r\n    throw new TypeError(\"Super expression must either be null or a function\");\r\n  }\r\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\r\n    constructor: {\r\n      value: subClass,\r\n      writable: true,\r\n      configurable: true\r\n    }\r\n  });\r\n  Object.defineProperty(subClass, \"prototype\", {\r\n    writable: false\r\n  });\r\n  if (superClass) _setPrototypeOf(subClass, superClass);\r\n}\r\nfunction _getPrototypeOf(o) {\r\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\r\n    return o.__proto__ || Object.getPrototypeOf(o);\r\n  };\r\n  return _getPrototypeOf(o);\r\n}\r\nfunction _setPrototypeOf(o, p) {\r\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\r\n    o.__proto__ = p;\r\n    return o;\r\n  };\r\n  return _setPrototypeOf(o, p);\r\n}\r\nfunction _assertThisInitialized(self) {\r\n  if (self === void 0) {\r\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\r\n  }\r\n  return self;\r\n}\r\nfunction _possibleConstructorReturn(self, call) {\r\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\r\n    return call;\r\n  } else if (call !== void 0) {\r\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\r\n  }\r\n  return _assertThisInitialized(self);\r\n}\r\nfunction _toConsumableArray(arr) {\r\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\r\n}\r\nfunction _arrayWithoutHoles(arr) {\r\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\r\n}\r\nfunction _iterableToArray(iter) {\r\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\r\n}\r\nfunction _unsupportedIterableToArray(o, minLen) {\r\n  if (!o) return;\r\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\r\n  var n = Object.prototype.toString.call(o).slice(8, -1);\r\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\r\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\r\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\r\n}\r\nfunction _arrayLikeToArray(arr, len) {\r\n  if (len == null || len > arr.length) len = arr.length;\r\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\r\n  return arr2;\r\n}\r\nfunction _nonIterableSpread() {\r\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\r\n}\r\n\r\nvar DEFAULT_YEAR_ITEM_NUMBER = 12;\r\n\r\n// This RegExp catches symbols escaped by quotes, and also\r\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\r\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\r\n\r\n// ** Date Constructors **\r\n\r\nfunction newDate(value) {\r\n  var d = value ? typeof value === \"string\" || value instanceof String ? (0,date_fns_parseISO__WEBPACK_IMPORTED_MODULE_4__.parseISO)(value) : (0,date_fns_toDate__WEBPACK_IMPORTED_MODULE_5__.toDate)(value) : new Date();\r\n  return isValid(d) ? d : null;\r\n}\r\nfunction parseDate(value, dateFormat, locale, strictParsing, minDate) {\r\n  var parsedDate = null;\r\n  var localeObject = getLocaleObject(locale) || getLocaleObject(getDefaultLocale());\r\n  var strictParsingValueMatch = true;\r\n  if (Array.isArray(dateFormat)) {\r\n    dateFormat.forEach(function (df) {\r\n      var tryParseDate = (0,date_fns_parse__WEBPACK_IMPORTED_MODULE_6__.parse)(value, df, new Date(), {\r\n        locale: localeObject,\r\n        useAdditionalWeekYearTokens: true,\r\n        useAdditionalDayOfYearTokens: true\r\n      });\r\n      if (strictParsing) {\r\n        strictParsingValueMatch = isValid(tryParseDate, minDate) && value === formatDate(tryParseDate, df, locale);\r\n      }\r\n      if (isValid(tryParseDate, minDate) && strictParsingValueMatch) {\r\n        parsedDate = tryParseDate;\r\n      }\r\n    });\r\n    return parsedDate;\r\n  }\r\n  parsedDate = (0,date_fns_parse__WEBPACK_IMPORTED_MODULE_6__.parse)(value, dateFormat, new Date(), {\r\n    locale: localeObject,\r\n    useAdditionalWeekYearTokens: true,\r\n    useAdditionalDayOfYearTokens: true\r\n  });\r\n  if (strictParsing) {\r\n    strictParsingValueMatch = isValid(parsedDate) && value === formatDate(parsedDate, dateFormat, locale);\r\n  } else if (!isValid(parsedDate)) {\r\n    dateFormat = dateFormat.match(longFormattingTokensRegExp).map(function (substring) {\r\n      var firstCharacter = substring[0];\r\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\r\n        var longFormatter = date_fns_format__WEBPACK_IMPORTED_MODULE_7__.longFormatters[firstCharacter];\r\n        return localeObject ? longFormatter(substring, localeObject.formatLong) : firstCharacter;\r\n      }\r\n      return substring;\r\n    }).join(\"\");\r\n    if (value.length > 0) {\r\n      parsedDate = (0,date_fns_parse__WEBPACK_IMPORTED_MODULE_6__.parse)(value, dateFormat.slice(0, value.length), new Date(), {\r\n        useAdditionalWeekYearTokens: true,\r\n        useAdditionalDayOfYearTokens: true\r\n      });\r\n    }\r\n    if (!isValid(parsedDate)) {\r\n      parsedDate = new Date(value);\r\n    }\r\n  }\r\n  return isValid(parsedDate) && strictParsingValueMatch ? parsedDate : null;\r\n}\r\nfunction isValid(date, minDate) {\r\n  minDate = minDate ? minDate : new Date(\"1/1/1000\");\r\n  return (0,date_fns_isValid__WEBPACK_IMPORTED_MODULE_8__.isValid)(date) && !(0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(date, minDate);\r\n}\r\n\r\n// ** Date Formatting **\r\n\r\nfunction formatDate(date, formatStr, locale) {\r\n  if (locale === \"en\") {\r\n    return (0,date_fns_format__WEBPACK_IMPORTED_MODULE_10__.format)(date, formatStr, {\r\n      useAdditionalWeekYearTokens: true,\r\n      useAdditionalDayOfYearTokens: true\r\n    });\r\n  }\r\n  var localeObj = getLocaleObject(locale);\r\n  if (locale && !localeObj) {\r\n    console.warn(\"A locale object was not found for the provided string [\\\"\".concat(locale, \"\\\"].\"));\r\n  }\r\n  if (!localeObj && !!getDefaultLocale() && !!getLocaleObject(getDefaultLocale())) {\r\n    localeObj = getLocaleObject(getDefaultLocale());\r\n  }\r\n  return (0,date_fns_format__WEBPACK_IMPORTED_MODULE_10__.format)(date, formatStr, {\r\n    locale: localeObj ? localeObj : null,\r\n    useAdditionalWeekYearTokens: true,\r\n    useAdditionalDayOfYearTokens: true\r\n  });\r\n}\r\nfunction safeDateFormat(date, _ref) {\r\n  var dateFormat = _ref.dateFormat,\r\n    locale = _ref.locale;\r\n  return date && formatDate(date, Array.isArray(dateFormat) ? dateFormat[0] : dateFormat, locale) || \"\";\r\n}\r\nfunction safeDateRangeFormat(startDate, endDate, props) {\r\n  if (!startDate) {\r\n    return \"\";\r\n  }\r\n  var formattedStartDate = safeDateFormat(startDate, props);\r\n  var formattedEndDate = endDate ? safeDateFormat(endDate, props) : \"\";\r\n  return \"\".concat(formattedStartDate, \" - \").concat(formattedEndDate);\r\n}\r\nfunction safeMultipleDatesFormat(dates, props) {\r\n  if (!(dates !== null && dates !== void 0 && dates.length)) {\r\n    return \"\";\r\n  }\r\n  var formattedFirstDate = safeDateFormat(dates[0], props);\r\n  if (dates.length === 1) {\r\n    return formattedFirstDate;\r\n  }\r\n  if (dates.length === 2) {\r\n    var formattedSecondDate = safeDateFormat(dates[1], props);\r\n    return \"\".concat(formattedFirstDate, \", \").concat(formattedSecondDate);\r\n  }\r\n  var extraDatesCount = dates.length - 1;\r\n  return \"\".concat(formattedFirstDate, \" (+\").concat(extraDatesCount, \")\");\r\n}\r\n\r\n// ** Date Setters **\r\n\r\nfunction setTime(date, _ref2) {\r\n  var _ref2$hour = _ref2.hour,\r\n    hour = _ref2$hour === void 0 ? 0 : _ref2$hour,\r\n    _ref2$minute = _ref2.minute,\r\n    minute = _ref2$minute === void 0 ? 0 : _ref2$minute,\r\n    _ref2$second = _ref2.second,\r\n    second = _ref2$second === void 0 ? 0 : _ref2$second;\r\n  return (0,date_fns_setHours__WEBPACK_IMPORTED_MODULE_11__.setHours)((0,date_fns_setMinutes__WEBPACK_IMPORTED_MODULE_12__.setMinutes)((0,date_fns_setSeconds__WEBPACK_IMPORTED_MODULE_13__.setSeconds)(date, second), minute), hour);\r\n}\r\nfunction getWeek(date, locale) {\r\n  var localeObj = locale && getLocaleObject(locale) || getDefaultLocale() && getLocaleObject(getDefaultLocale());\r\n  return (0,date_fns_getISOWeek__WEBPACK_IMPORTED_MODULE_14__.getISOWeek)(date, localeObj ? {\r\n    locale: localeObj\r\n  } : null);\r\n}\r\nfunction getDayOfWeekCode(day, locale) {\r\n  return formatDate(day, \"ddd\", locale);\r\n}\r\n\r\n// *** Start of ***\r\n\r\nfunction getStartOfDay(date) {\r\n  return (0,date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__.startOfDay)(date);\r\n}\r\nfunction getStartOfWeek(date, locale, calendarStartDay) {\r\n  var localeObj = locale ? getLocaleObject(locale) : getLocaleObject(getDefaultLocale());\r\n  return (0,date_fns_startOfWeek__WEBPACK_IMPORTED_MODULE_16__.startOfWeek)(date, {\r\n    locale: localeObj,\r\n    weekStartsOn: calendarStartDay\r\n  });\r\n}\r\nfunction getStartOfMonth(date) {\r\n  return (0,date_fns_startOfMonth__WEBPACK_IMPORTED_MODULE_17__.startOfMonth)(date);\r\n}\r\nfunction getStartOfYear(date) {\r\n  return (0,date_fns_startOfYear__WEBPACK_IMPORTED_MODULE_18__.startOfYear)(date);\r\n}\r\nfunction getStartOfQuarter(date) {\r\n  return (0,date_fns_startOfQuarter__WEBPACK_IMPORTED_MODULE_19__.startOfQuarter)(date);\r\n}\r\nfunction getStartOfToday() {\r\n  return (0,date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__.startOfDay)(newDate());\r\n}\r\n\r\n// *** End of ***\r\n\r\nfunction getEndOfWeek(date) {\r\n  return (0,date_fns_endOfWeek__WEBPACK_IMPORTED_MODULE_20__.endOfWeek)(date);\r\n}\r\nfunction isSameYear(date1, date2) {\r\n  if (date1 && date2) {\r\n    return (0,date_fns_isSameYear__WEBPACK_IMPORTED_MODULE_21__.isSameYear)(date1, date2);\r\n  } else {\r\n    return !date1 && !date2;\r\n  }\r\n}\r\nfunction isSameMonth(date1, date2) {\r\n  if (date1 && date2) {\r\n    return (0,date_fns_isSameMonth__WEBPACK_IMPORTED_MODULE_22__.isSameMonth)(date1, date2);\r\n  } else {\r\n    return !date1 && !date2;\r\n  }\r\n}\r\nfunction isSameQuarter(date1, date2) {\r\n  if (date1 && date2) {\r\n    return (0,date_fns_isSameQuarter__WEBPACK_IMPORTED_MODULE_23__.isSameQuarter)(date1, date2);\r\n  } else {\r\n    return !date1 && !date2;\r\n  }\r\n}\r\nfunction isSameDay(date1, date2) {\r\n  if (date1 && date2) {\r\n    return (0,date_fns_isSameDay__WEBPACK_IMPORTED_MODULE_24__.isSameDay)(date1, date2);\r\n  } else {\r\n    return !date1 && !date2;\r\n  }\r\n}\r\nfunction isEqual(date1, date2) {\r\n  if (date1 && date2) {\r\n    return (0,date_fns_isEqual__WEBPACK_IMPORTED_MODULE_25__.isEqual)(date1, date2);\r\n  } else {\r\n    return !date1 && !date2;\r\n  }\r\n}\r\nfunction isDayInRange(day, startDate, endDate) {\r\n  var valid;\r\n  var start = (0,date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__.startOfDay)(startDate);\r\n  var end = (0,date_fns_endOfDay__WEBPACK_IMPORTED_MODULE_26__.endOfDay)(endDate);\r\n  try {\r\n    valid = (0,date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__.isWithinInterval)(day, {\r\n      start: start,\r\n      end: end\r\n    });\r\n  } catch (err) {\r\n    valid = false;\r\n  }\r\n  return valid;\r\n}\r\n\r\n// ** Date Localization **\r\n\r\nfunction registerLocale(localeName, localeData) {\r\n  var scope = typeof window !== \"undefined\" ? window : globalThis;\r\n  if (!scope.__localeData__) {\r\n    scope.__localeData__ = {};\r\n  }\r\n  scope.__localeData__[localeName] = localeData;\r\n}\r\nfunction setDefaultLocale(localeName) {\r\n  var scope = typeof window !== \"undefined\" ? window : globalThis;\r\n  scope.__localeId__ = localeName;\r\n}\r\nfunction getDefaultLocale() {\r\n  var scope = typeof window !== \"undefined\" ? window : globalThis;\r\n  return scope.__localeId__;\r\n}\r\nfunction getLocaleObject(localeSpec) {\r\n  if (typeof localeSpec === \"string\") {\r\n    // Treat it as a locale name registered by registerLocale\r\n    var scope = typeof window !== \"undefined\" ? window : globalThis;\r\n    return scope.__localeData__ ? scope.__localeData__[localeSpec] : null;\r\n  } else {\r\n    // Treat it as a raw date-fns locale object\r\n    return localeSpec;\r\n  }\r\n}\r\nfunction getFormattedWeekdayInLocale(date, formatFunc, locale) {\r\n  return formatFunc(formatDate(date, \"EEEE\", locale));\r\n}\r\nfunction getWeekdayMinInLocale(date, locale) {\r\n  return formatDate(date, \"EEEEEE\", locale);\r\n}\r\nfunction getWeekdayShortInLocale(date, locale) {\r\n  return formatDate(date, \"EEE\", locale);\r\n}\r\nfunction getMonthInLocale(month, locale) {\r\n  return formatDate((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(newDate(), month), \"LLLL\", locale);\r\n}\r\nfunction getMonthShortInLocale(month, locale) {\r\n  return formatDate((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(newDate(), month), \"LLL\", locale);\r\n}\r\nfunction getQuarterShortInLocale(quarter, locale) {\r\n  return formatDate((0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(newDate(), quarter), \"QQQ\", locale);\r\n}\r\n\r\n// ** Utils for some components **\r\n\r\nfunction isDayDisabled(day) {\r\n  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\r\n    minDate = _ref3.minDate,\r\n    maxDate = _ref3.maxDate,\r\n    excludeDates = _ref3.excludeDates,\r\n    excludeDateIntervals = _ref3.excludeDateIntervals,\r\n    includeDates = _ref3.includeDates,\r\n    includeDateIntervals = _ref3.includeDateIntervals,\r\n    filterDate = _ref3.filterDate;\r\n  return isOutOfBounds(day, {\r\n    minDate: minDate,\r\n    maxDate: maxDate\r\n  }) || excludeDates && excludeDates.some(function (excludeDate) {\r\n    return isSameDay(day, excludeDate.date ? excludeDate.date : excludeDate);\r\n  }) || excludeDateIntervals && excludeDateIntervals.some(function (_ref4) {\r\n    var start = _ref4.start,\r\n      end = _ref4.end;\r\n    return (0,date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__.isWithinInterval)(day, {\r\n      start: start,\r\n      end: end\r\n    });\r\n  }) || includeDates && !includeDates.some(function (includeDate) {\r\n    return isSameDay(day, includeDate);\r\n  }) || includeDateIntervals && !includeDateIntervals.some(function (_ref5) {\r\n    var start = _ref5.start,\r\n      end = _ref5.end;\r\n    return (0,date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__.isWithinInterval)(day, {\r\n      start: start,\r\n      end: end\r\n    });\r\n  }) || filterDate && !filterDate(newDate(day)) || false;\r\n}\r\nfunction isDayExcluded(day) {\r\n  var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\r\n    excludeDates = _ref6.excludeDates,\r\n    excludeDateIntervals = _ref6.excludeDateIntervals;\r\n  if (excludeDateIntervals && excludeDateIntervals.length > 0) {\r\n    return excludeDateIntervals.some(function (_ref7) {\r\n      var start = _ref7.start,\r\n        end = _ref7.end;\r\n      return (0,date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__.isWithinInterval)(day, {\r\n        start: start,\r\n        end: end\r\n      });\r\n    });\r\n  }\r\n  return excludeDates && excludeDates.some(function (excludeDate) {\r\n    return isSameDay(day, excludeDate.date ? excludeDate.date : excludeDate);\r\n  }) || false;\r\n}\r\nfunction isMonthDisabled(month) {\r\n  var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\r\n    minDate = _ref8.minDate,\r\n    maxDate = _ref8.maxDate,\r\n    excludeDates = _ref8.excludeDates,\r\n    includeDates = _ref8.includeDates,\r\n    filterDate = _ref8.filterDate;\r\n  return isOutOfBounds(month, {\r\n    minDate: (0,date_fns_startOfMonth__WEBPACK_IMPORTED_MODULE_17__.startOfMonth)(minDate),\r\n    maxDate: (0,date_fns_endOfMonth__WEBPACK_IMPORTED_MODULE_30__.endOfMonth)(maxDate)\r\n  }) || excludeDates && excludeDates.some(function (excludeDate) {\r\n    return isSameMonth(month, excludeDate);\r\n  }) || includeDates && !includeDates.some(function (includeDate) {\r\n    return isSameMonth(month, includeDate);\r\n  }) || filterDate && !filterDate(newDate(month)) || false;\r\n}\r\nfunction isMonthInRange(startDate, endDate, m, day) {\r\n  var startDateYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(startDate);\r\n  var startDateMonth = (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(startDate);\r\n  var endDateYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(endDate);\r\n  var endDateMonth = (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(endDate);\r\n  var dayYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day);\r\n  if (startDateYear === endDateYear && startDateYear === dayYear) {\r\n    return startDateMonth <= m && m <= endDateMonth;\r\n  } else if (startDateYear < endDateYear) {\r\n    return dayYear === startDateYear && startDateMonth <= m || dayYear === endDateYear && endDateMonth >= m || dayYear < endDateYear && dayYear > startDateYear;\r\n  }\r\n}\r\nfunction isQuarterDisabled(quarter) {\r\n  var _ref9 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\r\n    minDate = _ref9.minDate,\r\n    maxDate = _ref9.maxDate,\r\n    excludeDates = _ref9.excludeDates,\r\n    includeDates = _ref9.includeDates,\r\n    filterDate = _ref9.filterDate;\r\n  return isOutOfBounds(quarter, {\r\n    minDate: minDate,\r\n    maxDate: maxDate\r\n  }) || excludeDates && excludeDates.some(function (excludeDate) {\r\n    return isSameQuarter(quarter, excludeDate);\r\n  }) || includeDates && !includeDates.some(function (includeDate) {\r\n    return isSameQuarter(quarter, includeDate);\r\n  }) || filterDate && !filterDate(newDate(quarter)) || false;\r\n}\r\n\r\n/**\r\n * @param {number} year\r\n * @param {Date} start\r\n * @param {Date} end\r\n * @returns {boolean}\r\n */\r\nfunction isYearInRange(year, start, end) {\r\n  if (!(0,date_fns_isValid__WEBPACK_IMPORTED_MODULE_8__.isValid)(start) || !(0,date_fns_isValid__WEBPACK_IMPORTED_MODULE_8__.isValid)(end)) return false;\r\n  var startYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(start);\r\n  var endYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(end);\r\n  return startYear <= year && endYear >= year;\r\n}\r\nfunction isYearDisabled(year) {\r\n  var _ref10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\r\n    minDate = _ref10.minDate,\r\n    maxDate = _ref10.maxDate,\r\n    excludeDates = _ref10.excludeDates,\r\n    includeDates = _ref10.includeDates,\r\n    filterDate = _ref10.filterDate;\r\n  var date = new Date(year, 0, 1);\r\n  return isOutOfBounds(date, {\r\n    minDate: (0,date_fns_startOfYear__WEBPACK_IMPORTED_MODULE_18__.startOfYear)(minDate),\r\n    maxDate: (0,date_fns_endOfYear__WEBPACK_IMPORTED_MODULE_33__.endOfYear)(maxDate)\r\n  }) || excludeDates && excludeDates.some(function (excludeDate) {\r\n    return isSameYear(date, excludeDate);\r\n  }) || includeDates && !includeDates.some(function (includeDate) {\r\n    return isSameYear(date, includeDate);\r\n  }) || filterDate && !filterDate(newDate(date)) || false;\r\n}\r\nfunction isQuarterInRange(startDate, endDate, q, day) {\r\n  var startDateYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(startDate);\r\n  var startDateQuarter = (0,date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__.getQuarter)(startDate);\r\n  var endDateYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(endDate);\r\n  var endDateQuarter = (0,date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__.getQuarter)(endDate);\r\n  var dayYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day);\r\n  if (startDateYear === endDateYear && startDateYear === dayYear) {\r\n    return startDateQuarter <= q && q <= endDateQuarter;\r\n  } else if (startDateYear < endDateYear) {\r\n    return dayYear === startDateYear && startDateQuarter <= q || dayYear === endDateYear && endDateQuarter >= q || dayYear < endDateYear && dayYear > startDateYear;\r\n  }\r\n}\r\nfunction isOutOfBounds(day) {\r\n  var _ref11 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\r\n    minDate = _ref11.minDate,\r\n    maxDate = _ref11.maxDate;\r\n  return minDate && (0,date_fns_differenceInCalendarDays__WEBPACK_IMPORTED_MODULE_35__.differenceInCalendarDays)(day, minDate) < 0 || maxDate && (0,date_fns_differenceInCalendarDays__WEBPACK_IMPORTED_MODULE_35__.differenceInCalendarDays)(day, maxDate) > 0;\r\n}\r\nfunction isTimeInList(time, times) {\r\n  return times.some(function (listTime) {\r\n    return (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(listTime) === (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(time) && (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(listTime) === (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(time) && (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(listTime) === (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(time);\r\n  });\r\n}\r\nfunction isTimeDisabled(time) {\r\n  var _ref12 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\r\n    excludeTimes = _ref12.excludeTimes,\r\n    includeTimes = _ref12.includeTimes,\r\n    filterTime = _ref12.filterTime;\r\n  return excludeTimes && isTimeInList(time, excludeTimes) || includeTimes && !isTimeInList(time, includeTimes) || filterTime && !filterTime(time) || false;\r\n}\r\nfunction isTimeInDisabledRange(time, _ref13) {\r\n  var minTime = _ref13.minTime,\r\n    maxTime = _ref13.maxTime;\r\n  if (!minTime || !maxTime) {\r\n    throw new Error(\"Both minTime and maxTime props required\");\r\n  }\r\n  var baseTime = newDate();\r\n  baseTime = (0,date_fns_setHours__WEBPACK_IMPORTED_MODULE_11__.setHours)(baseTime, (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(time));\r\n  baseTime = (0,date_fns_setMinutes__WEBPACK_IMPORTED_MODULE_12__.setMinutes)(baseTime, (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(time));\r\n  baseTime = (0,date_fns_setSeconds__WEBPACK_IMPORTED_MODULE_13__.setSeconds)(baseTime, (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(time));\r\n  var min = newDate();\r\n  min = (0,date_fns_setHours__WEBPACK_IMPORTED_MODULE_11__.setHours)(min, (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(minTime));\r\n  min = (0,date_fns_setMinutes__WEBPACK_IMPORTED_MODULE_12__.setMinutes)(min, (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(minTime));\r\n  min = (0,date_fns_setSeconds__WEBPACK_IMPORTED_MODULE_13__.setSeconds)(min, (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(minTime));\r\n  var max = newDate();\r\n  max = (0,date_fns_setHours__WEBPACK_IMPORTED_MODULE_11__.setHours)(max, (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(maxTime));\r\n  max = (0,date_fns_setMinutes__WEBPACK_IMPORTED_MODULE_12__.setMinutes)(max, (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(maxTime));\r\n  max = (0,date_fns_setSeconds__WEBPACK_IMPORTED_MODULE_13__.setSeconds)(max, (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(maxTime));\r\n  var valid;\r\n  try {\r\n    valid = !(0,date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__.isWithinInterval)(baseTime, {\r\n      start: min,\r\n      end: max\r\n    });\r\n  } catch (err) {\r\n    valid = false;\r\n  }\r\n  return valid;\r\n}\r\nfunction monthDisabledBefore(day) {\r\n  var _ref14 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\r\n    minDate = _ref14.minDate,\r\n    includeDates = _ref14.includeDates;\r\n  var previousMonth = (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_39__.subMonths)(day, 1);\r\n  return minDate && (0,date_fns_differenceInCalendarMonths__WEBPACK_IMPORTED_MODULE_40__.differenceInCalendarMonths)(minDate, previousMonth) > 0 || includeDates && includeDates.every(function (includeDate) {\r\n    return (0,date_fns_differenceInCalendarMonths__WEBPACK_IMPORTED_MODULE_40__.differenceInCalendarMonths)(includeDate, previousMonth) > 0;\r\n  }) || false;\r\n}\r\nfunction monthDisabledAfter(day) {\r\n  var _ref15 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\r\n    maxDate = _ref15.maxDate,\r\n    includeDates = _ref15.includeDates;\r\n  var nextMonth = (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(day, 1);\r\n  return maxDate && (0,date_fns_differenceInCalendarMonths__WEBPACK_IMPORTED_MODULE_40__.differenceInCalendarMonths)(nextMonth, maxDate) > 0 || includeDates && includeDates.every(function (includeDate) {\r\n    return (0,date_fns_differenceInCalendarMonths__WEBPACK_IMPORTED_MODULE_40__.differenceInCalendarMonths)(nextMonth, includeDate) > 0;\r\n  }) || false;\r\n}\r\nfunction quarterDisabledBefore(date) {\r\n  var _ref16 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\r\n    minDate = _ref16.minDate,\r\n    includeDates = _ref16.includeDates;\r\n  var firstDateOfYear = (0,date_fns_startOfYear__WEBPACK_IMPORTED_MODULE_18__.startOfYear)(date);\r\n  var previousQuarter = (0,date_fns_subQuarters__WEBPACK_IMPORTED_MODULE_42__.subQuarters)(firstDateOfYear, 1);\r\n  return minDate && (0,date_fns_differenceInCalendarQuarters__WEBPACK_IMPORTED_MODULE_43__.differenceInCalendarQuarters)(minDate, previousQuarter) > 0 || includeDates && includeDates.every(function (includeDate) {\r\n    return (0,date_fns_differenceInCalendarQuarters__WEBPACK_IMPORTED_MODULE_43__.differenceInCalendarQuarters)(includeDate, previousQuarter) > 0;\r\n  }) || false;\r\n}\r\nfunction quarterDisabledAfter(date) {\r\n  var _ref17 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\r\n    maxDate = _ref17.maxDate,\r\n    includeDates = _ref17.includeDates;\r\n  var lastDateOfYear = (0,date_fns_endOfYear__WEBPACK_IMPORTED_MODULE_33__.endOfYear)(date);\r\n  var nextQuarter = (0,date_fns_addQuarters__WEBPACK_IMPORTED_MODULE_44__.addQuarters)(lastDateOfYear, 1);\r\n  return maxDate && (0,date_fns_differenceInCalendarQuarters__WEBPACK_IMPORTED_MODULE_43__.differenceInCalendarQuarters)(nextQuarter, maxDate) > 0 || includeDates && includeDates.every(function (includeDate) {\r\n    return (0,date_fns_differenceInCalendarQuarters__WEBPACK_IMPORTED_MODULE_43__.differenceInCalendarQuarters)(nextQuarter, includeDate) > 0;\r\n  }) || false;\r\n}\r\nfunction yearDisabledBefore(day) {\r\n  var _ref18 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\r\n    minDate = _ref18.minDate,\r\n    includeDates = _ref18.includeDates;\r\n  var previousYear = (0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_45__.subYears)(day, 1);\r\n  return minDate && (0,date_fns_differenceInCalendarYears__WEBPACK_IMPORTED_MODULE_46__.differenceInCalendarYears)(minDate, previousYear) > 0 || includeDates && includeDates.every(function (includeDate) {\r\n    return (0,date_fns_differenceInCalendarYears__WEBPACK_IMPORTED_MODULE_46__.differenceInCalendarYears)(includeDate, previousYear) > 0;\r\n  }) || false;\r\n}\r\nfunction yearsDisabledBefore(day) {\r\n  var _ref19 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\r\n    minDate = _ref19.minDate,\r\n    _ref19$yearItemNumber = _ref19.yearItemNumber,\r\n    yearItemNumber = _ref19$yearItemNumber === void 0 ? DEFAULT_YEAR_ITEM_NUMBER : _ref19$yearItemNumber;\r\n  var previousYear = getStartOfYear((0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_45__.subYears)(day, yearItemNumber));\r\n  var _getYearsPeriod = getYearsPeriod(previousYear, yearItemNumber),\r\n    endPeriod = _getYearsPeriod.endPeriod;\r\n  var minDateYear = minDate && (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(minDate);\r\n  return minDateYear && minDateYear > endPeriod || false;\r\n}\r\nfunction yearDisabledAfter(day) {\r\n  var _ref20 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\r\n    maxDate = _ref20.maxDate,\r\n    includeDates = _ref20.includeDates;\r\n  var nextYear = (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(day, 1);\r\n  return maxDate && (0,date_fns_differenceInCalendarYears__WEBPACK_IMPORTED_MODULE_46__.differenceInCalendarYears)(nextYear, maxDate) > 0 || includeDates && includeDates.every(function (includeDate) {\r\n    return (0,date_fns_differenceInCalendarYears__WEBPACK_IMPORTED_MODULE_46__.differenceInCalendarYears)(nextYear, includeDate) > 0;\r\n  }) || false;\r\n}\r\nfunction yearsDisabledAfter(day) {\r\n  var _ref21 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\r\n    maxDate = _ref21.maxDate,\r\n    _ref21$yearItemNumber = _ref21.yearItemNumber,\r\n    yearItemNumber = _ref21$yearItemNumber === void 0 ? DEFAULT_YEAR_ITEM_NUMBER : _ref21$yearItemNumber;\r\n  var nextYear = (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(day, yearItemNumber);\r\n  var _getYearsPeriod2 = getYearsPeriod(nextYear, yearItemNumber),\r\n    startPeriod = _getYearsPeriod2.startPeriod;\r\n  var maxDateYear = maxDate && (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(maxDate);\r\n  return maxDateYear && maxDateYear < startPeriod || false;\r\n}\r\nfunction getEffectiveMinDate(_ref22) {\r\n  var minDate = _ref22.minDate,\r\n    includeDates = _ref22.includeDates;\r\n  if (includeDates && minDate) {\r\n    var minDates = includeDates.filter(function (includeDate) {\r\n      return (0,date_fns_differenceInCalendarDays__WEBPACK_IMPORTED_MODULE_35__.differenceInCalendarDays)(includeDate, minDate) >= 0;\r\n    });\r\n    return (0,date_fns_min__WEBPACK_IMPORTED_MODULE_48__.min)(minDates);\r\n  } else if (includeDates) {\r\n    return (0,date_fns_min__WEBPACK_IMPORTED_MODULE_48__.min)(includeDates);\r\n  } else {\r\n    return minDate;\r\n  }\r\n}\r\nfunction getEffectiveMaxDate(_ref23) {\r\n  var maxDate = _ref23.maxDate,\r\n    includeDates = _ref23.includeDates;\r\n  if (includeDates && maxDate) {\r\n    var maxDates = includeDates.filter(function (includeDate) {\r\n      return (0,date_fns_differenceInCalendarDays__WEBPACK_IMPORTED_MODULE_35__.differenceInCalendarDays)(includeDate, maxDate) <= 0;\r\n    });\r\n    return (0,date_fns_max__WEBPACK_IMPORTED_MODULE_49__.max)(maxDates);\r\n  } else if (includeDates) {\r\n    return (0,date_fns_max__WEBPACK_IMPORTED_MODULE_49__.max)(includeDates);\r\n  } else {\r\n    return maxDate;\r\n  }\r\n}\r\nfunction getHightLightDaysMap() {\r\n  var highlightDates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\r\n  var defaultClassName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"react-datepicker__day--highlighted\";\r\n  var dateClasses = new Map();\r\n  for (var i = 0, len = highlightDates.length; i < len; i++) {\r\n    var obj = highlightDates[i];\r\n    if ((0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__.isDate)(obj)) {\r\n      var key = formatDate(obj, \"MM.dd.yyyy\");\r\n      var classNamesArr = dateClasses.get(key) || [];\r\n      if (!classNamesArr.includes(defaultClassName)) {\r\n        classNamesArr.push(defaultClassName);\r\n        dateClasses.set(key, classNamesArr);\r\n      }\r\n    } else if (_typeof(obj) === \"object\") {\r\n      var keys = Object.keys(obj);\r\n      var className = keys[0];\r\n      var arrOfDates = obj[keys[0]];\r\n      if (typeof className === \"string\" && arrOfDates.constructor === Array) {\r\n        for (var k = 0, _len = arrOfDates.length; k < _len; k++) {\r\n          var _key = formatDate(arrOfDates[k], \"MM.dd.yyyy\");\r\n          var _classNamesArr = dateClasses.get(_key) || [];\r\n          if (!_classNamesArr.includes(className)) {\r\n            _classNamesArr.push(className);\r\n            dateClasses.set(_key, _classNamesArr);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return dateClasses;\r\n}\r\n\r\n/**\r\n * Compare the two arrays\r\n * @param {Array} array1\r\n * @param {Array} array2\r\n * @returns {Boolean} true, if the passed array are equal, false otherwise\r\n */\r\nfunction arraysAreEqual(array1, array2) {\r\n  if (array1.length !== array2.length) {\r\n    return false;\r\n  }\r\n  return array1.every(function (value, index) {\r\n    return value === array2[index];\r\n  });\r\n}\r\n\r\n/**\r\n * Assign the custom class to each date\r\n * @param {Array} holidayDates array of object containing date and name of the holiday\r\n * @param {string} classname to be added.\r\n * @returns {Map} Map containing date as key and array of classname and holiday name as value\r\n */\r\nfunction getHolidaysMap() {\r\n  var holidayDates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\r\n  var defaultClassName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"react-datepicker__day--holidays\";\r\n  var dateClasses = new Map();\r\n  holidayDates.forEach(function (holiday) {\r\n    var dateObj = holiday.date,\r\n      holidayName = holiday.holidayName;\r\n    if (!(0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__.isDate)(dateObj)) {\r\n      return;\r\n    }\r\n    var key = formatDate(dateObj, \"MM.dd.yyyy\");\r\n    var classNamesObj = dateClasses.get(key) || {};\r\n    if (\"className\" in classNamesObj && classNamesObj[\"className\"] === defaultClassName && arraysAreEqual(classNamesObj[\"holidayNames\"], [holidayName])) {\r\n      return;\r\n    }\r\n    classNamesObj[\"className\"] = defaultClassName;\r\n    var holidayNameArr = classNamesObj[\"holidayNames\"];\r\n    classNamesObj[\"holidayNames\"] = holidayNameArr ? [].concat(_toConsumableArray(holidayNameArr), [holidayName]) : [holidayName];\r\n    dateClasses.set(key, classNamesObj);\r\n  });\r\n  return dateClasses;\r\n}\r\nfunction timesToInjectAfter(startOfDay, currentTime, currentMultiplier, intervals, injectedTimes) {\r\n  var l = injectedTimes.length;\r\n  var times = [];\r\n  for (var i = 0; i < l; i++) {\r\n    var injectedTime = startOfDay;\r\n    injectedTime = (0,date_fns_addHours__WEBPACK_IMPORTED_MODULE_51__.addHours)(injectedTime, (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(injectedTimes[i]));\r\n    injectedTime = (0,date_fns_addMinutes__WEBPACK_IMPORTED_MODULE_52__.addMinutes)(injectedTime, (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(injectedTimes[i]));\r\n    injectedTime = (0,date_fns__WEBPACK_IMPORTED_MODULE_53__.addSeconds)(injectedTime, (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(injectedTimes[i]));\r\n    var nextTime = (0,date_fns_addMinutes__WEBPACK_IMPORTED_MODULE_52__.addMinutes)(startOfDay, (currentMultiplier + 1) * intervals);\r\n    if ((0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(injectedTime, currentTime) && (0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(injectedTime, nextTime)) {\r\n      times.push(injectedTimes[i]);\r\n    }\r\n  }\r\n  return times;\r\n}\r\nfunction addZero(i) {\r\n  return i < 10 ? \"0\".concat(i) : \"\".concat(i);\r\n}\r\nfunction getYearsPeriod(date) {\r\n  var yearItemNumber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_YEAR_ITEM_NUMBER;\r\n  var endPeriod = Math.ceil((0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(date) / yearItemNumber) * yearItemNumber;\r\n  var startPeriod = endPeriod - (yearItemNumber - 1);\r\n  return {\r\n    startPeriod: startPeriod,\r\n    endPeriod: endPeriod\r\n  };\r\n}\r\nfunction getHoursInDay(d) {\r\n  var startOfDay = new Date(d.getFullYear(), d.getMonth(), d.getDate());\r\n  var startOfTheNextDay = new Date(d.getFullYear(), d.getMonth(), d.getDate(), 24);\r\n  return Math.round((+startOfTheNextDay - +startOfDay) / 3600000);\r\n}\r\n\r\n/**\r\n * Returns the start of the minute for the given date\r\n *\r\n * NOTE: this function is a DST and timezone-safe analog of `date-fns/startOfMinute`\r\n * do not make changes unless you know what you're doing\r\n *\r\n * See comments on https://github.com/Hacker0x01/react-datepicker/pull/4244\r\n * for more details\r\n *\r\n * @param {Date} d date\r\n * @returns {Date} start of the minute\r\n */\r\nfunction startOfMinute(d) {\r\n  var seconds = d.getSeconds();\r\n  var milliseconds = d.getMilliseconds();\r\n  return (0,date_fns_toDate__WEBPACK_IMPORTED_MODULE_5__.toDate)(d.getTime() - seconds * 1000 - milliseconds);\r\n}\r\n\r\n/**\r\n * Returns whether the given dates are in the same minute\r\n *\r\n * This function is a DST and timezone-safe analog of `date-fns/isSameMinute`\r\n *\r\n * @param {Date} d1\r\n * @param {Date} d2\r\n * @returns {boolean}\r\n */\r\nfunction isSameMinute(d1, d2) {\r\n  return startOfMinute(d1).getTime() === startOfMinute(d2).getTime();\r\n}\r\n\r\n/**\r\n * Returns a cloned date with midnight time (00:00:00)\r\n *\r\n * @param {Date} date The date for which midnight time is required\r\n * @param {Date} dateToCompare the date to compare with\r\n * @returns {Date} A new datetime object representing the input date with midnight time\r\n */\r\nfunction getMidnightDate(date) {\r\n  if (!(0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__.isDate)(date)) {\r\n    throw new Error(\"Invalid date\");\r\n  }\r\n  var dateWithoutTime = new Date(date);\r\n  dateWithoutTime.setHours(0, 0, 0, 0);\r\n  return dateWithoutTime;\r\n}\r\n\r\n/**\r\n * Is the first date before the second one?\r\n *\r\n * @param {Date} date The date that should be before the other one to return true\r\n * @param {Date} dateToCompare The date to compare with\r\n * @returns {boolean} The first date is before the second date\r\n *\r\n * Note:\r\n *  This function considers the mid-night of the given dates for comparison.\r\n *  It evaluates whether date is before dateToCompare based on their mid-night timestamps.\r\n */\r\nfunction isDateBefore(date, dateToCompare) {\r\n  if (!(0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__.isDate)(date) || !(0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__.isDate)(dateToCompare)) {\r\n    throw new Error(\"Invalid date received\");\r\n  }\r\n  var midnightDate = getMidnightDate(date);\r\n  var midnightDateToCompare = getMidnightDate(dateToCompare);\r\n  return (0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(midnightDate, midnightDateToCompare);\r\n}\r\nfunction isSpaceKeyDown(event) {\r\n  var SPACE_KEY = \" \";\r\n  return event.key === SPACE_KEY;\r\n}\r\n\r\nfunction generateYears(year, noOfYear, minDate, maxDate) {\r\n  var list = [];\r\n  for (var i = 0; i < 2 * noOfYear + 1; i++) {\r\n    var newYear = year + noOfYear - i;\r\n    var isInRange = true;\r\n    if (minDate) {\r\n      isInRange = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(minDate) <= newYear;\r\n    }\r\n    if (maxDate && isInRange) {\r\n      isInRange = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(maxDate) >= newYear;\r\n    }\r\n    if (isInRange) {\r\n      list.push(newYear);\r\n    }\r\n  }\r\n  return list;\r\n}\r\nvar YearDropdownOptions = /*#__PURE__*/function (_React$Component) {\r\n  function YearDropdownOptions(props) {\r\n    var _this;\r\n    _classCallCheck(this, YearDropdownOptions);\r\n    _this = _callSuper(this, YearDropdownOptions, [props]);\r\n    _defineProperty(_this, \"renderOptions\", function () {\r\n      var selectedYear = _this.props.year;\r\n      var options = _this.state.yearsList.map(function (year) {\r\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n          className: selectedYear === year ? \"react-datepicker__year-option react-datepicker__year-option--selected_year\" : \"react-datepicker__year-option\",\r\n          key: year,\r\n          onClick: _this.onChange.bind(_this, year),\r\n          \"aria-selected\": selectedYear === year ? \"true\" : undefined\r\n        }, selectedYear === year ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\r\n          className: \"react-datepicker__year-option--selected\"\r\n        }, \"\\u2713\") : \"\", year);\r\n      });\r\n      var minYear = _this.props.minDate ? (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.props.minDate) : null;\r\n      var maxYear = _this.props.maxDate ? (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.props.maxDate) : null;\r\n      if (!maxYear || !_this.state.yearsList.find(function (year) {\r\n        return year === maxYear;\r\n      })) {\r\n        options.unshift( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n          className: \"react-datepicker__year-option\",\r\n          key: \"upcoming\",\r\n          onClick: _this.incrementYears\r\n        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"a\", {\r\n          className: \"react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-upcoming\"\r\n        })));\r\n      }\r\n      if (!minYear || !_this.state.yearsList.find(function (year) {\r\n        return year === minYear;\r\n      })) {\r\n        options.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n          className: \"react-datepicker__year-option\",\r\n          key: \"previous\",\r\n          onClick: _this.decrementYears\r\n        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"a\", {\r\n          className: \"react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-previous\"\r\n        })));\r\n      }\r\n      return options;\r\n    });\r\n    _defineProperty(_this, \"onChange\", function (year) {\r\n      _this.props.onChange(year);\r\n    });\r\n    _defineProperty(_this, \"handleClickOutside\", function () {\r\n      _this.props.onCancel();\r\n    });\r\n    _defineProperty(_this, \"shiftYears\", function (amount) {\r\n      var years = _this.state.yearsList.map(function (year) {\r\n        return year + amount;\r\n      });\r\n      _this.setState({\r\n        yearsList: years\r\n      });\r\n    });\r\n    _defineProperty(_this, \"incrementYears\", function () {\r\n      return _this.shiftYears(1);\r\n    });\r\n    _defineProperty(_this, \"decrementYears\", function () {\r\n      return _this.shiftYears(-1);\r\n    });\r\n    var yearDropdownItemNumber = props.yearDropdownItemNumber,\r\n      scrollableYearDropdown = props.scrollableYearDropdown;\r\n    var noOfYear = yearDropdownItemNumber || (scrollableYearDropdown ? 10 : 5);\r\n    _this.state = {\r\n      yearsList: generateYears(_this.props.year, noOfYear, _this.props.minDate, _this.props.maxDate)\r\n    };\r\n    _this.dropdownRef = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)();\r\n    return _this;\r\n  }\r\n  _inherits(YearDropdownOptions, _React$Component);\r\n  return _createClass(YearDropdownOptions, [{\r\n    key: \"componentDidMount\",\r\n    value: function componentDidMount() {\r\n      var dropdownCurrent = this.dropdownRef.current;\r\n      if (dropdownCurrent) {\r\n        // Get array from HTMLCollection\r\n        var dropdownCurrentChildren = dropdownCurrent.children ? Array.from(dropdownCurrent.children) : null;\r\n        var selectedYearOptionEl = dropdownCurrentChildren ? dropdownCurrentChildren.find(function (childEl) {\r\n          return childEl.ariaSelected;\r\n        }) : null;\r\n        dropdownCurrent.scrollTop = selectedYearOptionEl ? selectedYearOptionEl.offsetTop + (selectedYearOptionEl.clientHeight - dropdownCurrent.clientHeight) / 2 : (dropdownCurrent.scrollHeight - dropdownCurrent.clientHeight) / 2;\r\n      }\r\n    }\r\n  }, {\r\n    key: \"render\",\r\n    value: function render() {\r\n      var dropdownClass = (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)({\r\n        \"react-datepicker__year-dropdown\": true,\r\n        \"react-datepicker__year-dropdown--scrollable\": this.props.scrollableYearDropdown\r\n      });\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: dropdownClass,\r\n        ref: this.dropdownRef\r\n      }, this.renderOptions());\r\n    }\r\n  }]);\r\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\r\n\r\nvar WrappedYearDropdownOptions = (0,react_onclickoutside__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(YearDropdownOptions);\r\nvar YearDropdown = /*#__PURE__*/function (_React$Component) {\r\n  function YearDropdown() {\r\n    var _this;\r\n    _classCallCheck(this, YearDropdown);\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n    _this = _callSuper(this, YearDropdown, [].concat(args));\r\n    _defineProperty(_this, \"state\", {\r\n      dropdownVisible: false\r\n    });\r\n    _defineProperty(_this, \"renderSelectOptions\", function () {\r\n      var minYear = _this.props.minDate ? (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.props.minDate) : 1900;\r\n      var maxYear = _this.props.maxDate ? (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.props.maxDate) : 2100;\r\n      var options = [];\r\n      for (var i = minYear; i <= maxYear; i++) {\r\n        options.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"option\", {\r\n          key: i,\r\n          value: i\r\n        }, i));\r\n      }\r\n      return options;\r\n    });\r\n    _defineProperty(_this, \"onSelectChange\", function (e) {\r\n      _this.onChange(e.target.value);\r\n    });\r\n    _defineProperty(_this, \"renderSelectMode\", function () {\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"select\", {\r\n        value: _this.props.year,\r\n        className: \"react-datepicker__year-select\",\r\n        onChange: _this.onSelectChange\r\n      }, _this.renderSelectOptions());\r\n    });\r\n    _defineProperty(_this, \"renderReadView\", function (visible) {\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        key: \"read\",\r\n        style: {\r\n          visibility: visible ? \"visible\" : \"hidden\"\r\n        },\r\n        className: \"react-datepicker__year-read-view\",\r\n        onClick: function onClick(event) {\r\n          return _this.toggleDropdown(event);\r\n        }\r\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\r\n        className: \"react-datepicker__year-read-view--down-arrow\"\r\n      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\r\n        className: \"react-datepicker__year-read-view--selected-year\"\r\n      }, _this.props.year));\r\n    });\r\n    _defineProperty(_this, \"renderDropdown\", function () {\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(WrappedYearDropdownOptions, {\r\n        key: \"dropdown\",\r\n        year: _this.props.year,\r\n        onChange: _this.onChange,\r\n        onCancel: _this.toggleDropdown,\r\n        minDate: _this.props.minDate,\r\n        maxDate: _this.props.maxDate,\r\n        scrollableYearDropdown: _this.props.scrollableYearDropdown,\r\n        yearDropdownItemNumber: _this.props.yearDropdownItemNumber\r\n      });\r\n    });\r\n    _defineProperty(_this, \"renderScrollMode\", function () {\r\n      var dropdownVisible = _this.state.dropdownVisible;\r\n      var result = [_this.renderReadView(!dropdownVisible)];\r\n      if (dropdownVisible) {\r\n        result.unshift(_this.renderDropdown());\r\n      }\r\n      return result;\r\n    });\r\n    _defineProperty(_this, \"onChange\", function (year) {\r\n      _this.toggleDropdown();\r\n      if (year === _this.props.year) return;\r\n      _this.props.onChange(year);\r\n    });\r\n    _defineProperty(_this, \"toggleDropdown\", function (event) {\r\n      _this.setState({\r\n        dropdownVisible: !_this.state.dropdownVisible\r\n      }, function () {\r\n        if (_this.props.adjustDateOnChange) {\r\n          _this.handleYearChange(_this.props.date, event);\r\n        }\r\n      });\r\n    });\r\n    _defineProperty(_this, \"handleYearChange\", function (date, event) {\r\n      _this.onSelect(date, event);\r\n      _this.setOpen();\r\n    });\r\n    _defineProperty(_this, \"onSelect\", function (date, event) {\r\n      if (_this.props.onSelect) {\r\n        _this.props.onSelect(date, event);\r\n      }\r\n    });\r\n    _defineProperty(_this, \"setOpen\", function () {\r\n      if (_this.props.setOpen) {\r\n        _this.props.setOpen(true);\r\n      }\r\n    });\r\n    return _this;\r\n  }\r\n  _inherits(YearDropdown, _React$Component);\r\n  return _createClass(YearDropdown, [{\r\n    key: \"render\",\r\n    value: function render() {\r\n      var renderedDropdown;\r\n      switch (this.props.dropdownMode) {\r\n        case \"scroll\":\r\n          renderedDropdown = this.renderScrollMode();\r\n          break;\r\n        case \"select\":\r\n          renderedDropdown = this.renderSelectMode();\r\n          break;\r\n      }\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: \"react-datepicker__year-dropdown-container react-datepicker__year-dropdown-container--\".concat(this.props.dropdownMode)\r\n      }, renderedDropdown);\r\n    }\r\n  }]);\r\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\r\n\r\nvar MonthDropdownOptions = /*#__PURE__*/function (_React$Component) {\r\n  function MonthDropdownOptions() {\r\n    var _this;\r\n    _classCallCheck(this, MonthDropdownOptions);\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n    _this = _callSuper(this, MonthDropdownOptions, [].concat(args));\r\n    _defineProperty(_this, \"isSelectedMonth\", function (i) {\r\n      return _this.props.month === i;\r\n    });\r\n    _defineProperty(_this, \"renderOptions\", function () {\r\n      return _this.props.monthNames.map(function (month, i) {\r\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n          className: _this.isSelectedMonth(i) ? \"react-datepicker__month-option react-datepicker__month-option--selected_month\" : \"react-datepicker__month-option\",\r\n          key: month,\r\n          onClick: _this.onChange.bind(_this, i),\r\n          \"aria-selected\": _this.isSelectedMonth(i) ? \"true\" : undefined\r\n        }, _this.isSelectedMonth(i) ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\r\n          className: \"react-datepicker__month-option--selected\"\r\n        }, \"\\u2713\") : \"\", month);\r\n      });\r\n    });\r\n    _defineProperty(_this, \"onChange\", function (month) {\r\n      return _this.props.onChange(month);\r\n    });\r\n    _defineProperty(_this, \"handleClickOutside\", function () {\r\n      return _this.props.onCancel();\r\n    });\r\n    return _this;\r\n  }\r\n  _inherits(MonthDropdownOptions, _React$Component);\r\n  return _createClass(MonthDropdownOptions, [{\r\n    key: \"render\",\r\n    value: function render() {\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: \"react-datepicker__month-dropdown\"\r\n      }, this.renderOptions());\r\n    }\r\n  }]);\r\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\r\n\r\nvar WrappedMonthDropdownOptions = (0,react_onclickoutside__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(MonthDropdownOptions);\r\nvar MonthDropdown = /*#__PURE__*/function (_React$Component) {\r\n  function MonthDropdown() {\r\n    var _this;\r\n    _classCallCheck(this, MonthDropdown);\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n    _this = _callSuper(this, MonthDropdown, [].concat(args));\r\n    _defineProperty(_this, \"state\", {\r\n      dropdownVisible: false\r\n    });\r\n    _defineProperty(_this, \"renderSelectOptions\", function (monthNames) {\r\n      return monthNames.map(function (M, i) {\r\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"option\", {\r\n          key: i,\r\n          value: i\r\n        }, M);\r\n      });\r\n    });\r\n    _defineProperty(_this, \"renderSelectMode\", function (monthNames) {\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"select\", {\r\n        value: _this.props.month,\r\n        className: \"react-datepicker__month-select\",\r\n        onChange: function onChange(e) {\r\n          return _this.onChange(e.target.value);\r\n        }\r\n      }, _this.renderSelectOptions(monthNames));\r\n    });\r\n    _defineProperty(_this, \"renderReadView\", function (visible, monthNames) {\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        key: \"read\",\r\n        style: {\r\n          visibility: visible ? \"visible\" : \"hidden\"\r\n        },\r\n        className: \"react-datepicker__month-read-view\",\r\n        onClick: _this.toggleDropdown\r\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\r\n        className: \"react-datepicker__month-read-view--down-arrow\"\r\n      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\r\n        className: \"react-datepicker__month-read-view--selected-month\"\r\n      }, monthNames[_this.props.month]));\r\n    });\r\n    _defineProperty(_this, \"renderDropdown\", function (monthNames) {\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(WrappedMonthDropdownOptions, {\r\n        key: \"dropdown\",\r\n        month: _this.props.month,\r\n        monthNames: monthNames,\r\n        onChange: _this.onChange,\r\n        onCancel: _this.toggleDropdown\r\n      });\r\n    });\r\n    _defineProperty(_this, \"renderScrollMode\", function (monthNames) {\r\n      var dropdownVisible = _this.state.dropdownVisible;\r\n      var result = [_this.renderReadView(!dropdownVisible, monthNames)];\r\n      if (dropdownVisible) {\r\n        result.unshift(_this.renderDropdown(monthNames));\r\n      }\r\n      return result;\r\n    });\r\n    _defineProperty(_this, \"onChange\", function (month) {\r\n      _this.toggleDropdown();\r\n      if (month !== _this.props.month) {\r\n        _this.props.onChange(month);\r\n      }\r\n    });\r\n    _defineProperty(_this, \"toggleDropdown\", function () {\r\n      return _this.setState({\r\n        dropdownVisible: !_this.state.dropdownVisible\r\n      });\r\n    });\r\n    return _this;\r\n  }\r\n  _inherits(MonthDropdown, _React$Component);\r\n  return _createClass(MonthDropdown, [{\r\n    key: \"render\",\r\n    value: function render() {\r\n      var _this2 = this;\r\n      var monthNames = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map(this.props.useShortMonthInDropdown ? function (M) {\r\n        return getMonthShortInLocale(M, _this2.props.locale);\r\n      } : function (M) {\r\n        return getMonthInLocale(M, _this2.props.locale);\r\n      });\r\n      var renderedDropdown;\r\n      switch (this.props.dropdownMode) {\r\n        case \"scroll\":\r\n          renderedDropdown = this.renderScrollMode(monthNames);\r\n          break;\r\n        case \"select\":\r\n          renderedDropdown = this.renderSelectMode(monthNames);\r\n          break;\r\n      }\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: \"react-datepicker__month-dropdown-container react-datepicker__month-dropdown-container--\".concat(this.props.dropdownMode)\r\n      }, renderedDropdown);\r\n    }\r\n  }]);\r\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\r\n\r\nfunction generateMonthYears(minDate, maxDate) {\r\n  var list = [];\r\n  var currDate = getStartOfMonth(minDate);\r\n  var lastDate = getStartOfMonth(maxDate);\r\n  while (!(0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(currDate, lastDate)) {\r\n    list.push(newDate(currDate));\r\n    currDate = (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(currDate, 1);\r\n  }\r\n  return list;\r\n}\r\nvar MonthYearDropdownOptions = /*#__PURE__*/function (_React$Component) {\r\n  function MonthYearDropdownOptions(props) {\r\n    var _this;\r\n    _classCallCheck(this, MonthYearDropdownOptions);\r\n    _this = _callSuper(this, MonthYearDropdownOptions, [props]);\r\n    _defineProperty(_this, \"renderOptions\", function () {\r\n      return _this.state.monthYearsList.map(function (monthYear) {\r\n        var monthYearPoint = (0,date_fns_getTime__WEBPACK_IMPORTED_MODULE_55__.getTime)(monthYear);\r\n        var isSameMonthYear = isSameYear(_this.props.date, monthYear) && isSameMonth(_this.props.date, monthYear);\r\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n          className: isSameMonthYear ? \"react-datepicker__month-year-option--selected_month-year\" : \"react-datepicker__month-year-option\",\r\n          key: monthYearPoint,\r\n          onClick: _this.onChange.bind(_this, monthYearPoint),\r\n          \"aria-selected\": isSameMonthYear ? \"true\" : undefined\r\n        }, isSameMonthYear ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\r\n          className: \"react-datepicker__month-year-option--selected\"\r\n        }, \"\\u2713\") : \"\", formatDate(monthYear, _this.props.dateFormat, _this.props.locale));\r\n      });\r\n    });\r\n    _defineProperty(_this, \"onChange\", function (monthYear) {\r\n      return _this.props.onChange(monthYear);\r\n    });\r\n    _defineProperty(_this, \"handleClickOutside\", function () {\r\n      _this.props.onCancel();\r\n    });\r\n    _this.state = {\r\n      monthYearsList: generateMonthYears(_this.props.minDate, _this.props.maxDate)\r\n    };\r\n    return _this;\r\n  }\r\n  _inherits(MonthYearDropdownOptions, _React$Component);\r\n  return _createClass(MonthYearDropdownOptions, [{\r\n    key: \"render\",\r\n    value: function render() {\r\n      var dropdownClass = (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)({\r\n        \"react-datepicker__month-year-dropdown\": true,\r\n        \"react-datepicker__month-year-dropdown--scrollable\": this.props.scrollableMonthYearDropdown\r\n      });\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: dropdownClass\r\n      }, this.renderOptions());\r\n    }\r\n  }]);\r\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\r\n\r\nvar WrappedMonthYearDropdownOptions = (0,react_onclickoutside__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(MonthYearDropdownOptions);\r\nvar MonthYearDropdown = /*#__PURE__*/function (_React$Component) {\r\n  function MonthYearDropdown() {\r\n    var _this;\r\n    _classCallCheck(this, MonthYearDropdown);\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n    _this = _callSuper(this, MonthYearDropdown, [].concat(args));\r\n    _defineProperty(_this, \"state\", {\r\n      dropdownVisible: false\r\n    });\r\n    _defineProperty(_this, \"renderSelectOptions\", function () {\r\n      var currDate = getStartOfMonth(_this.props.minDate);\r\n      var lastDate = getStartOfMonth(_this.props.maxDate);\r\n      var options = [];\r\n      while (!(0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(currDate, lastDate)) {\r\n        var timePoint = (0,date_fns_getTime__WEBPACK_IMPORTED_MODULE_55__.getTime)(currDate);\r\n        options.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"option\", {\r\n          key: timePoint,\r\n          value: timePoint\r\n        }, formatDate(currDate, _this.props.dateFormat, _this.props.locale)));\r\n        currDate = (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(currDate, 1);\r\n      }\r\n      return options;\r\n    });\r\n    _defineProperty(_this, \"onSelectChange\", function (e) {\r\n      _this.onChange(e.target.value);\r\n    });\r\n    _defineProperty(_this, \"renderSelectMode\", function () {\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"select\", {\r\n        value: (0,date_fns_getTime__WEBPACK_IMPORTED_MODULE_55__.getTime)(getStartOfMonth(_this.props.date)),\r\n        className: \"react-datepicker__month-year-select\",\r\n        onChange: _this.onSelectChange\r\n      }, _this.renderSelectOptions());\r\n    });\r\n    _defineProperty(_this, \"renderReadView\", function (visible) {\r\n      var yearMonth = formatDate(_this.props.date, _this.props.dateFormat, _this.props.locale);\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        key: \"read\",\r\n        style: {\r\n          visibility: visible ? \"visible\" : \"hidden\"\r\n        },\r\n        className: \"react-datepicker__month-year-read-view\",\r\n        onClick: function onClick(event) {\r\n          return _this.toggleDropdown(event);\r\n        }\r\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\r\n        className: \"react-datepicker__month-year-read-view--down-arrow\"\r\n      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\r\n        className: \"react-datepicker__month-year-read-view--selected-month-year\"\r\n      }, yearMonth));\r\n    });\r\n    _defineProperty(_this, \"renderDropdown\", function () {\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(WrappedMonthYearDropdownOptions, {\r\n        key: \"dropdown\",\r\n        date: _this.props.date,\r\n        dateFormat: _this.props.dateFormat,\r\n        onChange: _this.onChange,\r\n        onCancel: _this.toggleDropdown,\r\n        minDate: _this.props.minDate,\r\n        maxDate: _this.props.maxDate,\r\n        scrollableMonthYearDropdown: _this.props.scrollableMonthYearDropdown,\r\n        locale: _this.props.locale\r\n      });\r\n    });\r\n    _defineProperty(_this, \"renderScrollMode\", function () {\r\n      var dropdownVisible = _this.state.dropdownVisible;\r\n      var result = [_this.renderReadView(!dropdownVisible)];\r\n      if (dropdownVisible) {\r\n        result.unshift(_this.renderDropdown());\r\n      }\r\n      return result;\r\n    });\r\n    _defineProperty(_this, \"onChange\", function (monthYearPoint) {\r\n      _this.toggleDropdown();\r\n      var changedDate = newDate(parseInt(monthYearPoint));\r\n      if (isSameYear(_this.props.date, changedDate) && isSameMonth(_this.props.date, changedDate)) {\r\n        return;\r\n      }\r\n      _this.props.onChange(changedDate);\r\n    });\r\n    _defineProperty(_this, \"toggleDropdown\", function () {\r\n      return _this.setState({\r\n        dropdownVisible: !_this.state.dropdownVisible\r\n      });\r\n    });\r\n    return _this;\r\n  }\r\n  _inherits(MonthYearDropdown, _React$Component);\r\n  return _createClass(MonthYearDropdown, [{\r\n    key: \"render\",\r\n    value: function render() {\r\n      var renderedDropdown;\r\n      switch (this.props.dropdownMode) {\r\n        case \"scroll\":\r\n          renderedDropdown = this.renderScrollMode();\r\n          break;\r\n        case \"select\":\r\n          renderedDropdown = this.renderSelectMode();\r\n          break;\r\n      }\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: \"react-datepicker__month-year-dropdown-container react-datepicker__month-year-dropdown-container--\".concat(this.props.dropdownMode)\r\n      }, renderedDropdown);\r\n    }\r\n  }]);\r\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\r\n\r\nvar Day = /*#__PURE__*/function (_React$Component) {\r\n  function Day() {\r\n    var _this;\r\n    _classCallCheck(this, Day);\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n    _this = _callSuper(this, Day, [].concat(args));\r\n    _defineProperty(_this, \"dayEl\", /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createRef());\r\n    _defineProperty(_this, \"handleClick\", function (event) {\r\n      if (!_this.isDisabled() && _this.props.onClick) {\r\n        _this.props.onClick(event);\r\n      }\r\n    });\r\n    _defineProperty(_this, \"handleMouseEnter\", function (event) {\r\n      if (!_this.isDisabled() && _this.props.onMouseEnter) {\r\n        _this.props.onMouseEnter(event);\r\n      }\r\n    });\r\n    _defineProperty(_this, \"handleOnKeyDown\", function (event) {\r\n      var eventKey = event.key;\r\n      if (eventKey === \" \") {\r\n        event.preventDefault();\r\n        event.key = \"Enter\";\r\n      }\r\n      _this.props.handleOnKeyDown(event);\r\n    });\r\n    _defineProperty(_this, \"isSameDay\", function (other) {\r\n      return isSameDay(_this.props.day, other);\r\n    });\r\n    _defineProperty(_this, \"isKeyboardSelected\", function () {\r\n      var _this$props$selectedD;\r\n      if (_this.props.disabledKeyboardNavigation) {\r\n        return false;\r\n      }\r\n      var isSelectedDate = _this.props.selectsMultiple ? (_this$props$selectedD = _this.props.selectedDates) === null || _this$props$selectedD === void 0 ? void 0 : _this$props$selectedD.some(function (date) {\r\n        return _this.isSameDayOrWeek(date);\r\n      }) : _this.isSameDayOrWeek(_this.props.selected);\r\n      return !isSelectedDate && _this.isSameDayOrWeek(_this.props.preSelection);\r\n    });\r\n    _defineProperty(_this, \"isDisabled\", function () {\r\n      return isDayDisabled(_this.props.day, _this.props);\r\n    });\r\n    _defineProperty(_this, \"isExcluded\", function () {\r\n      return isDayExcluded(_this.props.day, _this.props);\r\n    });\r\n    _defineProperty(_this, \"isStartOfWeek\", function () {\r\n      return isSameDay(_this.props.day, getStartOfWeek(_this.props.day, _this.props.locale, _this.props.calendarStartDay));\r\n    });\r\n    _defineProperty(_this, \"isSameWeek\", function (other) {\r\n      return _this.props.showWeekPicker && isSameDay(other, getStartOfWeek(_this.props.day, _this.props.locale, _this.props.calendarStartDay));\r\n    });\r\n    _defineProperty(_this, \"isSameDayOrWeek\", function (other) {\r\n      return _this.isSameDay(other) || _this.isSameWeek(other);\r\n    });\r\n    _defineProperty(_this, \"getHighLightedClass\", function () {\r\n      var _this$props = _this.props,\r\n        day = _this$props.day,\r\n        highlightDates = _this$props.highlightDates;\r\n      if (!highlightDates) {\r\n        return false;\r\n      }\r\n\r\n      // Looking for className in the Map of {'day string, 'className'}\r\n      var dayStr = formatDate(day, \"MM.dd.yyyy\");\r\n      return highlightDates.get(dayStr);\r\n    });\r\n    // Function to return the array containing classname associated to the date\r\n    _defineProperty(_this, \"getHolidaysClass\", function () {\r\n      var _this$props2 = _this.props,\r\n        day = _this$props2.day,\r\n        holidays = _this$props2.holidays;\r\n      if (!holidays) {\r\n        return false;\r\n      }\r\n      var dayStr = formatDate(day, \"MM.dd.yyyy\");\r\n      // Looking for className in the Map of {day string: {className, holidayName}}\r\n      if (holidays.has(dayStr)) {\r\n        return [holidays.get(dayStr).className];\r\n      }\r\n    });\r\n    _defineProperty(_this, \"isInRange\", function () {\r\n      var _this$props3 = _this.props,\r\n        day = _this$props3.day,\r\n        startDate = _this$props3.startDate,\r\n        endDate = _this$props3.endDate;\r\n      if (!startDate || !endDate) {\r\n        return false;\r\n      }\r\n      return isDayInRange(day, startDate, endDate);\r\n    });\r\n    _defineProperty(_this, \"isInSelectingRange\", function () {\r\n      var _this$props$selecting;\r\n      var _this$props4 = _this.props,\r\n        day = _this$props4.day,\r\n        selectsStart = _this$props4.selectsStart,\r\n        selectsEnd = _this$props4.selectsEnd,\r\n        selectsRange = _this$props4.selectsRange,\r\n        selectsDisabledDaysInRange = _this$props4.selectsDisabledDaysInRange,\r\n        startDate = _this$props4.startDate,\r\n        endDate = _this$props4.endDate;\r\n      var selectingDate = (_this$props$selecting = _this.props.selectingDate) !== null && _this$props$selecting !== void 0 ? _this$props$selecting : _this.props.preSelection;\r\n      if (!(selectsStart || selectsEnd || selectsRange) || !selectingDate || !selectsDisabledDaysInRange && _this.isDisabled()) {\r\n        return false;\r\n      }\r\n      if (selectsStart && endDate && ((0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(selectingDate, endDate) || isEqual(selectingDate, endDate))) {\r\n        return isDayInRange(day, selectingDate, endDate);\r\n      }\r\n      if (selectsEnd && startDate && ((0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(selectingDate, startDate) || isEqual(selectingDate, startDate))) {\r\n        return isDayInRange(day, startDate, selectingDate);\r\n      }\r\n      if (selectsRange && startDate && !endDate && ((0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(selectingDate, startDate) || isEqual(selectingDate, startDate))) {\r\n        return isDayInRange(day, startDate, selectingDate);\r\n      }\r\n      return false;\r\n    });\r\n    _defineProperty(_this, \"isSelectingRangeStart\", function () {\r\n      var _this$props$selecting2;\r\n      if (!_this.isInSelectingRange()) {\r\n        return false;\r\n      }\r\n      var _this$props5 = _this.props,\r\n        day = _this$props5.day,\r\n        startDate = _this$props5.startDate,\r\n        selectsStart = _this$props5.selectsStart;\r\n      var selectingDate = (_this$props$selecting2 = _this.props.selectingDate) !== null && _this$props$selecting2 !== void 0 ? _this$props$selecting2 : _this.props.preSelection;\r\n      if (selectsStart) {\r\n        return isSameDay(day, selectingDate);\r\n      } else {\r\n        return isSameDay(day, startDate);\r\n      }\r\n    });\r\n    _defineProperty(_this, \"isSelectingRangeEnd\", function () {\r\n      var _this$props$selecting3;\r\n      if (!_this.isInSelectingRange()) {\r\n        return false;\r\n      }\r\n      var _this$props6 = _this.props,\r\n        day = _this$props6.day,\r\n        endDate = _this$props6.endDate,\r\n        selectsEnd = _this$props6.selectsEnd,\r\n        selectsRange = _this$props6.selectsRange;\r\n      var selectingDate = (_this$props$selecting3 = _this.props.selectingDate) !== null && _this$props$selecting3 !== void 0 ? _this$props$selecting3 : _this.props.preSelection;\r\n      if (selectsEnd || selectsRange) {\r\n        return isSameDay(day, selectingDate);\r\n      } else {\r\n        return isSameDay(day, endDate);\r\n      }\r\n    });\r\n    _defineProperty(_this, \"isRangeStart\", function () {\r\n      var _this$props7 = _this.props,\r\n        day = _this$props7.day,\r\n        startDate = _this$props7.startDate,\r\n        endDate = _this$props7.endDate;\r\n      if (!startDate || !endDate) {\r\n        return false;\r\n      }\r\n      return isSameDay(startDate, day);\r\n    });\r\n    _defineProperty(_this, \"isRangeEnd\", function () {\r\n      var _this$props8 = _this.props,\r\n        day = _this$props8.day,\r\n        startDate = _this$props8.startDate,\r\n        endDate = _this$props8.endDate;\r\n      if (!startDate || !endDate) {\r\n        return false;\r\n      }\r\n      return isSameDay(endDate, day);\r\n    });\r\n    _defineProperty(_this, \"isWeekend\", function () {\r\n      var weekday = (0,date_fns_getDay__WEBPACK_IMPORTED_MODULE_56__.getDay)(_this.props.day);\r\n      return weekday === 0 || weekday === 6;\r\n    });\r\n    _defineProperty(_this, \"isAfterMonth\", function () {\r\n      return _this.props.month !== undefined && (_this.props.month + 1) % 12 === (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.props.day);\r\n    });\r\n    _defineProperty(_this, \"isBeforeMonth\", function () {\r\n      return _this.props.month !== undefined && ((0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.props.day) + 1) % 12 === _this.props.month;\r\n    });\r\n    _defineProperty(_this, \"isCurrentDay\", function () {\r\n      return _this.isSameDay(newDate());\r\n    });\r\n    _defineProperty(_this, \"isSelected\", function () {\r\n      if (_this.props.selectsMultiple) {\r\n        var _this$props$selectedD2;\r\n        return (_this$props$selectedD2 = _this.props.selectedDates) === null || _this$props$selectedD2 === void 0 ? void 0 : _this$props$selectedD2.some(function (date) {\r\n          return _this.isSameDayOrWeek(date);\r\n        });\r\n      }\r\n      return _this.isSameDayOrWeek(_this.props.selected);\r\n    });\r\n    _defineProperty(_this, \"getClassNames\", function (date) {\r\n      var dayClassName = _this.props.dayClassName ? _this.props.dayClassName(date) : undefined;\r\n      return (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__day\", dayClassName, \"react-datepicker__day--\" + getDayOfWeekCode(_this.props.day), {\r\n        \"react-datepicker__day--disabled\": _this.isDisabled(),\r\n        \"react-datepicker__day--excluded\": _this.isExcluded(),\r\n        \"react-datepicker__day--selected\": _this.isSelected(),\r\n        \"react-datepicker__day--keyboard-selected\": _this.isKeyboardSelected(),\r\n        \"react-datepicker__day--range-start\": _this.isRangeStart(),\r\n        \"react-datepicker__day--range-end\": _this.isRangeEnd(),\r\n        \"react-datepicker__day--in-range\": _this.isInRange(),\r\n        \"react-datepicker__day--in-selecting-range\": _this.isInSelectingRange(),\r\n        \"react-datepicker__day--selecting-range-start\": _this.isSelectingRangeStart(),\r\n        \"react-datepicker__day--selecting-range-end\": _this.isSelectingRangeEnd(),\r\n        \"react-datepicker__day--today\": _this.isCurrentDay(),\r\n        \"react-datepicker__day--weekend\": _this.isWeekend(),\r\n        \"react-datepicker__day--outside-month\": _this.isAfterMonth() || _this.isBeforeMonth()\r\n      }, _this.getHighLightedClass(\"react-datepicker__day--highlighted\"), _this.getHolidaysClass());\r\n    });\r\n    _defineProperty(_this, \"getAriaLabel\", function () {\r\n      var _this$props9 = _this.props,\r\n        day = _this$props9.day,\r\n        _this$props9$ariaLabe = _this$props9.ariaLabelPrefixWhenEnabled,\r\n        ariaLabelPrefixWhenEnabled = _this$props9$ariaLabe === void 0 ? \"Choose\" : _this$props9$ariaLabe,\r\n        _this$props9$ariaLabe2 = _this$props9.ariaLabelPrefixWhenDisabled,\r\n        ariaLabelPrefixWhenDisabled = _this$props9$ariaLabe2 === void 0 ? \"Not available\" : _this$props9$ariaLabe2;\r\n      var prefix = _this.isDisabled() || _this.isExcluded() ? ariaLabelPrefixWhenDisabled : ariaLabelPrefixWhenEnabled;\r\n      return \"\".concat(prefix, \" \").concat(formatDate(day, \"PPPP\", _this.props.locale));\r\n    });\r\n    // A function to return the holiday's name as title's content\r\n    _defineProperty(_this, \"getTitle\", function () {\r\n      var _this$props10 = _this.props,\r\n        day = _this$props10.day,\r\n        _this$props10$holiday = _this$props10.holidays,\r\n        holidays = _this$props10$holiday === void 0 ? new Map() : _this$props10$holiday,\r\n        excludeDates = _this$props10.excludeDates;\r\n      var compareDt = formatDate(day, \"MM.dd.yyyy\");\r\n      var titles = [];\r\n      if (holidays.has(compareDt)) {\r\n        titles.push.apply(titles, _toConsumableArray(holidays.get(compareDt).holidayNames));\r\n      }\r\n      if (_this.isExcluded()) {\r\n        titles.push(excludeDates === null || excludeDates === void 0 ? void 0 : excludeDates.filter(function (excludeDate) {\r\n          return isSameDay(excludeDate.date ? excludeDate.date : excludeDate, day);\r\n        }).map(function (excludeDate) {\r\n          return excludeDate.message;\r\n        }));\r\n      }\r\n      return titles.join(\", \");\r\n    });\r\n    _defineProperty(_this, \"getTabIndex\", function (selected, preSelection) {\r\n      var selectedDay = selected || _this.props.selected;\r\n      var preSelectionDay = preSelection || _this.props.preSelection;\r\n      var tabIndex = !(_this.props.showWeekPicker && (_this.props.showWeekNumber || !_this.isStartOfWeek())) && (_this.isKeyboardSelected() || _this.isSameDay(selectedDay) && isSameDay(preSelectionDay, selectedDay)) ? 0 : -1;\r\n      return tabIndex;\r\n    });\r\n    // various cases when we need to apply focus to the preselected day\r\n    // focus the day on mount/update so that keyboard navigation works while cycling through months with up or down keys (not for prev and next month buttons)\r\n    // prevent focus for these activeElement cases so we don't pull focus from the input as the calendar opens\r\n    _defineProperty(_this, \"handleFocusDay\", function () {\r\n      var _this$dayEl$current;\r\n      var prevProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n      var shouldFocusDay = false;\r\n      // only do this while the input isn't focused\r\n      // otherwise, typing/backspacing the date manually may steal focus away from the input\r\n      if (_this.getTabIndex() === 0 && !prevProps.isInputFocused && _this.isSameDay(_this.props.preSelection)) {\r\n        // there is currently no activeElement and not inline\r\n        if (!document.activeElement || document.activeElement === document.body) {\r\n          shouldFocusDay = true;\r\n        }\r\n        // inline version:\r\n        // do not focus on initial render to prevent autoFocus issue\r\n        // focus after month has changed via keyboard\r\n        if (_this.props.inline && !_this.props.shouldFocusDayInline) {\r\n          shouldFocusDay = false;\r\n        }\r\n        // the activeElement is in the container, and it is another instance of Day\r\n        if (_this.props.containerRef && _this.props.containerRef.current && _this.props.containerRef.current.contains(document.activeElement) && document.activeElement.classList.contains(\"react-datepicker__day\")) {\r\n          shouldFocusDay = true;\r\n        }\r\n        //day is one of the non rendered duplicate days\r\n        if (_this.props.monthShowsDuplicateDaysEnd && _this.isAfterMonth()) {\r\n          shouldFocusDay = false;\r\n        }\r\n        if (_this.props.monthShowsDuplicateDaysStart && _this.isBeforeMonth()) {\r\n          shouldFocusDay = false;\r\n        }\r\n      }\r\n      shouldFocusDay && ((_this$dayEl$current = _this.dayEl.current) === null || _this$dayEl$current === void 0 ? void 0 : _this$dayEl$current.focus({\r\n        preventScroll: true\r\n      }));\r\n    });\r\n    _defineProperty(_this, \"renderDayContents\", function () {\r\n      if (_this.props.monthShowsDuplicateDaysEnd && _this.isAfterMonth()) return null;\r\n      if (_this.props.monthShowsDuplicateDaysStart && _this.isBeforeMonth()) return null;\r\n      return _this.props.renderDayContents ? _this.props.renderDayContents((0,date_fns_getDate__WEBPACK_IMPORTED_MODULE_57__.getDate)(_this.props.day), _this.props.day) : (0,date_fns_getDate__WEBPACK_IMPORTED_MODULE_57__.getDate)(_this.props.day);\r\n    });\r\n    _defineProperty(_this, \"render\", function () {\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        ref: _this.dayEl,\r\n        className: _this.getClassNames(_this.props.day),\r\n        onKeyDown: _this.handleOnKeyDown,\r\n        onClick: _this.handleClick,\r\n        onMouseEnter: !_this.props.usePointerEvent ? _this.handleMouseEnter : undefined,\r\n        onPointerEnter: _this.props.usePointerEvent ? _this.handleMouseEnter : undefined,\r\n        tabIndex: _this.getTabIndex(),\r\n        \"aria-label\": _this.getAriaLabel(),\r\n        role: \"option\",\r\n        title: _this.getTitle(),\r\n        \"aria-disabled\": _this.isDisabled(),\r\n        \"aria-current\": _this.isCurrentDay() ? \"date\" : undefined,\r\n        \"aria-selected\": _this.isSelected() || _this.isInRange()\r\n      }, _this.renderDayContents(), _this.getTitle() !== \"\" && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\r\n        className: \"overlay\"\r\n      }, _this.getTitle()));\r\n    });\r\n    return _this;\r\n  }\r\n  _inherits(Day, _React$Component);\r\n  return _createClass(Day, [{\r\n    key: \"componentDidMount\",\r\n    value: function componentDidMount() {\r\n      this.handleFocusDay();\r\n    }\r\n  }, {\r\n    key: \"componentDidUpdate\",\r\n    value: function componentDidUpdate(prevProps) {\r\n      this.handleFocusDay(prevProps);\r\n    }\r\n  }]);\r\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\r\n\r\nvar WeekNumber = /*#__PURE__*/function (_React$Component) {\r\n  function WeekNumber() {\r\n    var _this;\r\n    _classCallCheck(this, WeekNumber);\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n    _this = _callSuper(this, WeekNumber, [].concat(args));\r\n    _defineProperty(_this, \"weekNumberEl\", /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createRef());\r\n    _defineProperty(_this, \"handleClick\", function (event) {\r\n      if (_this.props.onClick) {\r\n        _this.props.onClick(event);\r\n      }\r\n    });\r\n    _defineProperty(_this, \"handleOnKeyDown\", function (event) {\r\n      var eventKey = event.key;\r\n      if (eventKey === \" \") {\r\n        event.preventDefault();\r\n        event.key = \"Enter\";\r\n      }\r\n      _this.props.handleOnKeyDown(event);\r\n    });\r\n    _defineProperty(_this, \"isKeyboardSelected\", function () {\r\n      return !_this.props.disabledKeyboardNavigation && !isSameDay(_this.props.date, _this.props.selected) && isSameDay(_this.props.date, _this.props.preSelection);\r\n    });\r\n    _defineProperty(_this, \"getTabIndex\", function () {\r\n      return _this.props.showWeekPicker && _this.props.showWeekNumber && (_this.isKeyboardSelected() || isSameDay(_this.props.date, _this.props.selected) && isSameDay(_this.props.preSelection, _this.props.selected)) ? 0 : -1;\r\n    });\r\n    // various cases when we need to apply focus to the preselected week-number\r\n    // focus the week-number on mount/update so that keyboard navigation works while cycling through months with up or down keys (not for prev and next month buttons)\r\n    // prevent focus for these activeElement cases so we don't pull focus from the input as the calendar opens\r\n    _defineProperty(_this, \"handleFocusWeekNumber\", function () {\r\n      var prevProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n      var shouldFocusWeekNumber = false;\r\n      // only do this while the input isn't focused\r\n      // otherwise, typing/backspacing the date manually may steal focus away from the input\r\n      if (_this.getTabIndex() === 0 && !prevProps.isInputFocused && isSameDay(_this.props.date, _this.props.preSelection)) {\r\n        // there is currently no activeElement and not inline\r\n        if (!document.activeElement || document.activeElement === document.body) {\r\n          shouldFocusWeekNumber = true;\r\n        }\r\n        // inline version:\r\n        // do not focus on initial render to prevent autoFocus issue\r\n        // focus after month has changed via keyboard\r\n        if (_this.props.inline && !_this.props.shouldFocusDayInline) {\r\n          shouldFocusWeekNumber = false;\r\n        }\r\n        // the activeElement is in the container, and it is another instance of WeekNumber\r\n        if (_this.props.containerRef && _this.props.containerRef.current && _this.props.containerRef.current.contains(document.activeElement) && document.activeElement && document.activeElement.classList.contains(\"react-datepicker__week-number\")) {\r\n          shouldFocusWeekNumber = true;\r\n        }\r\n      }\r\n      shouldFocusWeekNumber && _this.weekNumberEl.current && _this.weekNumberEl.current.focus({\r\n        preventScroll: true\r\n      });\r\n    });\r\n    return _this;\r\n  }\r\n  _inherits(WeekNumber, _React$Component);\r\n  return _createClass(WeekNumber, [{\r\n    key: \"componentDidMount\",\r\n    value: function componentDidMount() {\r\n      this.handleFocusWeekNumber();\r\n    }\r\n  }, {\r\n    key: \"componentDidUpdate\",\r\n    value: function componentDidUpdate(prevProps) {\r\n      this.handleFocusWeekNumber(prevProps);\r\n    }\r\n  }, {\r\n    key: \"render\",\r\n    value: function render() {\r\n      var _this$props = this.props,\r\n        weekNumber = _this$props.weekNumber,\r\n        _this$props$ariaLabel = _this$props.ariaLabelPrefix,\r\n        ariaLabelPrefix = _this$props$ariaLabel === void 0 ? \"week \" : _this$props$ariaLabel,\r\n        onClick = _this$props.onClick;\r\n      var weekNumberClasses = {\r\n        \"react-datepicker__week-number\": true,\r\n        \"react-datepicker__week-number--clickable\": !!onClick,\r\n        \"react-datepicker__week-number--selected\": !!onClick && isSameDay(this.props.date, this.props.selected),\r\n        \"react-datepicker__week-number--keyboard-selected\": this.isKeyboardSelected()\r\n      };\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        ref: this.weekNumberEl,\r\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(weekNumberClasses),\r\n        \"aria-label\": \"\".concat(ariaLabelPrefix, \" \").concat(this.props.weekNumber),\r\n        onClick: this.handleClick,\r\n        onKeyDown: this.handleOnKeyDown,\r\n        tabIndex: this.getTabIndex()\r\n      }, weekNumber);\r\n    }\r\n  }], [{\r\n    key: \"defaultProps\",\r\n    get: function get() {\r\n      return {\r\n        ariaLabelPrefix: \"week \"\r\n      };\r\n    }\r\n  }]);\r\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\r\n\r\nvar Week = /*#__PURE__*/function (_React$Component) {\r\n  function Week() {\r\n    var _this;\r\n    _classCallCheck(this, Week);\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n    _this = _callSuper(this, Week, [].concat(args));\r\n    _defineProperty(_this, \"handleDayClick\", function (day, event) {\r\n      if (_this.props.onDayClick) {\r\n        _this.props.onDayClick(day, event);\r\n      }\r\n    });\r\n    _defineProperty(_this, \"handleDayMouseEnter\", function (day) {\r\n      if (_this.props.onDayMouseEnter) {\r\n        _this.props.onDayMouseEnter(day);\r\n      }\r\n    });\r\n    _defineProperty(_this, \"handleWeekClick\", function (day, weekNumber, event) {\r\n      if (typeof _this.props.onWeekSelect === \"function\") {\r\n        _this.props.onWeekSelect(day, weekNumber, event);\r\n      }\r\n      if (_this.props.showWeekPicker) {\r\n        _this.handleDayClick(day, event);\r\n      }\r\n      if (_this.props.shouldCloseOnSelect) {\r\n        _this.props.setOpen(false);\r\n      }\r\n    });\r\n    _defineProperty(_this, \"formatWeekNumber\", function (date) {\r\n      if (_this.props.formatWeekNumber) {\r\n        return _this.props.formatWeekNumber(date);\r\n      }\r\n      return getWeek(date);\r\n    });\r\n    _defineProperty(_this, \"renderDays\", function () {\r\n      var startOfWeek = _this.startOfWeek();\r\n      var days = [];\r\n      var weekNumber = _this.formatWeekNumber(startOfWeek);\r\n      if (_this.props.showWeekNumber) {\r\n        var onClickAction = _this.props.onWeekSelect || _this.props.showWeekPicker ? _this.handleWeekClick.bind(_this, startOfWeek, weekNumber) : undefined;\r\n        days.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(WeekNumber, {\r\n          key: \"W\",\r\n          weekNumber: weekNumber,\r\n          date: startOfWeek,\r\n          onClick: onClickAction,\r\n          selected: _this.props.selected,\r\n          preSelection: _this.props.preSelection,\r\n          ariaLabelPrefix: _this.props.ariaLabelPrefix,\r\n          showWeekPicker: _this.props.showWeekPicker,\r\n          showWeekNumber: _this.props.showWeekNumber,\r\n          disabledKeyboardNavigation: _this.props.disabledKeyboardNavigation,\r\n          handleOnKeyDown: _this.props.handleOnKeyDown,\r\n          isInputFocused: _this.props.isInputFocused,\r\n          containerRef: _this.props.containerRef\r\n        }));\r\n      }\r\n      return days.concat([0, 1, 2, 3, 4, 5, 6].map(function (offset) {\r\n        var day = (0,date_fns_addDays__WEBPACK_IMPORTED_MODULE_58__.addDays)(startOfWeek, offset);\r\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Day, {\r\n          ariaLabelPrefixWhenEnabled: _this.props.chooseDayAriaLabelPrefix,\r\n          ariaLabelPrefixWhenDisabled: _this.props.disabledDayAriaLabelPrefix,\r\n          key: day.valueOf(),\r\n          day: day,\r\n          month: _this.props.month,\r\n          onClick: _this.handleDayClick.bind(_this, day),\r\n          usePointerEvent: _this.props.usePointerEvent,\r\n          onMouseEnter: _this.handleDayMouseEnter.bind(_this, day),\r\n          minDate: _this.props.minDate,\r\n          maxDate: _this.props.maxDate,\r\n          calendarStartDay: _this.props.calendarStartDay,\r\n          excludeDates: _this.props.excludeDates,\r\n          excludeDateIntervals: _this.props.excludeDateIntervals,\r\n          includeDates: _this.props.includeDates,\r\n          includeDateIntervals: _this.props.includeDateIntervals,\r\n          highlightDates: _this.props.highlightDates,\r\n          holidays: _this.props.holidays,\r\n          selectingDate: _this.props.selectingDate,\r\n          filterDate: _this.props.filterDate,\r\n          preSelection: _this.props.preSelection,\r\n          selected: _this.props.selected,\r\n          selectsStart: _this.props.selectsStart,\r\n          selectsEnd: _this.props.selectsEnd,\r\n          selectsRange: _this.props.selectsRange,\r\n          showWeekPicker: _this.props.showWeekPicker,\r\n          showWeekNumber: _this.props.showWeekNumber,\r\n          selectsDisabledDaysInRange: _this.props.selectsDisabledDaysInRange,\r\n          selectsMultiple: _this.props.selectsMultiple,\r\n          selectedDates: _this.props.selectedDates,\r\n          startDate: _this.props.startDate,\r\n          endDate: _this.props.endDate,\r\n          dayClassName: _this.props.dayClassName,\r\n          renderDayContents: _this.props.renderDayContents,\r\n          disabledKeyboardNavigation: _this.props.disabledKeyboardNavigation,\r\n          handleOnKeyDown: _this.props.handleOnKeyDown,\r\n          isInputFocused: _this.props.isInputFocused,\r\n          containerRef: _this.props.containerRef,\r\n          inline: _this.props.inline,\r\n          shouldFocusDayInline: _this.props.shouldFocusDayInline,\r\n          monthShowsDuplicateDaysEnd: _this.props.monthShowsDuplicateDaysEnd,\r\n          monthShowsDuplicateDaysStart: _this.props.monthShowsDuplicateDaysStart,\r\n          locale: _this.props.locale\r\n        });\r\n      }));\r\n    });\r\n    _defineProperty(_this, \"startOfWeek\", function () {\r\n      return getStartOfWeek(_this.props.day, _this.props.locale, _this.props.calendarStartDay);\r\n    });\r\n    _defineProperty(_this, \"isKeyboardSelected\", function () {\r\n      return !_this.props.disabledKeyboardNavigation && !isSameDay(_this.startOfWeek(), _this.props.selected) && isSameDay(_this.startOfWeek(), _this.props.preSelection);\r\n    });\r\n    return _this;\r\n  }\r\n  _inherits(Week, _React$Component);\r\n  return _createClass(Week, [{\r\n    key: \"render\",\r\n    value: function render() {\r\n      var weekNumberClasses = {\r\n        \"react-datepicker__week\": true,\r\n        \"react-datepicker__week--selected\": isSameDay(this.startOfWeek(), this.props.selected),\r\n        \"react-datepicker__week--keyboard-selected\": this.isKeyboardSelected()\r\n      };\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(weekNumberClasses)\r\n      }, this.renderDays());\r\n    }\r\n  }], [{\r\n    key: \"defaultProps\",\r\n    get: function get() {\r\n      return {\r\n        shouldCloseOnSelect: true\r\n      };\r\n    }\r\n  }]);\r\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\r\n\r\nvar FIXED_HEIGHT_STANDARD_WEEK_COUNT = 6;\r\nvar MONTH_COLUMNS_LAYOUT = {\r\n  TWO_COLUMNS: \"two_columns\",\r\n  THREE_COLUMNS: \"three_columns\",\r\n  FOUR_COLUMNS: \"four_columns\"\r\n};\r\nvar MONTH_COLUMNS = _defineProperty(_defineProperty(_defineProperty({}, MONTH_COLUMNS_LAYOUT.TWO_COLUMNS, {\r\n  grid: [[0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11]],\r\n  verticalNavigationOffset: 2\r\n}), MONTH_COLUMNS_LAYOUT.THREE_COLUMNS, {\r\n  grid: [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11]],\r\n  verticalNavigationOffset: 3\r\n}), MONTH_COLUMNS_LAYOUT.FOUR_COLUMNS, {\r\n  grid: [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]],\r\n  verticalNavigationOffset: 4\r\n});\r\nvar MONTH_NAVIGATION_HORIZONTAL_OFFSET = 1;\r\nfunction getMonthColumnsLayout(showFourColumnMonthYearPicker, showTwoColumnMonthYearPicker) {\r\n  if (showFourColumnMonthYearPicker) return MONTH_COLUMNS_LAYOUT.FOUR_COLUMNS;\r\n  if (showTwoColumnMonthYearPicker) return MONTH_COLUMNS_LAYOUT.TWO_COLUMNS;\r\n  return MONTH_COLUMNS_LAYOUT.THREE_COLUMNS;\r\n}\r\nvar Month = /*#__PURE__*/function (_React$Component) {\r\n  function Month() {\r\n    var _this;\r\n    _classCallCheck(this, Month);\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n    _this = _callSuper(this, Month, [].concat(args));\r\n    _defineProperty(_this, \"MONTH_REFS\", _toConsumableArray(Array(12)).map(function () {\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createRef();\r\n    }));\r\n    _defineProperty(_this, \"QUARTER_REFS\", _toConsumableArray(Array(4)).map(function () {\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createRef();\r\n    }));\r\n    _defineProperty(_this, \"isDisabled\", function (date) {\r\n      return isDayDisabled(date, _this.props);\r\n    });\r\n    _defineProperty(_this, \"isExcluded\", function (date) {\r\n      return isDayExcluded(date, _this.props);\r\n    });\r\n    _defineProperty(_this, \"handleDayClick\", function (day, event) {\r\n      if (_this.props.onDayClick) {\r\n        _this.props.onDayClick(day, event, _this.props.orderInDisplay);\r\n      }\r\n    });\r\n    _defineProperty(_this, \"handleDayMouseEnter\", function (day) {\r\n      if (_this.props.onDayMouseEnter) {\r\n        _this.props.onDayMouseEnter(day);\r\n      }\r\n    });\r\n    _defineProperty(_this, \"handleMouseLeave\", function () {\r\n      if (_this.props.onMouseLeave) {\r\n        _this.props.onMouseLeave();\r\n      }\r\n    });\r\n    _defineProperty(_this, \"isRangeStartMonth\", function (m) {\r\n      var _this$props = _this.props,\r\n        day = _this$props.day,\r\n        startDate = _this$props.startDate,\r\n        endDate = _this$props.endDate;\r\n      if (!startDate || !endDate) {\r\n        return false;\r\n      }\r\n      return isSameMonth((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, m), startDate);\r\n    });\r\n    _defineProperty(_this, \"isRangeStartQuarter\", function (q) {\r\n      var _this$props2 = _this.props,\r\n        day = _this$props2.day,\r\n        startDate = _this$props2.startDate,\r\n        endDate = _this$props2.endDate;\r\n      if (!startDate || !endDate) {\r\n        return false;\r\n      }\r\n      return isSameQuarter((0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(day, q), startDate);\r\n    });\r\n    _defineProperty(_this, \"isRangeEndMonth\", function (m) {\r\n      var _this$props3 = _this.props,\r\n        day = _this$props3.day,\r\n        startDate = _this$props3.startDate,\r\n        endDate = _this$props3.endDate;\r\n      if (!startDate || !endDate) {\r\n        return false;\r\n      }\r\n      return isSameMonth((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, m), endDate);\r\n    });\r\n    _defineProperty(_this, \"isRangeEndQuarter\", function (q) {\r\n      var _this$props4 = _this.props,\r\n        day = _this$props4.day,\r\n        startDate = _this$props4.startDate,\r\n        endDate = _this$props4.endDate;\r\n      if (!startDate || !endDate) {\r\n        return false;\r\n      }\r\n      return isSameQuarter((0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(day, q), endDate);\r\n    });\r\n    _defineProperty(_this, \"isInSelectingRangeMonth\", function (m) {\r\n      var _this$props$selecting;\r\n      var _this$props5 = _this.props,\r\n        day = _this$props5.day,\r\n        selectsStart = _this$props5.selectsStart,\r\n        selectsEnd = _this$props5.selectsEnd,\r\n        selectsRange = _this$props5.selectsRange,\r\n        startDate = _this$props5.startDate,\r\n        endDate = _this$props5.endDate;\r\n      var selectingDate = (_this$props$selecting = _this.props.selectingDate) !== null && _this$props$selecting !== void 0 ? _this$props$selecting : _this.props.preSelection;\r\n      if (!(selectsStart || selectsEnd || selectsRange) || !selectingDate) {\r\n        return false;\r\n      }\r\n      if (selectsStart && endDate) {\r\n        return isMonthInRange(selectingDate, endDate, m, day);\r\n      }\r\n      if (selectsEnd && startDate) {\r\n        return isMonthInRange(startDate, selectingDate, m, day);\r\n      }\r\n      if (selectsRange && startDate && !endDate) {\r\n        return isMonthInRange(startDate, selectingDate, m, day);\r\n      }\r\n      return false;\r\n    });\r\n    _defineProperty(_this, \"isSelectingMonthRangeStart\", function (m) {\r\n      var _this$props$selecting2;\r\n      if (!_this.isInSelectingRangeMonth(m)) {\r\n        return false;\r\n      }\r\n      var _this$props6 = _this.props,\r\n        day = _this$props6.day,\r\n        startDate = _this$props6.startDate,\r\n        selectsStart = _this$props6.selectsStart;\r\n      var _month = (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, m);\r\n      var selectingDate = (_this$props$selecting2 = _this.props.selectingDate) !== null && _this$props$selecting2 !== void 0 ? _this$props$selecting2 : _this.props.preSelection;\r\n      if (selectsStart) {\r\n        return isSameMonth(_month, selectingDate);\r\n      } else {\r\n        return isSameMonth(_month, startDate);\r\n      }\r\n    });\r\n    _defineProperty(_this, \"isSelectingMonthRangeEnd\", function (m) {\r\n      var _this$props$selecting3;\r\n      if (!_this.isInSelectingRangeMonth(m)) {\r\n        return false;\r\n      }\r\n      var _this$props7 = _this.props,\r\n        day = _this$props7.day,\r\n        endDate = _this$props7.endDate,\r\n        selectsEnd = _this$props7.selectsEnd,\r\n        selectsRange = _this$props7.selectsRange;\r\n      var _month = (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, m);\r\n      var selectingDate = (_this$props$selecting3 = _this.props.selectingDate) !== null && _this$props$selecting3 !== void 0 ? _this$props$selecting3 : _this.props.preSelection;\r\n      if (selectsEnd || selectsRange) {\r\n        return isSameMonth(_month, selectingDate);\r\n      } else {\r\n        return isSameMonth(_month, endDate);\r\n      }\r\n    });\r\n    _defineProperty(_this, \"isInSelectingRangeQuarter\", function (q) {\r\n      var _this$props$selecting4;\r\n      var _this$props8 = _this.props,\r\n        day = _this$props8.day,\r\n        selectsStart = _this$props8.selectsStart,\r\n        selectsEnd = _this$props8.selectsEnd,\r\n        selectsRange = _this$props8.selectsRange,\r\n        startDate = _this$props8.startDate,\r\n        endDate = _this$props8.endDate;\r\n      var selectingDate = (_this$props$selecting4 = _this.props.selectingDate) !== null && _this$props$selecting4 !== void 0 ? _this$props$selecting4 : _this.props.preSelection;\r\n      if (!(selectsStart || selectsEnd || selectsRange) || !selectingDate) {\r\n        return false;\r\n      }\r\n      if (selectsStart && endDate) {\r\n        return isQuarterInRange(selectingDate, endDate, q, day);\r\n      }\r\n      if (selectsEnd && startDate) {\r\n        return isQuarterInRange(startDate, selectingDate, q, day);\r\n      }\r\n      if (selectsRange && startDate && !endDate) {\r\n        return isQuarterInRange(startDate, selectingDate, q, day);\r\n      }\r\n      return false;\r\n    });\r\n    _defineProperty(_this, \"isWeekInMonth\", function (startOfWeek) {\r\n      var day = _this.props.day;\r\n      var endOfWeek = (0,date_fns_addDays__WEBPACK_IMPORTED_MODULE_58__.addDays)(startOfWeek, 6);\r\n      return isSameMonth(startOfWeek, day) || isSameMonth(endOfWeek, day);\r\n    });\r\n    _defineProperty(_this, \"isCurrentMonth\", function (day, m) {\r\n      return (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day) === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(newDate()) && m === (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(newDate());\r\n    });\r\n    _defineProperty(_this, \"isCurrentQuarter\", function (day, q) {\r\n      return (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day) === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(newDate()) && q === (0,date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__.getQuarter)(newDate());\r\n    });\r\n    _defineProperty(_this, \"isSelectedMonth\", function (day, m, selected) {\r\n      return (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(selected) === m && (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day) === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(selected);\r\n    });\r\n    _defineProperty(_this, \"isSelectedQuarter\", function (day, q, selected) {\r\n      return (0,date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__.getQuarter)(day) === q && (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day) === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(selected);\r\n    });\r\n    _defineProperty(_this, \"renderWeeks\", function () {\r\n      var weeks = [];\r\n      var isFixedHeight = _this.props.fixedHeight;\r\n      var i = 0;\r\n      var breakAfterNextPush = false;\r\n      var currentWeekStart = getStartOfWeek(getStartOfMonth(_this.props.day), _this.props.locale, _this.props.calendarStartDay);\r\n      var selected = _this.props.showWeekPicker ? getStartOfWeek(_this.props.selected, _this.props.locale, _this.props.calendarStartDay) : _this.props.selected;\r\n      var preSelection = _this.props.showWeekPicker ? getStartOfWeek(_this.props.preSelection, _this.props.locale, _this.props.calendarStartDay) : _this.props.preSelection;\r\n      while (true) {\r\n        weeks.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Week, {\r\n          ariaLabelPrefix: _this.props.weekAriaLabelPrefix,\r\n          chooseDayAriaLabelPrefix: _this.props.chooseDayAriaLabelPrefix,\r\n          disabledDayAriaLabelPrefix: _this.props.disabledDayAriaLabelPrefix,\r\n          key: i,\r\n          day: currentWeekStart,\r\n          month: (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.props.day),\r\n          onDayClick: _this.handleDayClick,\r\n          usePointerEvent: _this.props.usePointerEvent,\r\n          onDayMouseEnter: _this.handleDayMouseEnter,\r\n          onWeekSelect: _this.props.onWeekSelect,\r\n          formatWeekNumber: _this.props.formatWeekNumber,\r\n          locale: _this.props.locale,\r\n          minDate: _this.props.minDate,\r\n          maxDate: _this.props.maxDate,\r\n          excludeDates: _this.props.excludeDates,\r\n          excludeDateIntervals: _this.props.excludeDateIntervals,\r\n          includeDates: _this.props.includeDates,\r\n          includeDateIntervals: _this.props.includeDateIntervals,\r\n          inline: _this.props.inline,\r\n          shouldFocusDayInline: _this.props.shouldFocusDayInline,\r\n          highlightDates: _this.props.highlightDates,\r\n          holidays: _this.props.holidays,\r\n          selectingDate: _this.props.selectingDate,\r\n          filterDate: _this.props.filterDate,\r\n          preSelection: preSelection,\r\n          selected: selected,\r\n          selectsStart: _this.props.selectsStart,\r\n          selectsEnd: _this.props.selectsEnd,\r\n          selectsRange: _this.props.selectsRange,\r\n          selectsDisabledDaysInRange: _this.props.selectsDisabledDaysInRange,\r\n          selectsMultiple: _this.props.selectsMultiple,\r\n          selectedDates: _this.props.selectedDates,\r\n          showWeekNumber: _this.props.showWeekNumbers,\r\n          showWeekPicker: _this.props.showWeekPicker,\r\n          startDate: _this.props.startDate,\r\n          endDate: _this.props.endDate,\r\n          dayClassName: _this.props.dayClassName,\r\n          setOpen: _this.props.setOpen,\r\n          shouldCloseOnSelect: _this.props.shouldCloseOnSelect,\r\n          disabledKeyboardNavigation: _this.props.disabledKeyboardNavigation,\r\n          renderDayContents: _this.props.renderDayContents,\r\n          handleOnKeyDown: _this.props.handleOnKeyDown,\r\n          isInputFocused: _this.props.isInputFocused,\r\n          containerRef: _this.props.containerRef,\r\n          calendarStartDay: _this.props.calendarStartDay,\r\n          monthShowsDuplicateDaysEnd: _this.props.monthShowsDuplicateDaysEnd,\r\n          monthShowsDuplicateDaysStart: _this.props.monthShowsDuplicateDaysStart\r\n        }));\r\n        if (breakAfterNextPush) break;\r\n        i++;\r\n        currentWeekStart = (0,date_fns_addWeeks__WEBPACK_IMPORTED_MODULE_59__.addWeeks)(currentWeekStart, 1);\r\n\r\n        // If one of these conditions is true, we will either break on this week\r\n        // or break on the next week\r\n        var isFixedAndFinalWeek = isFixedHeight && i >= FIXED_HEIGHT_STANDARD_WEEK_COUNT;\r\n        var isNonFixedAndOutOfMonth = !isFixedHeight && !_this.isWeekInMonth(currentWeekStart);\r\n        if (isFixedAndFinalWeek || isNonFixedAndOutOfMonth) {\r\n          if (_this.props.peekNextMonth) {\r\n            breakAfterNextPush = true;\r\n          } else {\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return weeks;\r\n    });\r\n    _defineProperty(_this, \"onMonthClick\", function (e, m) {\r\n      var labelDate = (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(_this.props.day, m);\r\n      if (isMonthDisabled(labelDate, _this.props)) {\r\n        return;\r\n      }\r\n      _this.handleDayClick(getStartOfMonth(labelDate), e);\r\n    });\r\n    _defineProperty(_this, \"onMonthMouseEnter\", function (m) {\r\n      var labelDate = (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(_this.props.day, m);\r\n      if (isMonthDisabled(labelDate, _this.props)) {\r\n        return;\r\n      }\r\n      _this.handleDayMouseEnter(getStartOfMonth(labelDate));\r\n    });\r\n    _defineProperty(_this, \"handleMonthNavigation\", function (newMonth, newDate) {\r\n      if (_this.isDisabled(newDate) || _this.isExcluded(newDate)) return;\r\n      _this.props.setPreSelection(newDate);\r\n      _this.MONTH_REFS[newMonth].current && _this.MONTH_REFS[newMonth].current.focus();\r\n    });\r\n    _defineProperty(_this, \"onMonthKeyDown\", function (event, month) {\r\n      var _this$props9 = _this.props,\r\n        selected = _this$props9.selected,\r\n        preSelection = _this$props9.preSelection,\r\n        disabledKeyboardNavigation = _this$props9.disabledKeyboardNavigation,\r\n        showTwoColumnMonthYearPicker = _this$props9.showTwoColumnMonthYearPicker,\r\n        showFourColumnMonthYearPicker = _this$props9.showFourColumnMonthYearPicker,\r\n        setPreSelection = _this$props9.setPreSelection,\r\n        handleOnMonthKeyDown = _this$props9.handleOnMonthKeyDown;\r\n      var eventKey = event.key;\r\n      if (eventKey !== \"Tab\") {\r\n        // preventDefault on tab event blocks focus change\r\n        event.preventDefault();\r\n      }\r\n      if (!disabledKeyboardNavigation) {\r\n        var monthColumnsLayout = getMonthColumnsLayout(showFourColumnMonthYearPicker, showTwoColumnMonthYearPicker);\r\n        var verticalOffset = MONTH_COLUMNS[monthColumnsLayout].verticalNavigationOffset;\r\n        var monthsGrid = MONTH_COLUMNS[monthColumnsLayout].grid;\r\n        switch (eventKey) {\r\n          case \"Enter\":\r\n            _this.onMonthClick(event, month);\r\n            setPreSelection(selected);\r\n            break;\r\n          case \"ArrowRight\":\r\n            _this.handleMonthNavigation(month === 11 ? 0 : month + MONTH_NAVIGATION_HORIZONTAL_OFFSET, (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(preSelection, MONTH_NAVIGATION_HORIZONTAL_OFFSET));\r\n            break;\r\n          case \"ArrowLeft\":\r\n            _this.handleMonthNavigation(month === 0 ? 11 : month - MONTH_NAVIGATION_HORIZONTAL_OFFSET, (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_39__.subMonths)(preSelection, MONTH_NAVIGATION_HORIZONTAL_OFFSET));\r\n            break;\r\n          case \"ArrowUp\":\r\n            _this.handleMonthNavigation(\r\n            // Check if month on the first row\r\n            monthsGrid[0].includes(month) ? month + 12 - verticalOffset : month - verticalOffset, (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_39__.subMonths)(preSelection, verticalOffset));\r\n            break;\r\n          case \"ArrowDown\":\r\n            _this.handleMonthNavigation(\r\n            // Check if month on the last row\r\n            monthsGrid[monthsGrid.length - 1].includes(month) ? month - 12 + verticalOffset : month + verticalOffset, (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(preSelection, verticalOffset));\r\n            break;\r\n        }\r\n      }\r\n      handleOnMonthKeyDown && handleOnMonthKeyDown(event);\r\n    });\r\n    _defineProperty(_this, \"onQuarterClick\", function (e, q) {\r\n      var labelDate = (0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(_this.props.day, q);\r\n      if (isQuarterDisabled(labelDate, _this.props)) {\r\n        return;\r\n      }\r\n      _this.handleDayClick(getStartOfQuarter(labelDate), e);\r\n    });\r\n    _defineProperty(_this, \"onQuarterMouseEnter\", function (q) {\r\n      var labelDate = (0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(_this.props.day, q);\r\n      if (isQuarterDisabled(labelDate, _this.props)) {\r\n        return;\r\n      }\r\n      _this.handleDayMouseEnter(getStartOfQuarter(labelDate));\r\n    });\r\n    _defineProperty(_this, \"handleQuarterNavigation\", function (newQuarter, newDate) {\r\n      if (_this.isDisabled(newDate) || _this.isExcluded(newDate)) return;\r\n      _this.props.setPreSelection(newDate);\r\n      _this.QUARTER_REFS[newQuarter - 1].current && _this.QUARTER_REFS[newQuarter - 1].current.focus();\r\n    });\r\n    _defineProperty(_this, \"onQuarterKeyDown\", function (event, quarter) {\r\n      var eventKey = event.key;\r\n      if (!_this.props.disabledKeyboardNavigation) {\r\n        switch (eventKey) {\r\n          case \"Enter\":\r\n            _this.onQuarterClick(event, quarter);\r\n            _this.props.setPreSelection(_this.props.selected);\r\n            break;\r\n          case \"ArrowRight\":\r\n            _this.handleQuarterNavigation(quarter === 4 ? 1 : quarter + 1, (0,date_fns_addQuarters__WEBPACK_IMPORTED_MODULE_44__.addQuarters)(_this.props.preSelection, 1));\r\n            break;\r\n          case \"ArrowLeft\":\r\n            _this.handleQuarterNavigation(quarter === 1 ? 4 : quarter - 1, (0,date_fns_subQuarters__WEBPACK_IMPORTED_MODULE_42__.subQuarters)(_this.props.preSelection, 1));\r\n            break;\r\n        }\r\n      }\r\n    });\r\n    _defineProperty(_this, \"isMonthDisabled\", function (month) {\r\n      var _this$props10 = _this.props,\r\n        day = _this$props10.day,\r\n        minDate = _this$props10.minDate,\r\n        maxDate = _this$props10.maxDate,\r\n        excludeDates = _this$props10.excludeDates,\r\n        includeDates = _this$props10.includeDates;\r\n      var labelDate = (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, month);\r\n      return (minDate || maxDate || excludeDates || includeDates) && isMonthDisabled(labelDate, _this.props);\r\n    });\r\n    _defineProperty(_this, \"getMonthClassNames\", function (m) {\r\n      var _this$props11 = _this.props,\r\n        day = _this$props11.day,\r\n        startDate = _this$props11.startDate,\r\n        endDate = _this$props11.endDate,\r\n        selected = _this$props11.selected,\r\n        preSelection = _this$props11.preSelection,\r\n        monthClassName = _this$props11.monthClassName;\r\n      var _monthClassName = monthClassName ? monthClassName((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, m)) : undefined;\r\n      return (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__month-text\", \"react-datepicker__month-\".concat(m), _monthClassName, {\r\n        \"react-datepicker__month-text--disabled\": _this.isMonthDisabled(m),\r\n        \"react-datepicker__month-text--selected\": _this.isSelectedMonth(day, m, selected),\r\n        \"react-datepicker__month-text--keyboard-selected\": !_this.props.disabledKeyboardNavigation && _this.isSelectedMonth(day, m, preSelection),\r\n        \"react-datepicker__month-text--in-selecting-range\": _this.isInSelectingRangeMonth(m),\r\n        \"react-datepicker__month-text--in-range\": isMonthInRange(startDate, endDate, m, day),\r\n        \"react-datepicker__month-text--range-start\": _this.isRangeStartMonth(m),\r\n        \"react-datepicker__month-text--range-end\": _this.isRangeEndMonth(m),\r\n        \"react-datepicker__month-text--selecting-range-start\": _this.isSelectingMonthRangeStart(m),\r\n        \"react-datepicker__month-text--selecting-range-end\": _this.isSelectingMonthRangeEnd(m),\r\n        \"react-datepicker__month-text--today\": _this.isCurrentMonth(day, m)\r\n      });\r\n    });\r\n    _defineProperty(_this, \"getTabIndex\", function (m) {\r\n      var preSelectedMonth = (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.props.preSelection);\r\n      var tabIndex = !_this.props.disabledKeyboardNavigation && m === preSelectedMonth ? \"0\" : \"-1\";\r\n      return tabIndex;\r\n    });\r\n    _defineProperty(_this, \"getQuarterTabIndex\", function (q) {\r\n      var preSelectedQuarter = (0,date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__.getQuarter)(_this.props.preSelection);\r\n      var tabIndex = !_this.props.disabledKeyboardNavigation && q === preSelectedQuarter ? \"0\" : \"-1\";\r\n      return tabIndex;\r\n    });\r\n    _defineProperty(_this, \"getAriaLabel\", function (month) {\r\n      var _this$props12 = _this.props,\r\n        _this$props12$chooseD = _this$props12.chooseDayAriaLabelPrefix,\r\n        chooseDayAriaLabelPrefix = _this$props12$chooseD === void 0 ? \"Choose\" : _this$props12$chooseD,\r\n        _this$props12$disable = _this$props12.disabledDayAriaLabelPrefix,\r\n        disabledDayAriaLabelPrefix = _this$props12$disable === void 0 ? \"Not available\" : _this$props12$disable,\r\n        day = _this$props12.day,\r\n        locale = _this$props12.locale;\r\n      var labelDate = (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, month);\r\n      var prefix = _this.isDisabled(labelDate) || _this.isExcluded(labelDate) ? disabledDayAriaLabelPrefix : chooseDayAriaLabelPrefix;\r\n      return \"\".concat(prefix, \" \").concat(formatDate(labelDate, \"MMMM yyyy\", locale));\r\n    });\r\n    _defineProperty(_this, \"getQuarterClassNames\", function (q) {\r\n      var _this$props13 = _this.props,\r\n        day = _this$props13.day,\r\n        startDate = _this$props13.startDate,\r\n        endDate = _this$props13.endDate,\r\n        selected = _this$props13.selected,\r\n        minDate = _this$props13.minDate,\r\n        maxDate = _this$props13.maxDate,\r\n        preSelection = _this$props13.preSelection,\r\n        disabledKeyboardNavigation = _this$props13.disabledKeyboardNavigation;\r\n      return (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__quarter-text\", \"react-datepicker__quarter-\".concat(q), {\r\n        \"react-datepicker__quarter-text--disabled\": (minDate || maxDate) && isQuarterDisabled((0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(day, q), _this.props),\r\n        \"react-datepicker__quarter-text--selected\": _this.isSelectedQuarter(day, q, selected),\r\n        \"react-datepicker__quarter-text--keyboard-selected\": !disabledKeyboardNavigation && _this.isSelectedQuarter(day, q, preSelection),\r\n        \"react-datepicker__quarter-text--in-selecting-range\": _this.isInSelectingRangeQuarter(q),\r\n        \"react-datepicker__quarter-text--in-range\": isQuarterInRange(startDate, endDate, q, day),\r\n        \"react-datepicker__quarter-text--range-start\": _this.isRangeStartQuarter(q),\r\n        \"react-datepicker__quarter-text--range-end\": _this.isRangeEndQuarter(q)\r\n      });\r\n    });\r\n    _defineProperty(_this, \"getMonthContent\", function (m) {\r\n      var _this$props14 = _this.props,\r\n        showFullMonthYearPicker = _this$props14.showFullMonthYearPicker,\r\n        renderMonthContent = _this$props14.renderMonthContent,\r\n        locale = _this$props14.locale,\r\n        day = _this$props14.day;\r\n      var shortMonthText = getMonthShortInLocale(m, locale);\r\n      var fullMonthText = getMonthInLocale(m, locale);\r\n      if (renderMonthContent) {\r\n        return renderMonthContent(m, shortMonthText, fullMonthText, day);\r\n      }\r\n      return showFullMonthYearPicker ? fullMonthText : shortMonthText;\r\n    });\r\n    _defineProperty(_this, \"getQuarterContent\", function (q) {\r\n      var _this$props15 = _this.props,\r\n        renderQuarterContent = _this$props15.renderQuarterContent,\r\n        locale = _this$props15.locale;\r\n      var shortQuarter = getQuarterShortInLocale(q, locale);\r\n      return renderQuarterContent ? renderQuarterContent(q, shortQuarter) : shortQuarter;\r\n    });\r\n    _defineProperty(_this, \"renderMonths\", function () {\r\n      var _this$props16 = _this.props,\r\n        showTwoColumnMonthYearPicker = _this$props16.showTwoColumnMonthYearPicker,\r\n        showFourColumnMonthYearPicker = _this$props16.showFourColumnMonthYearPicker,\r\n        day = _this$props16.day,\r\n        selected = _this$props16.selected;\r\n      var monthColumns = MONTH_COLUMNS[getMonthColumnsLayout(showFourColumnMonthYearPicker, showTwoColumnMonthYearPicker)].grid;\r\n      return monthColumns.map(function (month, i) {\r\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n          className: \"react-datepicker__month-wrapper\",\r\n          key: i\r\n        }, month.map(function (m, j) {\r\n          return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n            ref: _this.MONTH_REFS[m],\r\n            key: j,\r\n            onClick: function onClick(ev) {\r\n              _this.onMonthClick(ev, m);\r\n            },\r\n            onKeyDown: function onKeyDown(ev) {\r\n              if (isSpaceKeyDown(ev)) {\r\n                ev.preventDefault();\r\n                ev.key = \"Enter\";\r\n              }\r\n              _this.onMonthKeyDown(ev, m);\r\n            },\r\n            onMouseEnter: !_this.props.usePointerEvent ? function () {\r\n              return _this.onMonthMouseEnter(m);\r\n            } : undefined,\r\n            onPointerEnter: _this.props.usePointerEvent ? function () {\r\n              return _this.onMonthMouseEnter(m);\r\n            } : undefined,\r\n            tabIndex: _this.getTabIndex(m),\r\n            className: _this.getMonthClassNames(m),\r\n            \"aria-disabled\": _this.isMonthDisabled(m),\r\n            role: \"option\",\r\n            \"aria-label\": _this.getAriaLabel(m),\r\n            \"aria-current\": _this.isCurrentMonth(day, m) ? \"date\" : undefined,\r\n            \"aria-selected\": _this.isSelectedMonth(day, m, selected)\r\n          }, _this.getMonthContent(m));\r\n        }));\r\n      });\r\n    });\r\n    _defineProperty(_this, \"renderQuarters\", function () {\r\n      var _this$props17 = _this.props,\r\n        day = _this$props17.day,\r\n        selected = _this$props17.selected;\r\n      var quarters = [1, 2, 3, 4];\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: \"react-datepicker__quarter-wrapper\"\r\n      }, quarters.map(function (q, j) {\r\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n          key: j,\r\n          ref: _this.QUARTER_REFS[j],\r\n          role: \"option\",\r\n          onClick: function onClick(ev) {\r\n            _this.onQuarterClick(ev, q);\r\n          },\r\n          onKeyDown: function onKeyDown(ev) {\r\n            _this.onQuarterKeyDown(ev, q);\r\n          },\r\n          onMouseEnter: !_this.props.usePointerEvent ? function () {\r\n            return _this.onQuarterMouseEnter(q);\r\n          } : undefined,\r\n          onPointerEnter: _this.props.usePointerEvent ? function () {\r\n            return _this.onQuarterMouseEnter(q);\r\n          } : undefined,\r\n          className: _this.getQuarterClassNames(q),\r\n          \"aria-selected\": _this.isSelectedQuarter(day, q, selected),\r\n          tabIndex: _this.getQuarterTabIndex(q),\r\n          \"aria-current\": _this.isCurrentQuarter(day, q) ? \"date\" : undefined\r\n        }, _this.getQuarterContent(q));\r\n      }));\r\n    });\r\n    _defineProperty(_this, \"getClassNames\", function () {\r\n      var _this$props18 = _this.props,\r\n        selectingDate = _this$props18.selectingDate,\r\n        selectsStart = _this$props18.selectsStart,\r\n        selectsEnd = _this$props18.selectsEnd,\r\n        showMonthYearPicker = _this$props18.showMonthYearPicker,\r\n        showQuarterYearPicker = _this$props18.showQuarterYearPicker,\r\n        showWeekPicker = _this$props18.showWeekPicker;\r\n      return (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__month\", {\r\n        \"react-datepicker__month--selecting-range\": selectingDate && (selectsStart || selectsEnd)\r\n      }, {\r\n        \"react-datepicker__monthPicker\": showMonthYearPicker\r\n      }, {\r\n        \"react-datepicker__quarterPicker\": showQuarterYearPicker\r\n      }, {\r\n        \"react-datepicker__weekPicker\": showWeekPicker\r\n      });\r\n    });\r\n    return _this;\r\n  }\r\n  _inherits(Month, _React$Component);\r\n  return _createClass(Month, [{\r\n    key: \"render\",\r\n    value: function render() {\r\n      var _this$props19 = this.props,\r\n        showMonthYearPicker = _this$props19.showMonthYearPicker,\r\n        showQuarterYearPicker = _this$props19.showQuarterYearPicker,\r\n        day = _this$props19.day,\r\n        _this$props19$ariaLab = _this$props19.ariaLabelPrefix,\r\n        ariaLabelPrefix = _this$props19$ariaLab === void 0 ? \"Month \" : _this$props19$ariaLab;\r\n      var formattedAriaLabelPrefix = ariaLabelPrefix ? ariaLabelPrefix.trim() + \" \" : \"\";\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: this.getClassNames(),\r\n        onMouseLeave: !this.props.usePointerEvent ? this.handleMouseLeave : undefined,\r\n        onPointerLeave: this.props.usePointerEvent ? this.handleMouseLeave : undefined,\r\n        \"aria-label\": \"\".concat(formattedAriaLabelPrefix).concat(formatDate(day, \"MMMM, yyyy\", this.props.locale)),\r\n        role: \"listbox\"\r\n      }, showMonthYearPicker ? this.renderMonths() : showQuarterYearPicker ? this.renderQuarters() : this.renderWeeks());\r\n    }\r\n  }]);\r\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\r\n\r\nvar Time = /*#__PURE__*/function (_React$Component) {\r\n  function Time() {\r\n    var _this;\r\n    _classCallCheck(this, Time);\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n    _this = _callSuper(this, Time, [].concat(args));\r\n    _defineProperty(_this, \"state\", {\r\n      height: null\r\n    });\r\n    _defineProperty(_this, \"scrollToTheSelectedTime\", function () {\r\n      requestAnimationFrame(function () {\r\n        if (!_this.list) return;\r\n        _this.list.scrollTop = _this.centerLi && Time.calcCenterPosition(_this.props.monthRef ? _this.props.monthRef.clientHeight - _this.header.clientHeight : _this.list.clientHeight, _this.centerLi);\r\n      });\r\n    });\r\n    _defineProperty(_this, \"handleClick\", function (time) {\r\n      if ((_this.props.minTime || _this.props.maxTime) && isTimeInDisabledRange(time, _this.props) || (_this.props.excludeTimes || _this.props.includeTimes || _this.props.filterTime) && isTimeDisabled(time, _this.props)) {\r\n        return;\r\n      }\r\n      _this.props.onChange(time);\r\n    });\r\n    _defineProperty(_this, \"isSelectedTime\", function (time) {\r\n      return _this.props.selected && isSameMinute(_this.props.selected, time);\r\n    });\r\n    _defineProperty(_this, \"isDisabledTime\", function (time) {\r\n      return (_this.props.minTime || _this.props.maxTime) && isTimeInDisabledRange(time, _this.props) || (_this.props.excludeTimes || _this.props.includeTimes || _this.props.filterTime) && isTimeDisabled(time, _this.props);\r\n    });\r\n    _defineProperty(_this, \"liClasses\", function (time) {\r\n      var classes = [\"react-datepicker__time-list-item\", _this.props.timeClassName ? _this.props.timeClassName(time) : undefined];\r\n      if (_this.isSelectedTime(time)) {\r\n        classes.push(\"react-datepicker__time-list-item--selected\");\r\n      }\r\n      if (_this.isDisabledTime(time)) {\r\n        classes.push(\"react-datepicker__time-list-item--disabled\");\r\n      }\r\n\r\n      //convert this.props.intervals and the relevant time to seconds and check if it it's a clean multiple of the interval\r\n      if (_this.props.injectTimes && ((0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(time) * 3600 + (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(time) * 60 + (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(time)) % (_this.props.intervals * 60) !== 0) {\r\n        classes.push(\"react-datepicker__time-list-item--injected\");\r\n      }\r\n      return classes.join(\" \");\r\n    });\r\n    _defineProperty(_this, \"handleOnKeyDown\", function (event, time) {\r\n      if (event.key === \" \") {\r\n        event.preventDefault();\r\n        event.key = \"Enter\";\r\n      }\r\n      if ((event.key === \"ArrowUp\" || event.key === \"ArrowLeft\") && event.target.previousSibling) {\r\n        event.preventDefault();\r\n        event.target.previousSibling.focus();\r\n      }\r\n      if ((event.key === \"ArrowDown\" || event.key === \"ArrowRight\") && event.target.nextSibling) {\r\n        event.preventDefault();\r\n        event.target.nextSibling.focus();\r\n      }\r\n      if (event.key === \"Enter\") {\r\n        _this.handleClick(time);\r\n      }\r\n      _this.props.handleOnKeyDown(event);\r\n    });\r\n    _defineProperty(_this, \"renderTimes\", function () {\r\n      var times = [];\r\n      var format = _this.props.format ? _this.props.format : \"p\";\r\n      var intervals = _this.props.intervals;\r\n      var activeDate = _this.props.selected || _this.props.openToDate || newDate();\r\n      var base = getStartOfDay(activeDate);\r\n      var sortedInjectTimes = _this.props.injectTimes && _this.props.injectTimes.sort(function (a, b) {\r\n        return a - b;\r\n      });\r\n      var minutesInDay = 60 * getHoursInDay(activeDate);\r\n      var multiplier = minutesInDay / intervals;\r\n      for (var i = 0; i < multiplier; i++) {\r\n        var currentTime = (0,date_fns_addMinutes__WEBPACK_IMPORTED_MODULE_52__.addMinutes)(base, i * intervals);\r\n        times.push(currentTime);\r\n        if (sortedInjectTimes) {\r\n          var timesToInject = timesToInjectAfter(base, currentTime, i, intervals, sortedInjectTimes);\r\n          times = times.concat(timesToInject);\r\n        }\r\n      }\r\n\r\n      // Determine which time to focus and scroll into view when component mounts\r\n      var timeToFocus = times.reduce(function (prev, time) {\r\n        if (time.getTime() <= activeDate.getTime()) {\r\n          return time;\r\n        }\r\n        return prev;\r\n      }, times[0]);\r\n      return times.map(function (time, i) {\r\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"li\", {\r\n          key: i,\r\n          onClick: _this.handleClick.bind(_this, time),\r\n          className: _this.liClasses(time),\r\n          ref: function ref(li) {\r\n            if (time === timeToFocus) {\r\n              _this.centerLi = li;\r\n            }\r\n          },\r\n          onKeyDown: function onKeyDown(ev) {\r\n            _this.handleOnKeyDown(ev, time);\r\n          },\r\n          tabIndex: time === timeToFocus ? 0 : -1,\r\n          role: \"option\",\r\n          \"aria-selected\": _this.isSelectedTime(time) ? \"true\" : undefined,\r\n          \"aria-disabled\": _this.isDisabledTime(time) ? \"true\" : undefined\r\n        }, formatDate(time, format, _this.props.locale));\r\n      });\r\n    });\r\n    return _this;\r\n  }\r\n  _inherits(Time, _React$Component);\r\n  return _createClass(Time, [{\r\n    key: \"componentDidMount\",\r\n    value: function componentDidMount() {\r\n      // code to ensure selected time will always be in focus within time window when it first appears\r\n      this.scrollToTheSelectedTime();\r\n      if (this.props.monthRef && this.header) {\r\n        this.setState({\r\n          height: this.props.monthRef.clientHeight - this.header.clientHeight\r\n        });\r\n      }\r\n    }\r\n  }, {\r\n    key: \"render\",\r\n    value: function render() {\r\n      var _this2 = this;\r\n      var height = this.state.height;\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: \"react-datepicker__time-container \".concat(this.props.todayButton ? \"react-datepicker__time-container--with-today-button\" : \"\")\r\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: \"react-datepicker__header react-datepicker__header--time \".concat(this.props.showTimeSelectOnly ? \"react-datepicker__header--time--only\" : \"\"),\r\n        ref: function ref(header) {\r\n          _this2.header = header;\r\n        }\r\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: \"react-datepicker-time__header\"\r\n      }, this.props.timeCaption)), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: \"react-datepicker__time\"\r\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: \"react-datepicker__time-box\"\r\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"ul\", {\r\n        className: \"react-datepicker__time-list\",\r\n        ref: function ref(list) {\r\n          _this2.list = list;\r\n        },\r\n        style: height ? {\r\n          height: height\r\n        } : {},\r\n        role: \"listbox\",\r\n        \"aria-label\": this.props.timeCaption\r\n      }, this.renderTimes()))));\r\n    }\r\n  }], [{\r\n    key: \"defaultProps\",\r\n    get: function get() {\r\n      return {\r\n        intervals: 30,\r\n        onTimeChange: function onTimeChange() {},\r\n        todayButton: null,\r\n        timeCaption: \"Time\"\r\n      };\r\n    }\r\n  }]);\r\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\r\n_defineProperty(Time, \"calcCenterPosition\", function (listHeight, centerLiRef) {\r\n  return centerLiRef.offsetTop - (listHeight / 2 - centerLiRef.clientHeight / 2);\r\n});\r\n\r\nvar VERTICAL_NAVIGATION_OFFSET = 3;\r\nvar Year = /*#__PURE__*/function (_React$Component) {\r\n  function Year(props) {\r\n    var _this;\r\n    _classCallCheck(this, Year);\r\n    _this = _callSuper(this, Year, [props]);\r\n    _defineProperty(_this, \"YEAR_REFS\", _toConsumableArray(Array(_this.props.yearItemNumber)).map(function () {\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createRef();\r\n    }));\r\n    _defineProperty(_this, \"isDisabled\", function (date) {\r\n      return isDayDisabled(date, _this.props);\r\n    });\r\n    _defineProperty(_this, \"isExcluded\", function (date) {\r\n      return isDayExcluded(date, _this.props);\r\n    });\r\n    _defineProperty(_this, \"selectingDate\", function () {\r\n      var _this$props$selecting;\r\n      return (_this$props$selecting = _this.props.selectingDate) !== null && _this$props$selecting !== void 0 ? _this$props$selecting : _this.props.preSelection;\r\n    });\r\n    _defineProperty(_this, \"updateFocusOnPaginate\", function (refIndex) {\r\n      var waitForReRender = function () {\r\n        this.YEAR_REFS[refIndex].current.focus();\r\n      }.bind(_this);\r\n      window.requestAnimationFrame(waitForReRender);\r\n    });\r\n    _defineProperty(_this, \"handleYearClick\", function (day, event) {\r\n      if (_this.props.onDayClick) {\r\n        _this.props.onDayClick(day, event);\r\n      }\r\n    });\r\n    _defineProperty(_this, \"handleYearNavigation\", function (newYear, newDate) {\r\n      var _this$props = _this.props,\r\n        date = _this$props.date,\r\n        yearItemNumber = _this$props.yearItemNumber;\r\n      var _utils$getYearsPeriod = getYearsPeriod(date, yearItemNumber),\r\n        startPeriod = _utils$getYearsPeriod.startPeriod;\r\n      if (_this.isDisabled(newDate) || _this.isExcluded(newDate)) return;\r\n      _this.props.setPreSelection(newDate);\r\n      if (newYear - startPeriod < 0) {\r\n        _this.updateFocusOnPaginate(yearItemNumber - (startPeriod - newYear));\r\n      } else if (newYear - startPeriod >= yearItemNumber) {\r\n        _this.updateFocusOnPaginate(Math.abs(yearItemNumber - (newYear - startPeriod)));\r\n      } else _this.YEAR_REFS[newYear - startPeriod].current.focus();\r\n    });\r\n    _defineProperty(_this, \"isSameDay\", function (y, other) {\r\n      return isSameDay(y, other);\r\n    });\r\n    _defineProperty(_this, \"isCurrentYear\", function (y) {\r\n      return y === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(newDate());\r\n    });\r\n    _defineProperty(_this, \"isRangeStart\", function (y) {\r\n      return _this.props.startDate && _this.props.endDate && isSameYear((0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(newDate(), y), _this.props.startDate);\r\n    });\r\n    _defineProperty(_this, \"isRangeEnd\", function (y) {\r\n      return _this.props.startDate && _this.props.endDate && isSameYear((0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(newDate(), y), _this.props.endDate);\r\n    });\r\n    _defineProperty(_this, \"isInRange\", function (y) {\r\n      return isYearInRange(y, _this.props.startDate, _this.props.endDate);\r\n    });\r\n    _defineProperty(_this, \"isInSelectingRange\", function (y) {\r\n      var _this$props2 = _this.props,\r\n        selectsStart = _this$props2.selectsStart,\r\n        selectsEnd = _this$props2.selectsEnd,\r\n        selectsRange = _this$props2.selectsRange,\r\n        startDate = _this$props2.startDate,\r\n        endDate = _this$props2.endDate;\r\n      if (!(selectsStart || selectsEnd || selectsRange) || !_this.selectingDate()) {\r\n        return false;\r\n      }\r\n      if (selectsStart && endDate) {\r\n        return isYearInRange(y, _this.selectingDate(), endDate);\r\n      }\r\n      if (selectsEnd && startDate) {\r\n        return isYearInRange(y, startDate, _this.selectingDate());\r\n      }\r\n      if (selectsRange && startDate && !endDate) {\r\n        return isYearInRange(y, startDate, _this.selectingDate());\r\n      }\r\n      return false;\r\n    });\r\n    _defineProperty(_this, \"isSelectingRangeStart\", function (y) {\r\n      if (!_this.isInSelectingRange(y)) {\r\n        return false;\r\n      }\r\n      var _this$props3 = _this.props,\r\n        startDate = _this$props3.startDate,\r\n        selectsStart = _this$props3.selectsStart;\r\n      var _year = (0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(newDate(), y);\r\n      if (selectsStart) {\r\n        return isSameYear(_year, _this.selectingDate());\r\n      }\r\n      return isSameYear(_year, startDate);\r\n    });\r\n    _defineProperty(_this, \"isSelectingRangeEnd\", function (y) {\r\n      if (!_this.isInSelectingRange(y)) {\r\n        return false;\r\n      }\r\n      var _this$props4 = _this.props,\r\n        endDate = _this$props4.endDate,\r\n        selectsEnd = _this$props4.selectsEnd,\r\n        selectsRange = _this$props4.selectsRange;\r\n      var _year = (0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(newDate(), y);\r\n      if (selectsEnd || selectsRange) {\r\n        return isSameYear(_year, _this.selectingDate());\r\n      }\r\n      return isSameYear(_year, endDate);\r\n    });\r\n    _defineProperty(_this, \"isKeyboardSelected\", function (y) {\r\n      var date = getStartOfYear((0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(_this.props.date, y));\r\n      return !_this.props.disabledKeyboardNavigation && !_this.props.inline && !isSameDay(date, getStartOfYear(_this.props.selected)) && isSameDay(date, getStartOfYear(_this.props.preSelection));\r\n    });\r\n    _defineProperty(_this, \"onYearClick\", function (e, y) {\r\n      var date = _this.props.date;\r\n      _this.handleYearClick(getStartOfYear((0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(date, y)), e);\r\n    });\r\n    _defineProperty(_this, \"onYearKeyDown\", function (e, y) {\r\n      var key = e.key;\r\n      var _this$props5 = _this.props,\r\n        date = _this$props5.date,\r\n        yearItemNumber = _this$props5.yearItemNumber,\r\n        handleOnKeyDown = _this$props5.handleOnKeyDown;\r\n      if (key !== \"Tab\") {\r\n        // preventDefault on tab event blocks focus change\r\n        e.preventDefault();\r\n      }\r\n      if (!_this.props.disabledKeyboardNavigation) {\r\n        switch (key) {\r\n          case \"Enter\":\r\n            _this.onYearClick(e, y);\r\n            _this.props.setPreSelection(_this.props.selected);\r\n            break;\r\n          case \"ArrowRight\":\r\n            _this.handleYearNavigation(y + 1, (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(_this.props.preSelection, 1));\r\n            break;\r\n          case \"ArrowLeft\":\r\n            _this.handleYearNavigation(y - 1, (0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_45__.subYears)(_this.props.preSelection, 1));\r\n            break;\r\n          case \"ArrowUp\":\r\n            {\r\n              var _utils$getYearsPeriod2 = getYearsPeriod(date, yearItemNumber),\r\n                startPeriod = _utils$getYearsPeriod2.startPeriod;\r\n              var offset = VERTICAL_NAVIGATION_OFFSET;\r\n              var newYear = y - offset;\r\n              if (newYear < startPeriod) {\r\n                var leftOverOffset = yearItemNumber % offset;\r\n                if (y >= startPeriod && y < startPeriod + leftOverOffset) {\r\n                  offset = leftOverOffset;\r\n                } else {\r\n                  offset += leftOverOffset;\r\n                }\r\n                newYear = y - offset;\r\n              }\r\n              _this.handleYearNavigation(newYear, (0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_45__.subYears)(_this.props.preSelection, offset));\r\n              break;\r\n            }\r\n          case \"ArrowDown\":\r\n            {\r\n              var _utils$getYearsPeriod3 = getYearsPeriod(date, yearItemNumber),\r\n                endPeriod = _utils$getYearsPeriod3.endPeriod;\r\n              var _offset = VERTICAL_NAVIGATION_OFFSET;\r\n              var _newYear = y + _offset;\r\n              if (_newYear > endPeriod) {\r\n                var _leftOverOffset = yearItemNumber % _offset;\r\n                if (y <= endPeriod && y > endPeriod - _leftOverOffset) {\r\n                  _offset = _leftOverOffset;\r\n                } else {\r\n                  _offset += _leftOverOffset;\r\n                }\r\n                _newYear = y + _offset;\r\n              }\r\n              _this.handleYearNavigation(_newYear, (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(_this.props.preSelection, _offset));\r\n              break;\r\n            }\r\n        }\r\n      }\r\n      handleOnKeyDown && handleOnKeyDown(e);\r\n    });\r\n    _defineProperty(_this, \"getYearClassNames\", function (y) {\r\n      var _this$props6 = _this.props,\r\n        date = _this$props6.date,\r\n        minDate = _this$props6.minDate,\r\n        maxDate = _this$props6.maxDate,\r\n        selected = _this$props6.selected,\r\n        excludeDates = _this$props6.excludeDates,\r\n        includeDates = _this$props6.includeDates,\r\n        filterDate = _this$props6.filterDate,\r\n        yearClassName = _this$props6.yearClassName;\r\n      return (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__year-text\", \"react-datepicker__year-\".concat(y), yearClassName ? yearClassName((0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(date, y)) : undefined, {\r\n        \"react-datepicker__year-text--selected\": y === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(selected),\r\n        \"react-datepicker__year-text--disabled\": (minDate || maxDate || excludeDates || includeDates || filterDate) && isYearDisabled(y, _this.props),\r\n        \"react-datepicker__year-text--keyboard-selected\": _this.isKeyboardSelected(y),\r\n        \"react-datepicker__year-text--range-start\": _this.isRangeStart(y),\r\n        \"react-datepicker__year-text--range-end\": _this.isRangeEnd(y),\r\n        \"react-datepicker__year-text--in-range\": _this.isInRange(y),\r\n        \"react-datepicker__year-text--in-selecting-range\": _this.isInSelectingRange(y),\r\n        \"react-datepicker__year-text--selecting-range-start\": _this.isSelectingRangeStart(y),\r\n        \"react-datepicker__year-text--selecting-range-end\": _this.isSelectingRangeEnd(y),\r\n        \"react-datepicker__year-text--today\": _this.isCurrentYear(y)\r\n      });\r\n    });\r\n    _defineProperty(_this, \"getYearTabIndex\", function (y) {\r\n      if (_this.props.disabledKeyboardNavigation) return \"-1\";\r\n      var preSelected = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.props.preSelection);\r\n      return y === preSelected ? \"0\" : \"-1\";\r\n    });\r\n    _defineProperty(_this, \"getYearContainerClassNames\", function () {\r\n      var _this$props7 = _this.props,\r\n        selectingDate = _this$props7.selectingDate,\r\n        selectsStart = _this$props7.selectsStart,\r\n        selectsEnd = _this$props7.selectsEnd,\r\n        selectsRange = _this$props7.selectsRange;\r\n      return (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__year\", {\r\n        \"react-datepicker__year--selecting-range\": selectingDate && (selectsStart || selectsEnd || selectsRange)\r\n      });\r\n    });\r\n    _defineProperty(_this, \"getYearContent\", function (y) {\r\n      return _this.props.renderYearContent ? _this.props.renderYearContent(y) : y;\r\n    });\r\n    return _this;\r\n  }\r\n  _inherits(Year, _React$Component);\r\n  return _createClass(Year, [{\r\n    key: \"render\",\r\n    value: function render() {\r\n      var _this2 = this;\r\n      var yearsList = [];\r\n      var _this$props8 = this.props,\r\n        date = _this$props8.date,\r\n        yearItemNumber = _this$props8.yearItemNumber,\r\n        onYearMouseEnter = _this$props8.onYearMouseEnter,\r\n        onYearMouseLeave = _this$props8.onYearMouseLeave;\r\n      var _utils$getYearsPeriod4 = getYearsPeriod(date, yearItemNumber),\r\n        startPeriod = _utils$getYearsPeriod4.startPeriod,\r\n        endPeriod = _utils$getYearsPeriod4.endPeriod;\r\n      var _loop = function _loop(y) {\r\n        yearsList.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n          ref: _this2.YEAR_REFS[y - startPeriod],\r\n          onClick: function onClick(ev) {\r\n            _this2.onYearClick(ev, y);\r\n          },\r\n          onKeyDown: function onKeyDown(ev) {\r\n            if (isSpaceKeyDown(ev)) {\r\n              ev.preventDefault();\r\n              ev.key = \"Enter\";\r\n            }\r\n            _this2.onYearKeyDown(ev, y);\r\n          },\r\n          tabIndex: _this2.getYearTabIndex(y),\r\n          className: _this2.getYearClassNames(y),\r\n          onMouseEnter: !_this2.props.usePointerEvent ? function (ev) {\r\n            return onYearMouseEnter(ev, y);\r\n          } : undefined,\r\n          onPointerEnter: _this2.props.usePointerEvent ? function (ev) {\r\n            return onYearMouseEnter(ev, y);\r\n          } : undefined,\r\n          onMouseLeave: !_this2.props.usePointerEvent ? function (ev) {\r\n            return onYearMouseLeave(ev, y);\r\n          } : undefined,\r\n          onPointerLeave: _this2.props.usePointerEvent ? function (ev) {\r\n            return onYearMouseLeave(ev, y);\r\n          } : undefined,\r\n          key: y,\r\n          \"aria-current\": _this2.isCurrentYear(y) ? \"date\" : undefined\r\n        }, _this2.getYearContent(y)));\r\n      };\r\n      for (var y = startPeriod; y <= endPeriod; y++) {\r\n        _loop(y);\r\n      }\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: this.getYearContainerClassNames()\r\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: \"react-datepicker__year-wrapper\",\r\n        onMouseLeave: !this.props.usePointerEvent ? this.props.clearSelectingDate : undefined,\r\n        onPointerLeave: this.props.usePointerEvent ? this.props.clearSelectingDate : undefined\r\n      }, yearsList));\r\n    }\r\n  }]);\r\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\r\n\r\nvar inputTime = /*#__PURE__*/function (_React$Component) {\r\n  function inputTime(props) {\r\n    var _this;\r\n    _classCallCheck(this, inputTime);\r\n    _this = _callSuper(this, inputTime, [props]);\r\n    _defineProperty(_this, \"onTimeChange\", function (time) {\r\n      _this.setState({\r\n        time: time\r\n      });\r\n      var propDate = _this.props.date;\r\n      var isPropDateValid = propDate instanceof Date && !isNaN(propDate);\r\n      var date = isPropDateValid ? propDate : new Date();\r\n      date.setHours(time.split(\":\")[0]);\r\n      date.setMinutes(time.split(\":\")[1]);\r\n      _this.props.onChange(date);\r\n    });\r\n    _defineProperty(_this, \"renderTimeInput\", function () {\r\n      var time = _this.state.time;\r\n      var _this$props = _this.props,\r\n        date = _this$props.date,\r\n        timeString = _this$props.timeString,\r\n        customTimeInput = _this$props.customTimeInput;\r\n      if (customTimeInput) {\r\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().cloneElement(customTimeInput, {\r\n          date: date,\r\n          value: time,\r\n          onChange: _this.onTimeChange\r\n        });\r\n      }\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"input\", {\r\n        type: \"time\",\r\n        className: \"react-datepicker-time__input\",\r\n        placeholder: \"Time\",\r\n        name: \"time-input\",\r\n        required: true,\r\n        value: time,\r\n        onChange: function onChange(ev) {\r\n          _this.onTimeChange(ev.target.value || timeString);\r\n        }\r\n      });\r\n    });\r\n    _this.state = {\r\n      time: _this.props.timeString\r\n    };\r\n    return _this;\r\n  }\r\n  _inherits(inputTime, _React$Component);\r\n  return _createClass(inputTime, [{\r\n    key: \"render\",\r\n    value: function render() {\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: \"react-datepicker__input-time-container\"\r\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: \"react-datepicker-time__caption\"\r\n      }, this.props.timeInputLabel), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: \"react-datepicker-time__input-container\"\r\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: \"react-datepicker-time__input\"\r\n      }, this.renderTimeInput())));\r\n    }\r\n  }], [{\r\n    key: \"getDerivedStateFromProps\",\r\n    value: function getDerivedStateFromProps(props, state) {\r\n      if (props.timeString !== state.time) {\r\n        return {\r\n          time: props.timeString\r\n        };\r\n      }\r\n\r\n      // Return null to indicate no change to state.\r\n      return null;\r\n    }\r\n  }]);\r\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\r\n\r\nfunction CalendarContainer(_ref) {\r\n  var _ref$showTimeSelectOn = _ref.showTimeSelectOnly,\r\n    showTimeSelectOnly = _ref$showTimeSelectOn === void 0 ? false : _ref$showTimeSelectOn,\r\n    _ref$showTime = _ref.showTime,\r\n    showTime = _ref$showTime === void 0 ? false : _ref$showTime,\r\n    className = _ref.className,\r\n    children = _ref.children;\r\n  var ariaLabel = showTimeSelectOnly ? \"Choose Time\" : \"Choose Date\".concat(showTime ? \" and Time\" : \"\");\r\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n    className: className,\r\n    role: \"dialog\",\r\n    \"aria-label\": ariaLabel,\r\n    \"aria-modal\": \"true\"\r\n  }, children);\r\n}\r\n\r\nvar DROPDOWN_FOCUS_CLASSNAMES = [\"react-datepicker__year-select\", \"react-datepicker__month-select\", \"react-datepicker__month-year-select\"];\r\nvar isDropdownSelect = function isDropdownSelect() {\r\n  var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n  var classNames = (element.className || \"\").split(/\\s+/);\r\n  return DROPDOWN_FOCUS_CLASSNAMES.some(function (testClassname) {\r\n    return classNames.indexOf(testClassname) >= 0;\r\n  });\r\n};\r\nvar Calendar = /*#__PURE__*/function (_React$Component) {\r\n  function Calendar(props) {\r\n    var _this;\r\n    _classCallCheck(this, Calendar);\r\n    _this = _callSuper(this, Calendar, [props]);\r\n    _defineProperty(_this, \"handleClickOutside\", function (event) {\r\n      _this.props.onClickOutside(event);\r\n    });\r\n    _defineProperty(_this, \"setClickOutsideRef\", function () {\r\n      return _this.containerRef.current;\r\n    });\r\n    _defineProperty(_this, \"handleDropdownFocus\", function (event) {\r\n      if (isDropdownSelect(event.target)) {\r\n        _this.props.onDropdownFocus();\r\n      }\r\n    });\r\n    _defineProperty(_this, \"getDateInView\", function () {\r\n      var _this$props = _this.props,\r\n        preSelection = _this$props.preSelection,\r\n        selected = _this$props.selected,\r\n        openToDate = _this$props.openToDate;\r\n      var minDate = getEffectiveMinDate(_this.props);\r\n      var maxDate = getEffectiveMaxDate(_this.props);\r\n      var current = newDate();\r\n      var initialDate = openToDate || selected || preSelection;\r\n      if (initialDate) {\r\n        return initialDate;\r\n      } else {\r\n        if (minDate && (0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(current, minDate)) {\r\n          return minDate;\r\n        } else if (maxDate && (0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(current, maxDate)) {\r\n          return maxDate;\r\n        }\r\n      }\r\n      return current;\r\n    });\r\n    _defineProperty(_this, \"increaseMonth\", function () {\r\n      _this.setState(function (_ref) {\r\n        var date = _ref.date;\r\n        return {\r\n          date: (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(date, 1)\r\n        };\r\n      }, function () {\r\n        return _this.handleMonthChange(_this.state.date);\r\n      });\r\n    });\r\n    _defineProperty(_this, \"decreaseMonth\", function () {\r\n      _this.setState(function (_ref2) {\r\n        var date = _ref2.date;\r\n        return {\r\n          date: (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_39__.subMonths)(date, 1)\r\n        };\r\n      }, function () {\r\n        return _this.handleMonthChange(_this.state.date);\r\n      });\r\n    });\r\n    _defineProperty(_this, \"handleDayClick\", function (day, event, monthSelectedIn) {\r\n      _this.props.onSelect(day, event, monthSelectedIn);\r\n      _this.props.setPreSelection && _this.props.setPreSelection(day);\r\n    });\r\n    _defineProperty(_this, \"handleDayMouseEnter\", function (day) {\r\n      _this.setState({\r\n        selectingDate: day\r\n      });\r\n      _this.props.onDayMouseEnter && _this.props.onDayMouseEnter(day);\r\n    });\r\n    _defineProperty(_this, \"handleMonthMouseLeave\", function () {\r\n      _this.setState({\r\n        selectingDate: null\r\n      });\r\n      _this.props.onMonthMouseLeave && _this.props.onMonthMouseLeave();\r\n    });\r\n    _defineProperty(_this, \"handleYearMouseEnter\", function (event, year) {\r\n      _this.setState({\r\n        selectingDate: (0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(newDate(), year)\r\n      });\r\n      !!_this.props.onYearMouseEnter && _this.props.onYearMouseEnter(event, year);\r\n    });\r\n    _defineProperty(_this, \"handleYearMouseLeave\", function (event, year) {\r\n      !!_this.props.onYearMouseLeave && _this.props.onYearMouseLeave(event, year);\r\n    });\r\n    _defineProperty(_this, \"handleYearChange\", function (date) {\r\n      if (_this.props.onYearChange) {\r\n        _this.props.onYearChange(date);\r\n        _this.setState({\r\n          isRenderAriaLiveMessage: true\r\n        });\r\n      }\r\n      if (_this.props.adjustDateOnChange) {\r\n        if (_this.props.onSelect) {\r\n          _this.props.onSelect(date);\r\n        }\r\n        if (_this.props.setOpen) {\r\n          _this.props.setOpen(true);\r\n        }\r\n      }\r\n      _this.props.setPreSelection && _this.props.setPreSelection(date);\r\n    });\r\n    _defineProperty(_this, \"handleMonthChange\", function (date) {\r\n      _this.handleCustomMonthChange(date);\r\n      if (_this.props.adjustDateOnChange) {\r\n        if (_this.props.onSelect) {\r\n          _this.props.onSelect(date);\r\n        }\r\n        if (_this.props.setOpen) {\r\n          _this.props.setOpen(true);\r\n        }\r\n      }\r\n      _this.props.setPreSelection && _this.props.setPreSelection(date);\r\n    });\r\n    _defineProperty(_this, \"handleCustomMonthChange\", function (date) {\r\n      if (_this.props.onMonthChange) {\r\n        _this.props.onMonthChange(date);\r\n        _this.setState({\r\n          isRenderAriaLiveMessage: true\r\n        });\r\n      }\r\n    });\r\n    _defineProperty(_this, \"handleMonthYearChange\", function (date) {\r\n      _this.handleYearChange(date);\r\n      _this.handleMonthChange(date);\r\n    });\r\n    _defineProperty(_this, \"changeYear\", function (year) {\r\n      _this.setState(function (_ref3) {\r\n        var date = _ref3.date;\r\n        return {\r\n          date: (0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(date, year)\r\n        };\r\n      }, function () {\r\n        return _this.handleYearChange(_this.state.date);\r\n      });\r\n    });\r\n    _defineProperty(_this, \"changeMonth\", function (month) {\r\n      _this.setState(function (_ref4) {\r\n        var date = _ref4.date;\r\n        return {\r\n          date: (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(date, month)\r\n        };\r\n      }, function () {\r\n        return _this.handleMonthChange(_this.state.date);\r\n      });\r\n    });\r\n    _defineProperty(_this, \"changeMonthYear\", function (monthYear) {\r\n      _this.setState(function (_ref5) {\r\n        var date = _ref5.date;\r\n        return {\r\n          date: (0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(date, (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(monthYear)), (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(monthYear))\r\n        };\r\n      }, function () {\r\n        return _this.handleMonthYearChange(_this.state.date);\r\n      });\r\n    });\r\n    _defineProperty(_this, \"header\", function () {\r\n      var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.date;\r\n      var startOfWeek = getStartOfWeek(date, _this.props.locale, _this.props.calendarStartDay);\r\n      var dayNames = [];\r\n      if (_this.props.showWeekNumbers) {\r\n        dayNames.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n          key: \"W\",\r\n          className: \"react-datepicker__day-name\"\r\n        }, _this.props.weekLabel || \"#\"));\r\n      }\r\n      return dayNames.concat([0, 1, 2, 3, 4, 5, 6].map(function (offset) {\r\n        var day = (0,date_fns_addDays__WEBPACK_IMPORTED_MODULE_58__.addDays)(startOfWeek, offset);\r\n        var weekDayName = _this.formatWeekday(day, _this.props.locale);\r\n        var weekDayClassName = _this.props.weekDayClassName ? _this.props.weekDayClassName(day) : undefined;\r\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n          key: offset,\r\n          \"aria-label\": formatDate(day, \"EEEE\", _this.props.locale),\r\n          className: (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__day-name\", weekDayClassName)\r\n        }, weekDayName);\r\n      }));\r\n    });\r\n    _defineProperty(_this, \"formatWeekday\", function (day, locale) {\r\n      if (_this.props.formatWeekDay) {\r\n        return getFormattedWeekdayInLocale(day, _this.props.formatWeekDay, locale);\r\n      }\r\n      return _this.props.useWeekdaysShort ? getWeekdayShortInLocale(day, locale) : getWeekdayMinInLocale(day, locale);\r\n    });\r\n    _defineProperty(_this, \"decreaseYear\", function () {\r\n      _this.setState(function (_ref6) {\r\n        var date = _ref6.date;\r\n        return {\r\n          date: (0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_45__.subYears)(date, _this.props.showYearPicker ? _this.props.yearItemNumber : 1)\r\n        };\r\n      }, function () {\r\n        return _this.handleYearChange(_this.state.date);\r\n      });\r\n    });\r\n    _defineProperty(_this, \"clearSelectingDate\", function () {\r\n      _this.setState({\r\n        selectingDate: null\r\n      });\r\n    });\r\n    _defineProperty(_this, \"renderPreviousButton\", function () {\r\n      if (_this.props.renderCustomHeader) {\r\n        return;\r\n      }\r\n      var allPrevDaysDisabled;\r\n      switch (true) {\r\n        case _this.props.showMonthYearPicker:\r\n          allPrevDaysDisabled = yearDisabledBefore(_this.state.date, _this.props);\r\n          break;\r\n        case _this.props.showYearPicker:\r\n          allPrevDaysDisabled = yearsDisabledBefore(_this.state.date, _this.props);\r\n          break;\r\n        case _this.props.showQuarterYearPicker:\r\n          allPrevDaysDisabled = quarterDisabledBefore(_this.state.date, _this.props);\r\n          break;\r\n        default:\r\n          allPrevDaysDisabled = monthDisabledBefore(_this.state.date, _this.props);\r\n          break;\r\n      }\r\n      if (!_this.props.forceShowMonthNavigation && !_this.props.showDisabledMonthNavigation && allPrevDaysDisabled || _this.props.showTimeSelectOnly) {\r\n        return;\r\n      }\r\n      var iconClasses = [\"react-datepicker__navigation-icon\", \"react-datepicker__navigation-icon--previous\"];\r\n      var classes = [\"react-datepicker__navigation\", \"react-datepicker__navigation--previous\"];\r\n      var clickHandler = _this.decreaseMonth;\r\n      if (_this.props.showMonthYearPicker || _this.props.showQuarterYearPicker || _this.props.showYearPicker) {\r\n        clickHandler = _this.decreaseYear;\r\n      }\r\n      if (allPrevDaysDisabled && _this.props.showDisabledMonthNavigation) {\r\n        classes.push(\"react-datepicker__navigation--previous--disabled\");\r\n        clickHandler = null;\r\n      }\r\n      var isForYear = _this.props.showMonthYearPicker || _this.props.showQuarterYearPicker || _this.props.showYearPicker;\r\n      var _this$props2 = _this.props,\r\n        previousMonthButtonLabel = _this$props2.previousMonthButtonLabel,\r\n        previousYearButtonLabel = _this$props2.previousYearButtonLabel;\r\n      var _this$props3 = _this.props,\r\n        _this$props3$previous = _this$props3.previousMonthAriaLabel,\r\n        previousMonthAriaLabel = _this$props3$previous === void 0 ? typeof previousMonthButtonLabel === \"string\" ? previousMonthButtonLabel : \"Previous Month\" : _this$props3$previous,\r\n        _this$props3$previous2 = _this$props3.previousYearAriaLabel,\r\n        previousYearAriaLabel = _this$props3$previous2 === void 0 ? typeof previousYearButtonLabel === \"string\" ? previousYearButtonLabel : \"Previous Year\" : _this$props3$previous2;\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\r\n        type: \"button\",\r\n        className: classes.join(\" \"),\r\n        onClick: clickHandler,\r\n        onKeyDown: _this.props.handleOnKeyDown,\r\n        \"aria-label\": isForYear ? previousYearAriaLabel : previousMonthAriaLabel\r\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\r\n        className: iconClasses.join(\" \")\r\n      }, isForYear ? _this.props.previousYearButtonLabel : _this.props.previousMonthButtonLabel));\r\n    });\r\n    _defineProperty(_this, \"increaseYear\", function () {\r\n      _this.setState(function (_ref7) {\r\n        var date = _ref7.date;\r\n        return {\r\n          date: (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(date, _this.props.showYearPicker ? _this.props.yearItemNumber : 1)\r\n        };\r\n      }, function () {\r\n        return _this.handleYearChange(_this.state.date);\r\n      });\r\n    });\r\n    _defineProperty(_this, \"renderNextButton\", function () {\r\n      if (_this.props.renderCustomHeader) {\r\n        return;\r\n      }\r\n      var allNextDaysDisabled;\r\n      switch (true) {\r\n        case _this.props.showMonthYearPicker:\r\n          allNextDaysDisabled = yearDisabledAfter(_this.state.date, _this.props);\r\n          break;\r\n        case _this.props.showYearPicker:\r\n          allNextDaysDisabled = yearsDisabledAfter(_this.state.date, _this.props);\r\n          break;\r\n        case _this.props.showQuarterYearPicker:\r\n          allNextDaysDisabled = quarterDisabledAfter(_this.state.date, _this.props);\r\n          break;\r\n        default:\r\n          allNextDaysDisabled = monthDisabledAfter(_this.state.date, _this.props);\r\n          break;\r\n      }\r\n      if (!_this.props.forceShowMonthNavigation && !_this.props.showDisabledMonthNavigation && allNextDaysDisabled || _this.props.showTimeSelectOnly) {\r\n        return;\r\n      }\r\n      var classes = [\"react-datepicker__navigation\", \"react-datepicker__navigation--next\"];\r\n      var iconClasses = [\"react-datepicker__navigation-icon\", \"react-datepicker__navigation-icon--next\"];\r\n      if (_this.props.showTimeSelect) {\r\n        classes.push(\"react-datepicker__navigation--next--with-time\");\r\n      }\r\n      if (_this.props.todayButton) {\r\n        classes.push(\"react-datepicker__navigation--next--with-today-button\");\r\n      }\r\n      var clickHandler = _this.increaseMonth;\r\n      if (_this.props.showMonthYearPicker || _this.props.showQuarterYearPicker || _this.props.showYearPicker) {\r\n        clickHandler = _this.increaseYear;\r\n      }\r\n      if (allNextDaysDisabled && _this.props.showDisabledMonthNavigation) {\r\n        classes.push(\"react-datepicker__navigation--next--disabled\");\r\n        clickHandler = null;\r\n      }\r\n      var isForYear = _this.props.showMonthYearPicker || _this.props.showQuarterYearPicker || _this.props.showYearPicker;\r\n      var _this$props4 = _this.props,\r\n        nextMonthButtonLabel = _this$props4.nextMonthButtonLabel,\r\n        nextYearButtonLabel = _this$props4.nextYearButtonLabel;\r\n      var _this$props5 = _this.props,\r\n        _this$props5$nextMont = _this$props5.nextMonthAriaLabel,\r\n        nextMonthAriaLabel = _this$props5$nextMont === void 0 ? typeof nextMonthButtonLabel === \"string\" ? nextMonthButtonLabel : \"Next Month\" : _this$props5$nextMont,\r\n        _this$props5$nextYear = _this$props5.nextYearAriaLabel,\r\n        nextYearAriaLabel = _this$props5$nextYear === void 0 ? typeof nextYearButtonLabel === \"string\" ? nextYearButtonLabel : \"Next Year\" : _this$props5$nextYear;\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\r\n        type: \"button\",\r\n        className: classes.join(\" \"),\r\n        onClick: clickHandler,\r\n        onKeyDown: _this.props.handleOnKeyDown,\r\n        \"aria-label\": isForYear ? nextYearAriaLabel : nextMonthAriaLabel\r\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\r\n        className: iconClasses.join(\" \")\r\n      }, isForYear ? _this.props.nextYearButtonLabel : _this.props.nextMonthButtonLabel));\r\n    });\r\n    _defineProperty(_this, \"renderCurrentMonth\", function () {\r\n      var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.date;\r\n      var classes = [\"react-datepicker__current-month\"];\r\n      if (_this.props.showYearDropdown) {\r\n        classes.push(\"react-datepicker__current-month--hasYearDropdown\");\r\n      }\r\n      if (_this.props.showMonthDropdown) {\r\n        classes.push(\"react-datepicker__current-month--hasMonthDropdown\");\r\n      }\r\n      if (_this.props.showMonthYearDropdown) {\r\n        classes.push(\"react-datepicker__current-month--hasMonthYearDropdown\");\r\n      }\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: classes.join(\" \")\r\n      }, formatDate(date, _this.props.dateFormat, _this.props.locale));\r\n    });\r\n    _defineProperty(_this, \"renderYearDropdown\", function () {\r\n      var overrideHide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\r\n      if (!_this.props.showYearDropdown || overrideHide) {\r\n        return;\r\n      }\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(YearDropdown, {\r\n        adjustDateOnChange: _this.props.adjustDateOnChange,\r\n        date: _this.state.date,\r\n        onSelect: _this.props.onSelect,\r\n        setOpen: _this.props.setOpen,\r\n        dropdownMode: _this.props.dropdownMode,\r\n        onChange: _this.changeYear,\r\n        minDate: _this.props.minDate,\r\n        maxDate: _this.props.maxDate,\r\n        year: (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.state.date),\r\n        scrollableYearDropdown: _this.props.scrollableYearDropdown,\r\n        yearDropdownItemNumber: _this.props.yearDropdownItemNumber\r\n      });\r\n    });\r\n    _defineProperty(_this, \"renderMonthDropdown\", function () {\r\n      var overrideHide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\r\n      if (!_this.props.showMonthDropdown || overrideHide) {\r\n        return;\r\n      }\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(MonthDropdown, {\r\n        dropdownMode: _this.props.dropdownMode,\r\n        locale: _this.props.locale,\r\n        onChange: _this.changeMonth,\r\n        month: (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.state.date),\r\n        useShortMonthInDropdown: _this.props.useShortMonthInDropdown\r\n      });\r\n    });\r\n    _defineProperty(_this, \"renderMonthYearDropdown\", function () {\r\n      var overrideHide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\r\n      if (!_this.props.showMonthYearDropdown || overrideHide) {\r\n        return;\r\n      }\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(MonthYearDropdown, {\r\n        dropdownMode: _this.props.dropdownMode,\r\n        locale: _this.props.locale,\r\n        dateFormat: _this.props.dateFormat,\r\n        onChange: _this.changeMonthYear,\r\n        minDate: _this.props.minDate,\r\n        maxDate: _this.props.maxDate,\r\n        date: _this.state.date,\r\n        scrollableMonthYearDropdown: _this.props.scrollableMonthYearDropdown\r\n      });\r\n    });\r\n    _defineProperty(_this, \"handleTodayButtonClick\", function (e) {\r\n      _this.props.onSelect(getStartOfToday(), e);\r\n      _this.props.setPreSelection && _this.props.setPreSelection(getStartOfToday());\r\n    });\r\n    _defineProperty(_this, \"renderTodayButton\", function () {\r\n      if (!_this.props.todayButton || _this.props.showTimeSelectOnly) {\r\n        return;\r\n      }\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: \"react-datepicker__today-button\",\r\n        onClick: function onClick(e) {\r\n          return _this.handleTodayButtonClick(e);\r\n        }\r\n      }, _this.props.todayButton);\r\n    });\r\n    _defineProperty(_this, \"renderDefaultHeader\", function (_ref8) {\r\n      var monthDate = _ref8.monthDate,\r\n        i = _ref8.i;\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: \"react-datepicker__header \".concat(_this.props.showTimeSelect ? \"react-datepicker__header--has-time-select\" : \"\")\r\n      }, _this.renderCurrentMonth(monthDate), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: \"react-datepicker__header__dropdown react-datepicker__header__dropdown--\".concat(_this.props.dropdownMode),\r\n        onFocus: _this.handleDropdownFocus\r\n      }, _this.renderMonthDropdown(i !== 0), _this.renderMonthYearDropdown(i !== 0), _this.renderYearDropdown(i !== 0)), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: \"react-datepicker__day-names\"\r\n      }, _this.header(monthDate)));\r\n    });\r\n    _defineProperty(_this, \"renderCustomHeader\", function () {\r\n      var headerArgs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n      var monthDate = headerArgs.monthDate,\r\n        i = headerArgs.i;\r\n      if (_this.props.showTimeSelect && !_this.state.monthContainer || _this.props.showTimeSelectOnly) {\r\n        return null;\r\n      }\r\n      var prevMonthButtonDisabled = monthDisabledBefore(_this.state.date, _this.props);\r\n      var nextMonthButtonDisabled = monthDisabledAfter(_this.state.date, _this.props);\r\n      var prevYearButtonDisabled = yearDisabledBefore(_this.state.date, _this.props);\r\n      var nextYearButtonDisabled = yearDisabledAfter(_this.state.date, _this.props);\r\n      var showDayNames = !_this.props.showMonthYearPicker && !_this.props.showQuarterYearPicker && !_this.props.showYearPicker;\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: \"react-datepicker__header react-datepicker__header--custom\",\r\n        onFocus: _this.props.onDropdownFocus\r\n      }, _this.props.renderCustomHeader(_objectSpread2(_objectSpread2({}, _this.state), {}, {\r\n        customHeaderCount: i,\r\n        monthDate: monthDate,\r\n        changeMonth: _this.changeMonth,\r\n        changeYear: _this.changeYear,\r\n        decreaseMonth: _this.decreaseMonth,\r\n        increaseMonth: _this.increaseMonth,\r\n        decreaseYear: _this.decreaseYear,\r\n        increaseYear: _this.increaseYear,\r\n        prevMonthButtonDisabled: prevMonthButtonDisabled,\r\n        nextMonthButtonDisabled: nextMonthButtonDisabled,\r\n        prevYearButtonDisabled: prevYearButtonDisabled,\r\n        nextYearButtonDisabled: nextYearButtonDisabled\r\n      })), showDayNames && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: \"react-datepicker__day-names\"\r\n      }, _this.header(monthDate)));\r\n    });\r\n    _defineProperty(_this, \"renderYearHeader\", function (_ref9) {\r\n      var monthDate = _ref9.monthDate;\r\n      var _this$props6 = _this.props,\r\n        showYearPicker = _this$props6.showYearPicker,\r\n        yearItemNumber = _this$props6.yearItemNumber;\r\n      var _getYearsPeriod = getYearsPeriod(monthDate, yearItemNumber),\r\n        startPeriod = _getYearsPeriod.startPeriod,\r\n        endPeriod = _getYearsPeriod.endPeriod;\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: \"react-datepicker__header react-datepicker-year-header\"\r\n      }, showYearPicker ? \"\".concat(startPeriod, \" - \").concat(endPeriod) : (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(monthDate));\r\n    });\r\n    _defineProperty(_this, \"renderHeader\", function (headerArgs) {\r\n      switch (true) {\r\n        case _this.props.renderCustomHeader !== undefined:\r\n          return _this.renderCustomHeader(headerArgs);\r\n        case _this.props.showMonthYearPicker || _this.props.showQuarterYearPicker || _this.props.showYearPicker:\r\n          return _this.renderYearHeader(headerArgs);\r\n        default:\r\n          return _this.renderDefaultHeader(headerArgs);\r\n      }\r\n    });\r\n    _defineProperty(_this, \"renderMonths\", function () {\r\n      var _this$props$monthSele;\r\n      if (_this.props.showTimeSelectOnly || _this.props.showYearPicker) {\r\n        return;\r\n      }\r\n      var monthList = [];\r\n      var monthsToSubtract = _this.props.showPreviousMonths ? _this.props.monthsShown - 1 : 0;\r\n      var fromMonthDate = _this.props.showMonthYearPicker || _this.props.showQuarterYearPicker ? (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(_this.state.date, monthsToSubtract) : (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_39__.subMonths)(_this.state.date, monthsToSubtract);\r\n      var monthSelectedIn = (_this$props$monthSele = _this.props.monthSelectedIn) !== null && _this$props$monthSele !== void 0 ? _this$props$monthSele : monthsToSubtract;\r\n      for (var i = 0; i < _this.props.monthsShown; ++i) {\r\n        var monthsToAdd = i - monthSelectedIn + monthsToSubtract;\r\n        var monthDate = _this.props.showMonthYearPicker || _this.props.showQuarterYearPicker ? (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(fromMonthDate, monthsToAdd) : (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(fromMonthDate, monthsToAdd);\r\n        var monthKey = \"month-\".concat(i);\r\n        var monthShowsDuplicateDaysEnd = i < _this.props.monthsShown - 1;\r\n        var monthShowsDuplicateDaysStart = i > 0;\r\n        monthList.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n          key: monthKey,\r\n          ref: function ref(div) {\r\n            _this.monthContainer = div;\r\n          },\r\n          className: \"react-datepicker__month-container\"\r\n        }, _this.renderHeader({\r\n          monthDate: monthDate,\r\n          i: i\r\n        }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Month, {\r\n          chooseDayAriaLabelPrefix: _this.props.chooseDayAriaLabelPrefix,\r\n          disabledDayAriaLabelPrefix: _this.props.disabledDayAriaLabelPrefix,\r\n          weekAriaLabelPrefix: _this.props.weekAriaLabelPrefix,\r\n          ariaLabelPrefix: _this.props.monthAriaLabelPrefix,\r\n          onChange: _this.changeMonthYear,\r\n          day: monthDate,\r\n          dayClassName: _this.props.dayClassName,\r\n          calendarStartDay: _this.props.calendarStartDay,\r\n          monthClassName: _this.props.monthClassName,\r\n          onDayClick: _this.handleDayClick,\r\n          handleOnKeyDown: _this.props.handleOnDayKeyDown,\r\n          handleOnMonthKeyDown: _this.props.handleOnKeyDown,\r\n          usePointerEvent: _this.props.usePointerEvent,\r\n          onDayMouseEnter: _this.handleDayMouseEnter,\r\n          onMouseLeave: _this.handleMonthMouseLeave,\r\n          onWeekSelect: _this.props.onWeekSelect,\r\n          orderInDisplay: i,\r\n          formatWeekNumber: _this.props.formatWeekNumber,\r\n          locale: _this.props.locale,\r\n          minDate: _this.props.minDate,\r\n          maxDate: _this.props.maxDate,\r\n          excludeDates: _this.props.excludeDates,\r\n          excludeDateIntervals: _this.props.excludeDateIntervals,\r\n          highlightDates: _this.props.highlightDates,\r\n          holidays: _this.props.holidays,\r\n          selectingDate: _this.state.selectingDate,\r\n          includeDates: _this.props.includeDates,\r\n          includeDateIntervals: _this.props.includeDateIntervals,\r\n          inline: _this.props.inline,\r\n          shouldFocusDayInline: _this.props.shouldFocusDayInline,\r\n          fixedHeight: _this.props.fixedHeight,\r\n          filterDate: _this.props.filterDate,\r\n          preSelection: _this.props.preSelection,\r\n          setPreSelection: _this.props.setPreSelection,\r\n          selected: _this.props.selected,\r\n          selectsStart: _this.props.selectsStart,\r\n          selectsEnd: _this.props.selectsEnd,\r\n          selectsRange: _this.props.selectsRange,\r\n          selectsDisabledDaysInRange: _this.props.selectsDisabledDaysInRange,\r\n          selectsMultiple: _this.props.selectsMultiple,\r\n          selectedDates: _this.props.selectedDates,\r\n          showWeekNumbers: _this.props.showWeekNumbers,\r\n          startDate: _this.props.startDate,\r\n          endDate: _this.props.endDate,\r\n          peekNextMonth: _this.props.peekNextMonth,\r\n          setOpen: _this.props.setOpen,\r\n          shouldCloseOnSelect: _this.props.shouldCloseOnSelect,\r\n          renderDayContents: _this.props.renderDayContents,\r\n          renderMonthContent: _this.props.renderMonthContent,\r\n          renderQuarterContent: _this.props.renderQuarterContent,\r\n          renderYearContent: _this.props.renderYearContent,\r\n          disabledKeyboardNavigation: _this.props.disabledKeyboardNavigation,\r\n          showMonthYearPicker: _this.props.showMonthYearPicker,\r\n          showFullMonthYearPicker: _this.props.showFullMonthYearPicker,\r\n          showTwoColumnMonthYearPicker: _this.props.showTwoColumnMonthYearPicker,\r\n          showFourColumnMonthYearPicker: _this.props.showFourColumnMonthYearPicker,\r\n          showYearPicker: _this.props.showYearPicker,\r\n          showQuarterYearPicker: _this.props.showQuarterYearPicker,\r\n          showWeekPicker: _this.props.showWeekPicker,\r\n          isInputFocused: _this.props.isInputFocused,\r\n          containerRef: _this.containerRef,\r\n          monthShowsDuplicateDaysEnd: monthShowsDuplicateDaysEnd,\r\n          monthShowsDuplicateDaysStart: monthShowsDuplicateDaysStart\r\n        })));\r\n      }\r\n      return monthList;\r\n    });\r\n    _defineProperty(_this, \"renderYears\", function () {\r\n      if (_this.props.showTimeSelectOnly) {\r\n        return;\r\n      }\r\n      if (_this.props.showYearPicker) {\r\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n          className: \"react-datepicker__year--container\"\r\n        }, _this.renderHeader({\r\n          monthDate: _this.state.date\r\n        }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Year, _extends({\r\n          onDayClick: _this.handleDayClick,\r\n          selectingDate: _this.state.selectingDate,\r\n          clearSelectingDate: _this.clearSelectingDate,\r\n          date: _this.state.date\r\n        }, _this.props, {\r\n          onYearMouseEnter: _this.handleYearMouseEnter,\r\n          onYearMouseLeave: _this.handleYearMouseLeave\r\n        })));\r\n      }\r\n    });\r\n    _defineProperty(_this, \"renderTimeSection\", function () {\r\n      if (_this.props.showTimeSelect && (_this.state.monthContainer || _this.props.showTimeSelectOnly)) {\r\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Time, {\r\n          selected: _this.props.selected,\r\n          openToDate: _this.props.openToDate,\r\n          onChange: _this.props.onTimeChange,\r\n          timeClassName: _this.props.timeClassName,\r\n          format: _this.props.timeFormat,\r\n          includeTimes: _this.props.includeTimes,\r\n          intervals: _this.props.timeIntervals,\r\n          minTime: _this.props.minTime,\r\n          maxTime: _this.props.maxTime,\r\n          excludeTimes: _this.props.excludeTimes,\r\n          filterTime: _this.props.filterTime,\r\n          timeCaption: _this.props.timeCaption,\r\n          todayButton: _this.props.todayButton,\r\n          showMonthDropdown: _this.props.showMonthDropdown,\r\n          showMonthYearDropdown: _this.props.showMonthYearDropdown,\r\n          showYearDropdown: _this.props.showYearDropdown,\r\n          withPortal: _this.props.withPortal,\r\n          monthRef: _this.state.monthContainer,\r\n          injectTimes: _this.props.injectTimes,\r\n          locale: _this.props.locale,\r\n          handleOnKeyDown: _this.props.handleOnKeyDown,\r\n          showTimeSelectOnly: _this.props.showTimeSelectOnly\r\n        });\r\n      }\r\n    });\r\n    _defineProperty(_this, \"renderInputTimeSection\", function () {\r\n      var time = new Date(_this.props.selected);\r\n      var timeValid = isValid(time) && Boolean(_this.props.selected);\r\n      var timeString = timeValid ? \"\".concat(addZero(time.getHours()), \":\").concat(addZero(time.getMinutes())) : \"\";\r\n      if (_this.props.showTimeInput) {\r\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(inputTime, {\r\n          date: time,\r\n          timeString: timeString,\r\n          timeInputLabel: _this.props.timeInputLabel,\r\n          onChange: _this.props.onTimeChange,\r\n          customTimeInput: _this.props.customTimeInput\r\n        });\r\n      }\r\n    });\r\n    _defineProperty(_this, \"renderAriaLiveRegion\", function () {\r\n      var _getYearsPeriod2 = getYearsPeriod(_this.state.date, _this.props.yearItemNumber),\r\n        startPeriod = _getYearsPeriod2.startPeriod,\r\n        endPeriod = _getYearsPeriod2.endPeriod;\r\n      var ariaLiveMessage;\r\n      if (_this.props.showYearPicker) {\r\n        ariaLiveMessage = \"\".concat(startPeriod, \" - \").concat(endPeriod);\r\n      } else if (_this.props.showMonthYearPicker || _this.props.showQuarterYearPicker) {\r\n        ariaLiveMessage = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.state.date);\r\n      } else {\r\n        ariaLiveMessage = \"\".concat(getMonthInLocale((0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.state.date), _this.props.locale), \" \").concat((0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.state.date));\r\n      }\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\r\n        role: \"alert\",\r\n        \"aria-live\": \"polite\",\r\n        className: \"react-datepicker__aria-live\"\r\n      }, _this.state.isRenderAriaLiveMessage && ariaLiveMessage);\r\n    });\r\n    _defineProperty(_this, \"renderChildren\", function () {\r\n      if (_this.props.children) {\r\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n          className: \"react-datepicker__children-container\"\r\n        }, _this.props.children);\r\n      }\r\n    });\r\n    _this.containerRef = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createRef();\r\n    _this.state = {\r\n      date: _this.getDateInView(),\r\n      selectingDate: null,\r\n      monthContainer: null,\r\n      isRenderAriaLiveMessage: false\r\n    };\r\n    return _this;\r\n  }\r\n  _inherits(Calendar, _React$Component);\r\n  return _createClass(Calendar, [{\r\n    key: \"componentDidMount\",\r\n    value: function componentDidMount() {\r\n      var _this2 = this;\r\n      // monthContainer height is needed in time component\r\n      // to determine the height for the ul in the time component\r\n      // setState here so height is given after final component\r\n      // layout is rendered\r\n      if (this.props.showTimeSelect) {\r\n        this.assignMonthContainer = function () {\r\n          _this2.setState({\r\n            monthContainer: _this2.monthContainer\r\n          });\r\n        }();\r\n      }\r\n    }\r\n  }, {\r\n    key: \"componentDidUpdate\",\r\n    value: function componentDidUpdate(prevProps) {\r\n      var _this3 = this;\r\n      if (this.props.preSelection && (!isSameDay(this.props.preSelection, prevProps.preSelection) || this.props.monthSelectedIn !== prevProps.monthSelectedIn)) {\r\n        var hasMonthChanged = !isSameMonth(this.state.date, this.props.preSelection);\r\n        this.setState({\r\n          date: this.props.preSelection\r\n        }, function () {\r\n          return hasMonthChanged && _this3.handleCustomMonthChange(_this3.state.date);\r\n        });\r\n      } else if (this.props.openToDate && !isSameDay(this.props.openToDate, prevProps.openToDate)) {\r\n        this.setState({\r\n          date: this.props.openToDate\r\n        });\r\n      }\r\n    }\r\n  }, {\r\n    key: \"render\",\r\n    value: function render() {\r\n      var Container = this.props.container || CalendarContainer;\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        style: {\r\n          display: \"contents\"\r\n        },\r\n        ref: this.containerRef\r\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Container, {\r\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker\", this.props.className, {\r\n          \"react-datepicker--time-only\": this.props.showTimeSelectOnly\r\n        }),\r\n        showTime: this.props.showTimeSelect || this.props.showTimeInput,\r\n        showTimeSelectOnly: this.props.showTimeSelectOnly\r\n      }, this.renderAriaLiveRegion(), this.renderPreviousButton(), this.renderNextButton(), this.renderMonths(), this.renderYears(), this.renderTodayButton(), this.renderTimeSection(), this.renderInputTimeSection(), this.renderChildren()));\r\n    }\r\n  }], [{\r\n    key: \"defaultProps\",\r\n    get: function get() {\r\n      return {\r\n        onDropdownFocus: function onDropdownFocus() {},\r\n        monthsShown: 1,\r\n        forceShowMonthNavigation: false,\r\n        timeCaption: \"Time\",\r\n        previousYearButtonLabel: \"Previous Year\",\r\n        nextYearButtonLabel: \"Next Year\",\r\n        previousMonthButtonLabel: \"Previous Month\",\r\n        nextMonthButtonLabel: \"Next Month\",\r\n        customTimeInput: null,\r\n        yearItemNumber: DEFAULT_YEAR_ITEM_NUMBER\r\n      };\r\n    }\r\n  }]);\r\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\r\n\r\nvar CalendarIcon = function CalendarIcon(_ref) {\r\n  var icon = _ref.icon,\r\n    _ref$className = _ref.className,\r\n    className = _ref$className === void 0 ? \"\" : _ref$className,\r\n    _onClick = _ref.onClick;\r\n  var defaultClass = \"react-datepicker__calendar-icon\";\r\n  if ( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().isValidElement(icon)) {\r\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().cloneElement(icon, {\r\n      className: \"\".concat(icon.props.className || \"\", \" \").concat(defaultClass, \" \").concat(className),\r\n      onClick: function onClick(e) {\r\n        if (typeof icon.props.onClick === \"function\") {\r\n          icon.props.onClick(e);\r\n        }\r\n        if (typeof _onClick === \"function\") {\r\n          _onClick(e);\r\n        }\r\n      }\r\n    });\r\n  }\r\n  if (typeof icon === \"string\") {\r\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"i\", {\r\n      className: \"\".concat(defaultClass, \" \").concat(icon, \" \").concat(className),\r\n      \"aria-hidden\": \"true\",\r\n      onClick: _onClick\r\n    });\r\n  }\r\n\r\n  // Default SVG Icon\r\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"svg\", {\r\n    className: \"\".concat(defaultClass, \" \").concat(className),\r\n    xmlns: \"http://www.w3.org/2000/svg\",\r\n    viewBox: \"0 0 448 512\",\r\n    onClick: _onClick\r\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"path\", {\r\n    d: \"M96 32V64H48C21.5 64 0 85.5 0 112v48H448V112c0-26.5-21.5-48-48-48H352V32c0-17.7-14.3-32-32-32s-32 14.3-32 32V64H160V32c0-17.7-14.3-32-32-32S96 14.3 96 32zM448 192H0V464c0 26.5 21.5 48 48 48H400c26.5 0 48-21.5 48-48V192z\"\r\n  }));\r\n};\r\nvar CalendarIcon$1 = CalendarIcon;\r\n\r\nvar Portal = /*#__PURE__*/function (_React$Component) {\r\n  function Portal(props) {\r\n    var _this;\r\n    _classCallCheck(this, Portal);\r\n    _this = _callSuper(this, Portal, [props]);\r\n    _this.el = document.createElement(\"div\");\r\n    return _this;\r\n  }\r\n  _inherits(Portal, _React$Component);\r\n  return _createClass(Portal, [{\r\n    key: \"componentDidMount\",\r\n    value: function componentDidMount() {\r\n      this.portalRoot = (this.props.portalHost || document).getElementById(this.props.portalId);\r\n      if (!this.portalRoot) {\r\n        this.portalRoot = document.createElement(\"div\");\r\n        this.portalRoot.setAttribute(\"id\", this.props.portalId);\r\n        (this.props.portalHost || document.body).appendChild(this.portalRoot);\r\n      }\r\n      this.portalRoot.appendChild(this.el);\r\n    }\r\n  }, {\r\n    key: \"componentWillUnmount\",\r\n    value: function componentWillUnmount() {\r\n      this.portalRoot.removeChild(this.el);\r\n    }\r\n  }, {\r\n    key: \"render\",\r\n    value: function render() {\r\n      return /*#__PURE__*/react_dom__WEBPACK_IMPORTED_MODULE_3___default().createPortal(this.props.children, this.el);\r\n    }\r\n  }]);\r\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\r\n\r\n// TabLoop prevents the user from tabbing outside of the popper\r\n// It creates a tabindex loop so that \"Tab\" on the last element will focus the first element\r\n// and \"Shift Tab\" on the first element will focus the last element\r\n\r\nvar focusableElementsSelector = \"[tabindex], a, button, input, select, textarea\";\r\nvar focusableFilter = function focusableFilter(node) {\r\n  return !node.disabled && node.tabIndex !== -1;\r\n};\r\nvar TabLoop = /*#__PURE__*/function (_React$Component) {\r\n  function TabLoop(props) {\r\n    var _this;\r\n    _classCallCheck(this, TabLoop);\r\n    _this = _callSuper(this, TabLoop, [props]);\r\n    // query all focusable elements\r\n    // trim first and last because they are the focus guards\r\n    _defineProperty(_this, \"getTabChildren\", function () {\r\n      return Array.prototype.slice.call(_this.tabLoopRef.current.querySelectorAll(focusableElementsSelector), 1, -1).filter(focusableFilter);\r\n    });\r\n    _defineProperty(_this, \"handleFocusStart\", function () {\r\n      var tabChildren = _this.getTabChildren();\r\n      tabChildren && tabChildren.length > 1 && tabChildren[tabChildren.length - 1].focus();\r\n    });\r\n    _defineProperty(_this, \"handleFocusEnd\", function () {\r\n      var tabChildren = _this.getTabChildren();\r\n      tabChildren && tabChildren.length > 1 && tabChildren[0].focus();\r\n    });\r\n    _this.tabLoopRef = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createRef();\r\n    return _this;\r\n  }\r\n  _inherits(TabLoop, _React$Component);\r\n  return _createClass(TabLoop, [{\r\n    key: \"render\",\r\n    value: function render() {\r\n      if (!this.props.enableTabLoop) {\r\n        return this.props.children;\r\n      }\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: \"react-datepicker__tab-loop\",\r\n        ref: this.tabLoopRef\r\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: \"react-datepicker__tab-loop__start\",\r\n        tabIndex: \"0\",\r\n        onFocus: this.handleFocusStart\r\n      }), this.props.children, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: \"react-datepicker__tab-loop__end\",\r\n        tabIndex: \"0\",\r\n        onFocus: this.handleFocusEnd\r\n      }));\r\n    }\r\n  }], [{\r\n    key: \"defaultProps\",\r\n    get: function get() {\r\n      return {\r\n        enableTabLoop: true\r\n      };\r\n    }\r\n  }]);\r\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\r\n\r\nfunction withFloating(Component) {\r\n  var WithFloating = function WithFloating(props) {\r\n    var alt_props = _objectSpread2(_objectSpread2({}, props), {}, {\r\n      popperModifiers: props.popperModifiers || [],\r\n      popperProps: props.popperProps || {},\r\n      hidePopper: typeof props.hidePopper === \"boolean\" ? props.hidePopper : true\r\n    });\r\n    var arrowRef = react__WEBPACK_IMPORTED_MODULE_0___default().useRef();\r\n    var floatingProps = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_61__.useFloating)(_objectSpread2({\r\n      open: !alt_props.hidePopper,\r\n      whileElementsMounted: _floating_ui_react__WEBPACK_IMPORTED_MODULE_62__.autoUpdate,\r\n      placement: alt_props.popperPlacement,\r\n      middleware: [(0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_62__.flip)({\r\n        padding: 15\r\n      }), (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_62__.offset)(10), (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_63__.arrow)({\r\n        element: arrowRef\r\n      })].concat(_toConsumableArray(alt_props.popperModifiers))\r\n    }, alt_props.popperProps));\r\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Component, _extends({}, alt_props, {\r\n      popperProps: _objectSpread2(_objectSpread2({}, floatingProps), {}, {\r\n        arrowRef: arrowRef\r\n      })\r\n    }));\r\n  };\r\n  return WithFloating;\r\n}\r\n\r\n// Exported for testing purposes\r\nvar PopperComponent = /*#__PURE__*/function (_React$Component) {\r\n  function PopperComponent() {\r\n    _classCallCheck(this, PopperComponent);\r\n    return _callSuper(this, PopperComponent, arguments);\r\n  }\r\n  _inherits(PopperComponent, _React$Component);\r\n  return _createClass(PopperComponent, [{\r\n    key: \"render\",\r\n    value: function render() {\r\n      var _this$props = this.props,\r\n        className = _this$props.className,\r\n        wrapperClassName = _this$props.wrapperClassName,\r\n        hidePopper = _this$props.hidePopper,\r\n        popperComponent = _this$props.popperComponent,\r\n        targetComponent = _this$props.targetComponent,\r\n        enableTabLoop = _this$props.enableTabLoop,\r\n        popperOnKeyDown = _this$props.popperOnKeyDown,\r\n        portalId = _this$props.portalId,\r\n        portalHost = _this$props.portalHost,\r\n        popperProps = _this$props.popperProps,\r\n        showArrow = _this$props.showArrow;\r\n      var popper;\r\n      if (!hidePopper) {\r\n        var classes = (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker-popper\", className);\r\n        popper = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TabLoop, {\r\n          enableTabLoop: enableTabLoop\r\n        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n          ref: popperProps.refs.setFloating,\r\n          style: popperProps.floatingStyles,\r\n          className: classes,\r\n          \"data-placement\": popperProps.placement,\r\n          onKeyDown: popperOnKeyDown\r\n        }, popperComponent, showArrow && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_floating_ui_react__WEBPACK_IMPORTED_MODULE_61__.FloatingArrow, {\r\n          ref: popperProps.arrowRef,\r\n          context: popperProps.context,\r\n          fill: \"currentColor\",\r\n          strokeWidth: 1,\r\n          height: 8,\r\n          width: 16,\r\n          style: {\r\n            transform: \"translateY(-1px)\"\r\n          },\r\n          className: \"react-datepicker__triangle\"\r\n        })));\r\n      }\r\n      if (this.props.popperContainer) {\r\n        popper = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(this.props.popperContainer, {}, popper);\r\n      }\r\n      if (portalId && !hidePopper) {\r\n        popper = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Portal, {\r\n          portalId: portalId,\r\n          portalHost: portalHost\r\n        }, popper);\r\n      }\r\n      var wrapperClasses = (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker-wrapper\", wrapperClassName);\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        ref: popperProps.refs.setReference,\r\n        className: wrapperClasses\r\n      }, targetComponent), popper);\r\n    }\r\n  }], [{\r\n    key: \"defaultProps\",\r\n    get: function get() {\r\n      return {\r\n        hidePopper: true\r\n      };\r\n    }\r\n  }]);\r\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\r\nvar PopperComponent$1 = withFloating(PopperComponent);\r\n\r\nvar outsideClickIgnoreClass = \"react-datepicker-ignore-onclickoutside\";\r\nvar WrappedCalendar = (0,react_onclickoutside__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Calendar);\r\n\r\n// Compares dates year+month combinations\r\nfunction hasPreSelectionChanged(date1, date2) {\r\n  if (date1 && date2) {\r\n    return (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(date1) !== (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(date2) || (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(date1) !== (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(date2);\r\n  }\r\n  return date1 !== date2;\r\n}\r\n\r\n/**\r\n * General datepicker component.\r\n */\r\nvar INPUT_ERR_1 = \"Date input not valid.\";\r\nvar DatePicker = /*#__PURE__*/function (_React$Component) {\r\n  function DatePicker(props) {\r\n    var _this;\r\n    _classCallCheck(this, DatePicker);\r\n    _this = _callSuper(this, DatePicker, [props]);\r\n    _defineProperty(_this, \"getPreSelection\", function () {\r\n      return _this.props.openToDate ? _this.props.openToDate : _this.props.selectsEnd && _this.props.startDate ? _this.props.startDate : _this.props.selectsStart && _this.props.endDate ? _this.props.endDate : newDate();\r\n    });\r\n    // Convert the date from string format to standard Date format\r\n    _defineProperty(_this, \"modifyHolidays\", function () {\r\n      var _this$props$holidays;\r\n      return (_this$props$holidays = _this.props.holidays) === null || _this$props$holidays === void 0 ? void 0 : _this$props$holidays.reduce(function (accumulator, holiday) {\r\n        var date = new Date(holiday.date);\r\n        if (!(0,date_fns_isValid__WEBPACK_IMPORTED_MODULE_8__.isValid)(date)) {\r\n          return accumulator;\r\n        }\r\n        return [].concat(_toConsumableArray(accumulator), [_objectSpread2(_objectSpread2({}, holiday), {}, {\r\n          date: date\r\n        })]);\r\n      }, []);\r\n    });\r\n    _defineProperty(_this, \"calcInitialState\", function () {\r\n      var _ref;\r\n      var defaultPreSelection = _this.getPreSelection();\r\n      var minDate = getEffectiveMinDate(_this.props);\r\n      var maxDate = getEffectiveMaxDate(_this.props);\r\n      var boundedPreSelection = minDate && (0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(defaultPreSelection, (0,date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__.startOfDay)(minDate)) ? minDate : maxDate && (0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(defaultPreSelection, (0,date_fns_endOfDay__WEBPACK_IMPORTED_MODULE_26__.endOfDay)(maxDate)) ? maxDate : defaultPreSelection;\r\n      return {\r\n        open: _this.props.startOpen || false,\r\n        preventFocus: false,\r\n        preSelection: (_ref = _this.props.selectsRange ? _this.props.startDate : _this.props.selected) !== null && _ref !== void 0 ? _ref : boundedPreSelection,\r\n        // transforming highlighted days (perhaps nested array)\r\n        // to flat Map for faster access in day.jsx\r\n        highlightDates: getHightLightDaysMap(_this.props.highlightDates),\r\n        focused: false,\r\n        // used to focus day in inline version after month has changed, but not on\r\n        // initial render\r\n        shouldFocusDayInline: false,\r\n        isRenderAriaLiveMessage: false\r\n      };\r\n    });\r\n    _defineProperty(_this, \"clearPreventFocusTimeout\", function () {\r\n      if (_this.preventFocusTimeout) {\r\n        clearTimeout(_this.preventFocusTimeout);\r\n      }\r\n    });\r\n    _defineProperty(_this, \"setFocus\", function () {\r\n      if (_this.input && _this.input.focus) {\r\n        _this.input.focus({\r\n          preventScroll: true\r\n        });\r\n      }\r\n    });\r\n    _defineProperty(_this, \"setBlur\", function () {\r\n      if (_this.input && _this.input.blur) {\r\n        _this.input.blur();\r\n      }\r\n      _this.cancelFocusInput();\r\n    });\r\n    _defineProperty(_this, \"setOpen\", function (open) {\r\n      var skipSetBlur = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\r\n      _this.setState({\r\n        open: open,\r\n        preSelection: open && _this.state.open ? _this.state.preSelection : _this.calcInitialState().preSelection,\r\n        lastPreSelectChange: PRESELECT_CHANGE_VIA_NAVIGATE\r\n      }, function () {\r\n        if (!open) {\r\n          _this.setState(function (prev) {\r\n            return {\r\n              focused: skipSetBlur ? prev.focused : false\r\n            };\r\n          }, function () {\r\n            !skipSetBlur && _this.setBlur();\r\n            _this.setState({\r\n              inputValue: null\r\n            });\r\n          });\r\n        }\r\n      });\r\n    });\r\n    _defineProperty(_this, \"inputOk\", function () {\r\n      return (0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__.isDate)(_this.state.preSelection);\r\n    });\r\n    _defineProperty(_this, \"isCalendarOpen\", function () {\r\n      return _this.props.open === undefined ? _this.state.open && !_this.props.disabled && !_this.props.readOnly : _this.props.open;\r\n    });\r\n    _defineProperty(_this, \"handleFocus\", function (event) {\r\n      if (!_this.state.preventFocus) {\r\n        _this.props.onFocus(event);\r\n        if (!_this.props.preventOpenOnFocus && !_this.props.readOnly) {\r\n          _this.setOpen(true);\r\n        }\r\n      }\r\n      _this.setState({\r\n        focused: true\r\n      });\r\n    });\r\n    _defineProperty(_this, \"sendFocusBackToInput\", function () {\r\n      // Clear previous timeout if it exists\r\n      if (_this.preventFocusTimeout) {\r\n        _this.clearPreventFocusTimeout();\r\n      }\r\n\r\n      // close the popper and refocus the input\r\n      // stop the input from auto opening onFocus\r\n      // setFocus to the input\r\n      _this.setState({\r\n        preventFocus: true\r\n      }, function () {\r\n        _this.preventFocusTimeout = setTimeout(function () {\r\n          _this.setFocus();\r\n          _this.setState({\r\n            preventFocus: false\r\n          });\r\n        });\r\n      });\r\n    });\r\n    _defineProperty(_this, \"cancelFocusInput\", function () {\r\n      clearTimeout(_this.inputFocusTimeout);\r\n      _this.inputFocusTimeout = null;\r\n    });\r\n    _defineProperty(_this, \"deferFocusInput\", function () {\r\n      _this.cancelFocusInput();\r\n      _this.inputFocusTimeout = setTimeout(function () {\r\n        return _this.setFocus();\r\n      }, 1);\r\n    });\r\n    _defineProperty(_this, \"handleDropdownFocus\", function () {\r\n      _this.cancelFocusInput();\r\n    });\r\n    _defineProperty(_this, \"handleBlur\", function (event) {\r\n      if (!_this.state.open || _this.props.withPortal || _this.props.showTimeInput) {\r\n        _this.props.onBlur(event);\r\n      }\r\n      _this.setState({\r\n        focused: false\r\n      });\r\n    });\r\n    _defineProperty(_this, \"handleCalendarClickOutside\", function (event) {\r\n      if (!_this.props.inline) {\r\n        _this.setOpen(false);\r\n      }\r\n      _this.props.onClickOutside(event);\r\n      if (_this.props.withPortal) {\r\n        event.preventDefault();\r\n      }\r\n    });\r\n    _defineProperty(_this, \"handleChange\", function () {\r\n      for (var _len = arguments.length, allArgs = new Array(_len), _key = 0; _key < _len; _key++) {\r\n        allArgs[_key] = arguments[_key];\r\n      }\r\n      var event = allArgs[0];\r\n      if (_this.props.onChangeRaw) {\r\n        _this.props.onChangeRaw.apply(_this, allArgs);\r\n        if (typeof event.isDefaultPrevented !== \"function\" || event.isDefaultPrevented()) {\r\n          return;\r\n        }\r\n      }\r\n      _this.setState({\r\n        inputValue: event.target.value,\r\n        lastPreSelectChange: PRESELECT_CHANGE_VIA_INPUT\r\n      });\r\n      var date = parseDate(event.target.value, _this.props.dateFormat, _this.props.locale, _this.props.strictParsing, _this.props.minDate);\r\n      // Use date from `selected` prop when manipulating only time for input value\r\n      if (_this.props.showTimeSelectOnly && _this.props.selected && date && !isSameDay(date, _this.props.selected)) {\r\n        date = (0,date_fns_set__WEBPACK_IMPORTED_MODULE_64__.set)(_this.props.selected, {\r\n          hours: (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(date),\r\n          minutes: (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(date),\r\n          seconds: (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(date)\r\n        });\r\n      }\r\n      if (date || !event.target.value) {\r\n        _this.setSelected(date, event, true);\r\n      }\r\n    });\r\n    _defineProperty(_this, \"handleSelect\", function (date, event, monthSelectedIn) {\r\n      if (_this.props.shouldCloseOnSelect && !_this.props.showTimeSelect) {\r\n        // Preventing onFocus event to fix issue\r\n        // https://github.com/Hacker0x01/react-datepicker/issues/628\r\n        _this.sendFocusBackToInput();\r\n      }\r\n      if (_this.props.onChangeRaw) {\r\n        _this.props.onChangeRaw(event);\r\n      }\r\n      _this.setSelected(date, event, false, monthSelectedIn);\r\n      if (_this.props.showDateSelect) {\r\n        _this.setState({\r\n          isRenderAriaLiveMessage: true\r\n        });\r\n      }\r\n      if (!_this.props.shouldCloseOnSelect || _this.props.showTimeSelect) {\r\n        _this.setPreSelection(date);\r\n      } else if (!_this.props.inline) {\r\n        if (!_this.props.selectsRange) {\r\n          _this.setOpen(false);\r\n        }\r\n        var _this$props = _this.props,\r\n          startDate = _this$props.startDate,\r\n          endDate = _this$props.endDate;\r\n        if (startDate && !endDate && (_this.props.swapRange || !isDateBefore(date, startDate))) {\r\n          _this.setOpen(false);\r\n        }\r\n      }\r\n    });\r\n    _defineProperty(_this, \"setSelected\", function (date, event, keepInput, monthSelectedIn) {\r\n      var changedDate = date;\r\n      if (_this.props.showYearPicker) {\r\n        if (changedDate !== null && isYearDisabled((0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(changedDate), _this.props)) {\r\n          return;\r\n        }\r\n      } else if (_this.props.showMonthYearPicker) {\r\n        if (changedDate !== null && isMonthDisabled(changedDate, _this.props)) {\r\n          return;\r\n        }\r\n      } else {\r\n        if (changedDate !== null && isDayDisabled(changedDate, _this.props)) {\r\n          return;\r\n        }\r\n      }\r\n      var _this$props2 = _this.props,\r\n        onChange = _this$props2.onChange,\r\n        selectsRange = _this$props2.selectsRange,\r\n        startDate = _this$props2.startDate,\r\n        endDate = _this$props2.endDate,\r\n        selectsMultiple = _this$props2.selectsMultiple,\r\n        selectedDates = _this$props2.selectedDates,\r\n        minTime = _this$props2.minTime,\r\n        swapRange = _this$props2.swapRange;\r\n      if (!isEqual(_this.props.selected, changedDate) || _this.props.allowSameDay || selectsRange || selectsMultiple) {\r\n        if (changedDate !== null) {\r\n          if (_this.props.selected && (!keepInput || !_this.props.showTimeSelect && !_this.props.showTimeSelectOnly && !_this.props.showTimeInput)) {\r\n            changedDate = setTime(changedDate, {\r\n              hour: (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(_this.props.selected),\r\n              minute: (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(_this.props.selected),\r\n              second: (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(_this.props.selected)\r\n            });\r\n          }\r\n\r\n          // If minTime is present then set the time to minTime\r\n          if (!keepInput && (_this.props.showTimeSelect || _this.props.showTimeSelectOnly)) {\r\n            if (minTime) {\r\n              changedDate = setTime(changedDate, {\r\n                hour: minTime.getHours(),\r\n                minute: minTime.getMinutes(),\r\n                second: minTime.getSeconds()\r\n              });\r\n            }\r\n          }\r\n          if (!_this.props.inline) {\r\n            _this.setState({\r\n              preSelection: changedDate\r\n            });\r\n          }\r\n          if (!_this.props.focusSelectedMonth) {\r\n            _this.setState({\r\n              monthSelectedIn: monthSelectedIn\r\n            });\r\n          }\r\n        }\r\n        if (selectsRange) {\r\n          var noRanges = !startDate && !endDate;\r\n          var hasStartRange = startDate && !endDate;\r\n          var isRangeFilled = startDate && endDate;\r\n          if (noRanges) {\r\n            onChange([changedDate, null], event);\r\n          } else if (hasStartRange) {\r\n            if (changedDate === null) {\r\n              onChange([null, null], event);\r\n            } else if (isDateBefore(changedDate, startDate)) {\r\n              if (swapRange) {\r\n                onChange([changedDate, startDate], event);\r\n              } else {\r\n                onChange([changedDate, null], event);\r\n              }\r\n            } else {\r\n              onChange([startDate, changedDate], event);\r\n            }\r\n          }\r\n          if (isRangeFilled) {\r\n            onChange([changedDate, null], event);\r\n          }\r\n        } else if (selectsMultiple) {\r\n          if (!(selectedDates !== null && selectedDates !== void 0 && selectedDates.length)) {\r\n            onChange([changedDate], event);\r\n          } else {\r\n            var isChangedDateAlreadySelected = selectedDates.some(function (selectedDate) {\r\n              return isSameDay(selectedDate, changedDate);\r\n            });\r\n            if (isChangedDateAlreadySelected) {\r\n              var nextDates = selectedDates.filter(function (selectedDate) {\r\n                return !isSameDay(selectedDate, changedDate);\r\n              });\r\n              onChange(nextDates, event);\r\n            } else {\r\n              onChange([].concat(_toConsumableArray(selectedDates), [changedDate]), event);\r\n            }\r\n          }\r\n        } else {\r\n          onChange(changedDate, event);\r\n        }\r\n      }\r\n      if (!keepInput) {\r\n        _this.props.onSelect(changedDate, event);\r\n        _this.setState({\r\n          inputValue: null\r\n        });\r\n      }\r\n    });\r\n    // When checking preSelection via min/maxDate, times need to be manipulated via startOfDay/endOfDay\r\n    _defineProperty(_this, \"setPreSelection\", function (date) {\r\n      var hasMinDate = typeof _this.props.minDate !== \"undefined\";\r\n      var hasMaxDate = typeof _this.props.maxDate !== \"undefined\";\r\n      var isValidDateSelection = true;\r\n      if (date) {\r\n        var dateStartOfDay = (0,date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__.startOfDay)(date);\r\n        if (hasMinDate && hasMaxDate) {\r\n          // isDayInRange uses startOfDay internally, so not necessary to manipulate times here\r\n          isValidDateSelection = isDayInRange(date, _this.props.minDate, _this.props.maxDate);\r\n        } else if (hasMinDate) {\r\n          var minDateStartOfDay = (0,date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__.startOfDay)(_this.props.minDate);\r\n          isValidDateSelection = (0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(date, minDateStartOfDay) || isEqual(dateStartOfDay, minDateStartOfDay);\r\n        } else if (hasMaxDate) {\r\n          var maxDateEndOfDay = (0,date_fns_endOfDay__WEBPACK_IMPORTED_MODULE_26__.endOfDay)(_this.props.maxDate);\r\n          isValidDateSelection = (0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(date, maxDateEndOfDay) || isEqual(dateStartOfDay, maxDateEndOfDay);\r\n        }\r\n      }\r\n      if (isValidDateSelection) {\r\n        _this.setState({\r\n          preSelection: date\r\n        });\r\n      }\r\n    });\r\n    _defineProperty(_this, \"toggleCalendar\", function () {\r\n      _this.setOpen(!_this.state.open);\r\n    });\r\n    _defineProperty(_this, \"handleTimeChange\", function (time) {\r\n      var selected = _this.props.selected ? _this.props.selected : _this.getPreSelection();\r\n      var changedDate = _this.props.selected ? time : setTime(selected, {\r\n        hour: (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(time),\r\n        minute: (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(time)\r\n      });\r\n      _this.setState({\r\n        preSelection: changedDate\r\n      });\r\n      _this.props.onChange(changedDate);\r\n      if (_this.props.shouldCloseOnSelect) {\r\n        _this.sendFocusBackToInput();\r\n        _this.setOpen(false);\r\n      }\r\n      if (_this.props.showTimeInput) {\r\n        _this.setOpen(true);\r\n      }\r\n      if (_this.props.showTimeSelectOnly || _this.props.showTimeSelect) {\r\n        _this.setState({\r\n          isRenderAriaLiveMessage: true\r\n        });\r\n      }\r\n      _this.setState({\r\n        inputValue: null\r\n      });\r\n    });\r\n    _defineProperty(_this, \"onInputClick\", function () {\r\n      if (!_this.props.disabled && !_this.props.readOnly) {\r\n        _this.setOpen(true);\r\n      }\r\n      _this.props.onInputClick();\r\n    });\r\n    _defineProperty(_this, \"onInputKeyDown\", function (event) {\r\n      _this.props.onKeyDown(event);\r\n      var eventKey = event.key;\r\n      if (!_this.state.open && !_this.props.inline && !_this.props.preventOpenOnFocus) {\r\n        if (eventKey === \"ArrowDown\" || eventKey === \"ArrowUp\" || eventKey === \"Enter\") {\r\n          _this.onInputClick();\r\n        }\r\n        return;\r\n      }\r\n\r\n      // if calendar is open, these keys will focus the selected item\r\n      if (_this.state.open) {\r\n        if (eventKey === \"ArrowDown\" || eventKey === \"ArrowUp\") {\r\n          event.preventDefault();\r\n          var selectorString = _this.props.showWeekPicker && _this.props.showWeekNumbers ? '.react-datepicker__week-number[tabindex=\"0\"]' : _this.props.showFullMonthYearPicker || _this.props.showMonthYearPicker ? '.react-datepicker__month-text[tabindex=\"0\"]' : '.react-datepicker__day[tabindex=\"0\"]';\r\n          var selectedItem = _this.calendar.componentNode && _this.calendar.componentNode.querySelector(selectorString);\r\n          selectedItem && selectedItem.focus({\r\n            preventScroll: true\r\n          });\r\n          return;\r\n        }\r\n        var copy = newDate(_this.state.preSelection);\r\n        if (eventKey === \"Enter\") {\r\n          event.preventDefault();\r\n          if (_this.inputOk() && _this.state.lastPreSelectChange === PRESELECT_CHANGE_VIA_NAVIGATE) {\r\n            _this.handleSelect(copy, event);\r\n            !_this.props.shouldCloseOnSelect && _this.setPreSelection(copy);\r\n          } else {\r\n            _this.setOpen(false);\r\n          }\r\n        } else if (eventKey === \"Escape\") {\r\n          event.preventDefault();\r\n          _this.sendFocusBackToInput();\r\n          _this.setOpen(false);\r\n        } else if (eventKey === \"Tab\") {\r\n          _this.setOpen(false);\r\n        }\r\n        if (!_this.inputOk()) {\r\n          _this.props.onInputError({\r\n            code: 1,\r\n            msg: INPUT_ERR_1\r\n          });\r\n        }\r\n      }\r\n    });\r\n    _defineProperty(_this, \"onPortalKeyDown\", function (event) {\r\n      var eventKey = event.key;\r\n      if (eventKey === \"Escape\") {\r\n        event.preventDefault();\r\n        _this.setState({\r\n          preventFocus: true\r\n        }, function () {\r\n          _this.setOpen(false);\r\n          setTimeout(function () {\r\n            _this.setFocus();\r\n            _this.setState({\r\n              preventFocus: false\r\n            });\r\n          });\r\n        });\r\n      }\r\n    });\r\n    // keyDown events passed down to day.jsx\r\n    _defineProperty(_this, \"onDayKeyDown\", function (event) {\r\n      _this.props.onKeyDown(event);\r\n      var eventKey = event.key;\r\n      var isShiftKeyActive = event.shiftKey;\r\n      var copy = newDate(_this.state.preSelection);\r\n      if (eventKey === \"Enter\") {\r\n        event.preventDefault();\r\n        _this.handleSelect(copy, event);\r\n        !_this.props.shouldCloseOnSelect && _this.setPreSelection(copy);\r\n      } else if (eventKey === \"Escape\") {\r\n        event.preventDefault();\r\n        _this.setOpen(false);\r\n        if (!_this.inputOk()) {\r\n          _this.props.onInputError({\r\n            code: 1,\r\n            msg: INPUT_ERR_1\r\n          });\r\n        }\r\n      } else if (!_this.props.disabledKeyboardNavigation) {\r\n        var newSelection;\r\n        switch (eventKey) {\r\n          case \"ArrowLeft\":\r\n            if (_this.props.showWeekPicker) {\r\n              newSelection = (0,date_fns_subWeeks__WEBPACK_IMPORTED_MODULE_65__.subWeeks)(copy, 1);\r\n            } else {\r\n              newSelection = (0,date_fns_subDays__WEBPACK_IMPORTED_MODULE_66__.subDays)(copy, 1);\r\n            }\r\n            break;\r\n          case \"ArrowRight\":\r\n            if (_this.props.showWeekPicker) {\r\n              newSelection = (0,date_fns_addWeeks__WEBPACK_IMPORTED_MODULE_59__.addWeeks)(copy, 1);\r\n            } else {\r\n              newSelection = (0,date_fns_addDays__WEBPACK_IMPORTED_MODULE_58__.addDays)(copy, 1);\r\n            }\r\n            break;\r\n          case \"ArrowUp\":\r\n            newSelection = (0,date_fns_subWeeks__WEBPACK_IMPORTED_MODULE_65__.subWeeks)(copy, 1);\r\n            break;\r\n          case \"ArrowDown\":\r\n            newSelection = (0,date_fns_addWeeks__WEBPACK_IMPORTED_MODULE_59__.addWeeks)(copy, 1);\r\n            break;\r\n          case \"PageUp\":\r\n            newSelection = isShiftKeyActive ? (0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_45__.subYears)(copy, 1) : (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_39__.subMonths)(copy, 1);\r\n            break;\r\n          case \"PageDown\":\r\n            newSelection = isShiftKeyActive ? (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(copy, 1) : (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(copy, 1);\r\n            break;\r\n          case \"Home\":\r\n            newSelection = getStartOfWeek(copy, _this.props.locale, _this.props.calendarStartDay);\r\n            break;\r\n          case \"End\":\r\n            newSelection = getEndOfWeek(copy);\r\n            break;\r\n          default:\r\n            newSelection = null;\r\n            break;\r\n        }\r\n        if (!newSelection) {\r\n          if (_this.props.onInputError) {\r\n            _this.props.onInputError({\r\n              code: 1,\r\n              msg: INPUT_ERR_1\r\n            });\r\n          }\r\n          return;\r\n        }\r\n        event.preventDefault();\r\n        _this.setState({\r\n          lastPreSelectChange: PRESELECT_CHANGE_VIA_NAVIGATE\r\n        });\r\n        if (_this.props.adjustDateOnChange) {\r\n          _this.setSelected(newSelection);\r\n        }\r\n        _this.setPreSelection(newSelection);\r\n        // need to figure out whether month has changed to focus day in inline version\r\n        if (_this.props.inline) {\r\n          var prevMonth = (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(copy);\r\n          var newMonth = (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(newSelection);\r\n          var prevYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(copy);\r\n          var newYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(newSelection);\r\n          if (prevMonth !== newMonth || prevYear !== newYear) {\r\n            // month has changed\r\n            _this.setState({\r\n              shouldFocusDayInline: true\r\n            });\r\n          } else {\r\n            // month hasn't changed\r\n            _this.setState({\r\n              shouldFocusDayInline: false\r\n            });\r\n          }\r\n        }\r\n      }\r\n    });\r\n    // handle generic key down events in the popper that do not adjust or select dates\r\n    // ex: while focusing prev and next month buttons\r\n    _defineProperty(_this, \"onPopperKeyDown\", function (event) {\r\n      var eventKey = event.key;\r\n      if (eventKey === \"Escape\") {\r\n        event.preventDefault();\r\n        _this.sendFocusBackToInput();\r\n      }\r\n    });\r\n    _defineProperty(_this, \"onClearClick\", function (event) {\r\n      if (event) {\r\n        if (event.preventDefault) {\r\n          event.preventDefault();\r\n        }\r\n      }\r\n      _this.sendFocusBackToInput();\r\n      if (_this.props.selectsRange) {\r\n        _this.props.onChange([null, null], event);\r\n      } else {\r\n        _this.props.onChange(null, event);\r\n      }\r\n      _this.setState({\r\n        inputValue: null\r\n      });\r\n    });\r\n    _defineProperty(_this, \"clear\", function () {\r\n      _this.onClearClick();\r\n    });\r\n    _defineProperty(_this, \"onScroll\", function (event) {\r\n      if (typeof _this.props.closeOnScroll === \"boolean\" && _this.props.closeOnScroll) {\r\n        if (event.target === document || event.target === document.documentElement || event.target === document.body) {\r\n          _this.setOpen(false);\r\n        }\r\n      } else if (typeof _this.props.closeOnScroll === \"function\") {\r\n        if (_this.props.closeOnScroll(event)) {\r\n          _this.setOpen(false);\r\n        }\r\n      }\r\n    });\r\n    _defineProperty(_this, \"renderCalendar\", function () {\r\n      if (!_this.props.inline && !_this.isCalendarOpen()) {\r\n        return null;\r\n      }\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(WrappedCalendar, {\r\n        ref: function ref(elem) {\r\n          _this.calendar = elem;\r\n        },\r\n        locale: _this.props.locale,\r\n        calendarStartDay: _this.props.calendarStartDay,\r\n        chooseDayAriaLabelPrefix: _this.props.chooseDayAriaLabelPrefix,\r\n        disabledDayAriaLabelPrefix: _this.props.disabledDayAriaLabelPrefix,\r\n        weekAriaLabelPrefix: _this.props.weekAriaLabelPrefix,\r\n        monthAriaLabelPrefix: _this.props.monthAriaLabelPrefix,\r\n        adjustDateOnChange: _this.props.adjustDateOnChange,\r\n        setOpen: _this.setOpen,\r\n        shouldCloseOnSelect: _this.props.shouldCloseOnSelect,\r\n        dateFormat: _this.props.dateFormatCalendar,\r\n        useWeekdaysShort: _this.props.useWeekdaysShort,\r\n        formatWeekDay: _this.props.formatWeekDay,\r\n        dropdownMode: _this.props.dropdownMode,\r\n        selected: _this.props.selected,\r\n        preSelection: _this.state.preSelection,\r\n        onSelect: _this.handleSelect,\r\n        onWeekSelect: _this.props.onWeekSelect,\r\n        openToDate: _this.props.openToDate,\r\n        minDate: _this.props.minDate,\r\n        maxDate: _this.props.maxDate,\r\n        selectsStart: _this.props.selectsStart,\r\n        selectsEnd: _this.props.selectsEnd,\r\n        selectsRange: _this.props.selectsRange,\r\n        selectsMultiple: _this.props.selectsMultiple,\r\n        selectedDates: _this.props.selectedDates,\r\n        startDate: _this.props.startDate,\r\n        endDate: _this.props.endDate,\r\n        excludeDates: _this.props.excludeDates,\r\n        excludeDateIntervals: _this.props.excludeDateIntervals,\r\n        filterDate: _this.props.filterDate,\r\n        onClickOutside: _this.handleCalendarClickOutside,\r\n        formatWeekNumber: _this.props.formatWeekNumber,\r\n        highlightDates: _this.state.highlightDates,\r\n        holidays: getHolidaysMap(_this.modifyHolidays()),\r\n        includeDates: _this.props.includeDates,\r\n        includeDateIntervals: _this.props.includeDateIntervals,\r\n        includeTimes: _this.props.includeTimes,\r\n        injectTimes: _this.props.injectTimes,\r\n        inline: _this.props.inline,\r\n        shouldFocusDayInline: _this.state.shouldFocusDayInline,\r\n        peekNextMonth: _this.props.peekNextMonth,\r\n        showMonthDropdown: _this.props.showMonthDropdown,\r\n        showPreviousMonths: _this.props.showPreviousMonths,\r\n        useShortMonthInDropdown: _this.props.useShortMonthInDropdown,\r\n        showMonthYearDropdown: _this.props.showMonthYearDropdown,\r\n        showWeekNumbers: _this.props.showWeekNumbers,\r\n        showYearDropdown: _this.props.showYearDropdown,\r\n        withPortal: _this.props.withPortal,\r\n        forceShowMonthNavigation: _this.props.forceShowMonthNavigation,\r\n        showDisabledMonthNavigation: _this.props.showDisabledMonthNavigation,\r\n        scrollableYearDropdown: _this.props.scrollableYearDropdown,\r\n        scrollableMonthYearDropdown: _this.props.scrollableMonthYearDropdown,\r\n        todayButton: _this.props.todayButton,\r\n        weekLabel: _this.props.weekLabel,\r\n        outsideClickIgnoreClass: outsideClickIgnoreClass,\r\n        fixedHeight: _this.props.fixedHeight,\r\n        monthsShown: _this.props.monthsShown,\r\n        monthSelectedIn: _this.state.monthSelectedIn,\r\n        onDropdownFocus: _this.handleDropdownFocus,\r\n        onMonthChange: _this.props.onMonthChange,\r\n        onYearChange: _this.props.onYearChange,\r\n        dayClassName: _this.props.dayClassName,\r\n        weekDayClassName: _this.props.weekDayClassName,\r\n        monthClassName: _this.props.monthClassName,\r\n        timeClassName: _this.props.timeClassName,\r\n        showDateSelect: _this.props.showDateSelect,\r\n        showTimeSelect: _this.props.showTimeSelect,\r\n        showTimeSelectOnly: _this.props.showTimeSelectOnly,\r\n        onTimeChange: _this.handleTimeChange,\r\n        timeFormat: _this.props.timeFormat,\r\n        timeIntervals: _this.props.timeIntervals,\r\n        minTime: _this.props.minTime,\r\n        maxTime: _this.props.maxTime,\r\n        excludeTimes: _this.props.excludeTimes,\r\n        filterTime: _this.props.filterTime,\r\n        timeCaption: _this.props.timeCaption,\r\n        className: _this.props.calendarClassName,\r\n        container: _this.props.calendarContainer,\r\n        yearItemNumber: _this.props.yearItemNumber,\r\n        yearDropdownItemNumber: _this.props.yearDropdownItemNumber,\r\n        previousMonthAriaLabel: _this.props.previousMonthAriaLabel,\r\n        previousMonthButtonLabel: _this.props.previousMonthButtonLabel,\r\n        nextMonthAriaLabel: _this.props.nextMonthAriaLabel,\r\n        nextMonthButtonLabel: _this.props.nextMonthButtonLabel,\r\n        previousYearAriaLabel: _this.props.previousYearAriaLabel,\r\n        previousYearButtonLabel: _this.props.previousYearButtonLabel,\r\n        nextYearAriaLabel: _this.props.nextYearAriaLabel,\r\n        nextYearButtonLabel: _this.props.nextYearButtonLabel,\r\n        timeInputLabel: _this.props.timeInputLabel,\r\n        disabledKeyboardNavigation: _this.props.disabledKeyboardNavigation,\r\n        renderCustomHeader: _this.props.renderCustomHeader,\r\n        popperProps: _this.props.popperProps,\r\n        renderDayContents: _this.props.renderDayContents,\r\n        renderMonthContent: _this.props.renderMonthContent,\r\n        renderQuarterContent: _this.props.renderQuarterContent,\r\n        renderYearContent: _this.props.renderYearContent,\r\n        onDayMouseEnter: _this.props.onDayMouseEnter,\r\n        onMonthMouseLeave: _this.props.onMonthMouseLeave,\r\n        onYearMouseEnter: _this.props.onYearMouseEnter,\r\n        onYearMouseLeave: _this.props.onYearMouseLeave,\r\n        selectsDisabledDaysInRange: _this.props.selectsDisabledDaysInRange,\r\n        showTimeInput: _this.props.showTimeInput,\r\n        showMonthYearPicker: _this.props.showMonthYearPicker,\r\n        showFullMonthYearPicker: _this.props.showFullMonthYearPicker,\r\n        showTwoColumnMonthYearPicker: _this.props.showTwoColumnMonthYearPicker,\r\n        showFourColumnMonthYearPicker: _this.props.showFourColumnMonthYearPicker,\r\n        showYearPicker: _this.props.showYearPicker,\r\n        showQuarterYearPicker: _this.props.showQuarterYearPicker,\r\n        showWeekPicker: _this.props.showWeekPicker,\r\n        excludeScrollbar: _this.props.excludeScrollbar,\r\n        handleOnKeyDown: _this.props.onKeyDown,\r\n        handleOnDayKeyDown: _this.onDayKeyDown,\r\n        isInputFocused: _this.state.focused,\r\n        customTimeInput: _this.props.customTimeInput,\r\n        setPreSelection: _this.setPreSelection,\r\n        usePointerEvent: _this.props.usePointerEvent,\r\n        yearClassName: _this.props.yearClassName\r\n      }, _this.props.children);\r\n    });\r\n    _defineProperty(_this, \"renderAriaLiveRegion\", function () {\r\n      var _this$props3 = _this.props,\r\n        dateFormat = _this$props3.dateFormat,\r\n        locale = _this$props3.locale;\r\n      var isContainsTime = _this.props.showTimeInput || _this.props.showTimeSelect;\r\n      var longDateFormat = isContainsTime ? \"PPPPp\" : \"PPPP\";\r\n      var ariaLiveMessage;\r\n      if (_this.props.selectsRange) {\r\n        ariaLiveMessage = \"Selected start date: \".concat(safeDateFormat(_this.props.startDate, {\r\n          dateFormat: longDateFormat,\r\n          locale: locale\r\n        }), \". \").concat(_this.props.endDate ? \"End date: \" + safeDateFormat(_this.props.endDate, {\r\n          dateFormat: longDateFormat,\r\n          locale: locale\r\n        }) : \"\");\r\n      } else {\r\n        if (_this.props.showTimeSelectOnly) {\r\n          ariaLiveMessage = \"Selected time: \".concat(safeDateFormat(_this.props.selected, {\r\n            dateFormat: dateFormat,\r\n            locale: locale\r\n          }));\r\n        } else if (_this.props.showYearPicker) {\r\n          ariaLiveMessage = \"Selected year: \".concat(safeDateFormat(_this.props.selected, {\r\n            dateFormat: \"yyyy\",\r\n            locale: locale\r\n          }));\r\n        } else if (_this.props.showMonthYearPicker) {\r\n          ariaLiveMessage = \"Selected month: \".concat(safeDateFormat(_this.props.selected, {\r\n            dateFormat: \"MMMM yyyy\",\r\n            locale: locale\r\n          }));\r\n        } else if (_this.props.showQuarterYearPicker) {\r\n          ariaLiveMessage = \"Selected quarter: \".concat(safeDateFormat(_this.props.selected, {\r\n            dateFormat: \"yyyy, QQQ\",\r\n            locale: locale\r\n          }));\r\n        } else {\r\n          ariaLiveMessage = \"Selected date: \".concat(safeDateFormat(_this.props.selected, {\r\n            dateFormat: longDateFormat,\r\n            locale: locale\r\n          }));\r\n        }\r\n      }\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\r\n        role: \"alert\",\r\n        \"aria-live\": \"polite\",\r\n        className: \"react-datepicker__aria-live\"\r\n      }, ariaLiveMessage);\r\n    });\r\n    _defineProperty(_this, \"renderDateInput\", function () {\r\n      var _React$cloneElement;\r\n      var className = (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(_this.props.className, _defineProperty({}, outsideClickIgnoreClass, _this.state.open));\r\n      var customInput = _this.props.customInput || /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"input\", {\r\n        type: \"text\"\r\n      });\r\n      var customInputRef = _this.props.customInputRef || \"ref\";\r\n      var inputValue = typeof _this.props.value === \"string\" ? _this.props.value : typeof _this.state.inputValue === \"string\" ? _this.state.inputValue : _this.props.selectsRange ? safeDateRangeFormat(_this.props.startDate, _this.props.endDate, _this.props) : _this.props.selectsMultiple ? safeMultipleDatesFormat(_this.props.selectedDates, _this.props) : safeDateFormat(_this.props.selected, _this.props);\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().cloneElement(customInput, (_React$cloneElement = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_React$cloneElement, customInputRef, function (input) {\r\n        _this.input = input;\r\n      }), \"value\", inputValue), \"onBlur\", _this.handleBlur), \"onChange\", _this.handleChange), \"onClick\", _this.onInputClick), \"onFocus\", _this.handleFocus), \"onKeyDown\", _this.onInputKeyDown), \"id\", _this.props.id), \"name\", _this.props.name), \"form\", _this.props.form), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_React$cloneElement, \"autoFocus\", _this.props.autoFocus), \"placeholder\", _this.props.placeholderText), \"disabled\", _this.props.disabled), \"autoComplete\", _this.props.autoComplete), \"className\", (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(customInput.props.className, className)), \"title\", _this.props.title), \"readOnly\", _this.props.readOnly), \"required\", _this.props.required), \"tabIndex\", _this.props.tabIndex), \"aria-describedby\", _this.props.ariaDescribedBy), _defineProperty(_defineProperty(_defineProperty(_React$cloneElement, \"aria-invalid\", _this.props.ariaInvalid), \"aria-labelledby\", _this.props.ariaLabelledBy), \"aria-required\", _this.props.ariaRequired)));\r\n    });\r\n    _defineProperty(_this, \"renderClearButton\", function () {\r\n      var _this$props4 = _this.props,\r\n        isClearable = _this$props4.isClearable,\r\n        disabled = _this$props4.disabled,\r\n        selected = _this$props4.selected,\r\n        startDate = _this$props4.startDate,\r\n        endDate = _this$props4.endDate,\r\n        clearButtonTitle = _this$props4.clearButtonTitle,\r\n        _this$props4$clearBut = _this$props4.clearButtonClassName,\r\n        clearButtonClassName = _this$props4$clearBut === void 0 ? \"\" : _this$props4$clearBut,\r\n        _this$props4$ariaLabe = _this$props4.ariaLabelClose,\r\n        ariaLabelClose = _this$props4$ariaLabe === void 0 ? \"Close\" : _this$props4$ariaLabe,\r\n        selectedDates = _this$props4.selectedDates;\r\n      if (isClearable && (selected != null || startDate != null || endDate != null || selectedDates !== null && selectedDates !== void 0 && selectedDates.length)) {\r\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\r\n          type: \"button\",\r\n          className: (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__close-icon\", clearButtonClassName, {\r\n            \"react-datepicker__close-icon--disabled\": disabled\r\n          }),\r\n          disabled: disabled,\r\n          \"aria-label\": ariaLabelClose,\r\n          onClick: _this.onClearClick,\r\n          title: clearButtonTitle,\r\n          tabIndex: -1\r\n        });\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n    _this.state = _this.calcInitialState();\r\n    _this.preventFocusTimeout = null;\r\n    return _this;\r\n  }\r\n  _inherits(DatePicker, _React$Component);\r\n  return _createClass(DatePicker, [{\r\n    key: \"componentDidMount\",\r\n    value: function componentDidMount() {\r\n      window.addEventListener(\"scroll\", this.onScroll, true);\r\n    }\r\n  }, {\r\n    key: \"componentDidUpdate\",\r\n    value: function componentDidUpdate(prevProps, prevState) {\r\n      if (prevProps.inline && hasPreSelectionChanged(prevProps.selected, this.props.selected)) {\r\n        this.setPreSelection(this.props.selected);\r\n      }\r\n      if (this.state.monthSelectedIn !== undefined && prevProps.monthsShown !== this.props.monthsShown) {\r\n        this.setState({\r\n          monthSelectedIn: 0\r\n        });\r\n      }\r\n      if (prevProps.highlightDates !== this.props.highlightDates) {\r\n        this.setState({\r\n          highlightDates: getHightLightDaysMap(this.props.highlightDates)\r\n        });\r\n      }\r\n      if (!prevState.focused && !isEqual(prevProps.selected, this.props.selected)) {\r\n        this.setState({\r\n          inputValue: null\r\n        });\r\n      }\r\n      if (prevState.open !== this.state.open) {\r\n        if (prevState.open === false && this.state.open === true) {\r\n          this.props.onCalendarOpen();\r\n        }\r\n        if (prevState.open === true && this.state.open === false) {\r\n          this.props.onCalendarClose();\r\n        }\r\n      }\r\n    }\r\n  }, {\r\n    key: \"componentWillUnmount\",\r\n    value: function componentWillUnmount() {\r\n      this.clearPreventFocusTimeout();\r\n      window.removeEventListener(\"scroll\", this.onScroll, true);\r\n    }\r\n  }, {\r\n    key: \"renderInputContainer\",\r\n    value: function renderInputContainer() {\r\n      var _this$props5 = this.props,\r\n        showIcon = _this$props5.showIcon,\r\n        icon = _this$props5.icon,\r\n        calendarIconClassname = _this$props5.calendarIconClassname,\r\n        toggleCalendarOnIconClick = _this$props5.toggleCalendarOnIconClick;\r\n      var open = this.state.open;\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n        className: \"react-datepicker__input-container\".concat(showIcon ? \" react-datepicker__view-calendar-icon\" : \"\")\r\n      }, showIcon && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(CalendarIcon$1, _extends({\r\n        icon: icon,\r\n        className: \"\".concat(calendarIconClassname, \" \").concat(open && \"react-datepicker-ignore-onclickoutside\")\r\n      }, toggleCalendarOnIconClick ? {\r\n        onClick: this.toggleCalendar\r\n      } : null)), this.state.isRenderAriaLiveMessage && this.renderAriaLiveRegion(), this.renderDateInput(), this.renderClearButton());\r\n    }\r\n  }, {\r\n    key: \"render\",\r\n    value: function render() {\r\n      var calendar = this.renderCalendar();\r\n      if (this.props.inline) return calendar;\r\n      if (this.props.withPortal) {\r\n        var portalContainer = this.state.open ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TabLoop, {\r\n          enableTabLoop: this.props.enableTabLoop\r\n        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\r\n          className: \"react-datepicker__portal\",\r\n          tabIndex: -1,\r\n          onKeyDown: this.onPortalKeyDown\r\n        }, calendar)) : null;\r\n        if (this.state.open && this.props.portalId) {\r\n          portalContainer = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Portal, {\r\n            portalId: this.props.portalId,\r\n            portalHost: this.props.portalHost\r\n          }, portalContainer);\r\n        }\r\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, this.renderInputContainer(), portalContainer);\r\n      }\r\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PopperComponent$1, {\r\n        className: this.props.popperClassName,\r\n        wrapperClassName: this.props.wrapperClassName,\r\n        hidePopper: !this.isCalendarOpen(),\r\n        portalId: this.props.portalId,\r\n        portalHost: this.props.portalHost,\r\n        popperModifiers: this.props.popperModifiers,\r\n        targetComponent: this.renderInputContainer(),\r\n        popperContainer: this.props.popperContainer,\r\n        popperComponent: calendar,\r\n        popperPlacement: this.props.popperPlacement,\r\n        popperProps: this.props.popperProps,\r\n        popperOnKeyDown: this.onPopperKeyDown,\r\n        enableTabLoop: this.props.enableTabLoop,\r\n        showArrow: this.props.showPopperArrow\r\n      });\r\n    }\r\n  }], [{\r\n    key: \"defaultProps\",\r\n    get: function get() {\r\n      return {\r\n        allowSameDay: false,\r\n        dateFormat: \"MM/dd/yyyy\",\r\n        dateFormatCalendar: \"LLLL yyyy\",\r\n        onChange: function onChange() {},\r\n        disabled: false,\r\n        disabledKeyboardNavigation: false,\r\n        dropdownMode: \"scroll\",\r\n        onFocus: function onFocus() {},\r\n        onBlur: function onBlur() {},\r\n        onKeyDown: function onKeyDown() {},\r\n        onInputClick: function onInputClick() {},\r\n        onSelect: function onSelect() {},\r\n        onClickOutside: function onClickOutside() {},\r\n        onMonthChange: function onMonthChange() {},\r\n        onCalendarOpen: function onCalendarOpen() {},\r\n        onCalendarClose: function onCalendarClose() {},\r\n        preventOpenOnFocus: false,\r\n        onYearChange: function onYearChange() {},\r\n        onInputError: function onInputError() {},\r\n        monthsShown: 1,\r\n        readOnly: false,\r\n        withPortal: false,\r\n        selectsDisabledDaysInRange: false,\r\n        shouldCloseOnSelect: true,\r\n        showTimeSelect: false,\r\n        showTimeInput: false,\r\n        showPreviousMonths: false,\r\n        showMonthYearPicker: false,\r\n        showFullMonthYearPicker: false,\r\n        showTwoColumnMonthYearPicker: false,\r\n        showFourColumnMonthYearPicker: false,\r\n        showYearPicker: false,\r\n        showQuarterYearPicker: false,\r\n        showWeekPicker: false,\r\n        strictParsing: false,\r\n        swapRange: false,\r\n        timeIntervals: 30,\r\n        timeCaption: \"Time\",\r\n        previousMonthAriaLabel: \"Previous Month\",\r\n        previousMonthButtonLabel: \"Previous Month\",\r\n        nextMonthAriaLabel: \"Next Month\",\r\n        nextMonthButtonLabel: \"Next Month\",\r\n        previousYearAriaLabel: \"Previous Year\",\r\n        previousYearButtonLabel: \"Previous Year\",\r\n        nextYearAriaLabel: \"Next Year\",\r\n        nextYearButtonLabel: \"Next Year\",\r\n        timeInputLabel: \"Time\",\r\n        enableTabLoop: true,\r\n        yearItemNumber: DEFAULT_YEAR_ITEM_NUMBER,\r\n        focusSelectedMonth: false,\r\n        showPopperArrow: true,\r\n        excludeScrollbar: true,\r\n        customTimeInput: null,\r\n        calendarStartDay: undefined,\r\n        toggleCalendarOnIconClick: false,\r\n        usePointerEvent: false\r\n      };\r\n    }\r\n  }]);\r\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\r\nvar PRESELECT_CHANGE_VIA_INPUT = \"input\";\r\nvar PRESELECT_CHANGE_VIA_NAVIGATE = \"navigate\";\r\n\r\n\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/react-datepicker/dist/es/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/react-datepicker/dist/react-datepicker.css":
/*!******************************************************************!*\
  !*** ../node_modules/react-datepicker/dist/react-datepicker.css ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"aad0c8ad2748\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVwaWNrZXIvZGlzdC9yZWFjdC1kYXRlcGlja2VyLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2VtcGxveWVlLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcGlja2VyL2Rpc3QvcmVhY3QtZGF0ZXBpY2tlci5jc3M/Zjk0YyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcImFhZDBjOGFkMjc0OFwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/react-datepicker/dist/react-datepicker.css\n");

/***/ })

};
;