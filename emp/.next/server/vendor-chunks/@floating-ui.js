"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@floating-ui";
exports.ids = ["vendor-chunks/@floating-ui"];
exports.modules = {

/***/ "(ssr)/../node_modules/@floating-ui/core/dist/floating-ui.core.mjs":
/*!*******************************************************************!*\
  !*** ../node_modules/@floating-ui/core/dist/floating-ui.core.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrow: () => (/* binding */ arrow),\n/* harmony export */   autoPlacement: () => (/* binding */ autoPlacement),\n/* harmony export */   computePosition: () => (/* binding */ computePosition),\n/* harmony export */   detectOverflow: () => (/* binding */ detectOverflow),\n/* harmony export */   flip: () => (/* binding */ flip),\n/* harmony export */   hide: () => (/* binding */ hide),\n/* harmony export */   inline: () => (/* binding */ inline),\n/* harmony export */   limitShift: () => (/* binding */ limitShift),\n/* harmony export */   offset: () => (/* binding */ offset),\n/* harmony export */   rectToClientRect: () => (/* reexport safe */ _floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.rectToClientRect),\n/* harmony export */   shift: () => (/* binding */ shift),\n/* harmony export */   size: () => (/* binding */ size)\n/* harmony export */ });\n/* harmony import */ var _floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @floating-ui/utils */ \"(ssr)/../node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs\");\n\r\n\r\n\r\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\r\n  let {\r\n    reference,\r\n    floating\r\n  } = _ref;\r\n  const sideAxis = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSideAxis)(placement);\r\n  const alignmentAxis = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignmentAxis)(placement);\r\n  const alignLength = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAxisLength)(alignmentAxis);\r\n  const side = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(placement);\r\n  const isVertical = sideAxis === 'y';\r\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\r\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\r\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\r\n  let coords;\r\n  switch (side) {\r\n    case 'top':\r\n      coords = {\r\n        x: commonX,\r\n        y: reference.y - floating.height\r\n      };\r\n      break;\r\n    case 'bottom':\r\n      coords = {\r\n        x: commonX,\r\n        y: reference.y + reference.height\r\n      };\r\n      break;\r\n    case 'right':\r\n      coords = {\r\n        x: reference.x + reference.width,\r\n        y: commonY\r\n      };\r\n      break;\r\n    case 'left':\r\n      coords = {\r\n        x: reference.x - floating.width,\r\n        y: commonY\r\n      };\r\n      break;\r\n    default:\r\n      coords = {\r\n        x: reference.x,\r\n        y: reference.y\r\n      };\r\n  }\r\n  switch ((0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignment)(placement)) {\r\n    case 'start':\r\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\r\n      break;\r\n    case 'end':\r\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\r\n      break;\r\n  }\r\n  return coords;\r\n}\r\n\r\n/**\r\n * Computes the `x` and `y` coordinates that will place the floating element\r\n * next to a given reference element.\r\n *\r\n * This export does not have any `platform` interface logic. You will need to\r\n * write one for the platform you are using Floating UI with.\r\n */\r\nconst computePosition = async (reference, floating, config) => {\r\n  const {\r\n    placement = 'bottom',\r\n    strategy = 'absolute',\r\n    middleware = [],\r\n    platform\r\n  } = config;\r\n  const validMiddleware = middleware.filter(Boolean);\r\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\r\n  let rects = await platform.getElementRects({\r\n    reference,\r\n    floating,\r\n    strategy\r\n  });\r\n  let {\r\n    x,\r\n    y\r\n  } = computeCoordsFromPlacement(rects, placement, rtl);\r\n  let statefulPlacement = placement;\r\n  let middlewareData = {};\r\n  let resetCount = 0;\r\n  for (let i = 0; i < validMiddleware.length; i++) {\r\n    const {\r\n      name,\r\n      fn\r\n    } = validMiddleware[i];\r\n    const {\r\n      x: nextX,\r\n      y: nextY,\r\n      data,\r\n      reset\r\n    } = await fn({\r\n      x,\r\n      y,\r\n      initialPlacement: placement,\r\n      placement: statefulPlacement,\r\n      strategy,\r\n      middlewareData,\r\n      rects,\r\n      platform,\r\n      elements: {\r\n        reference,\r\n        floating\r\n      }\r\n    });\r\n    x = nextX != null ? nextX : x;\r\n    y = nextY != null ? nextY : y;\r\n    middlewareData = {\r\n      ...middlewareData,\r\n      [name]: {\r\n        ...middlewareData[name],\r\n        ...data\r\n      }\r\n    };\r\n    if (reset && resetCount <= 50) {\r\n      resetCount++;\r\n      if (typeof reset === 'object') {\r\n        if (reset.placement) {\r\n          statefulPlacement = reset.placement;\r\n        }\r\n        if (reset.rects) {\r\n          rects = reset.rects === true ? await platform.getElementRects({\r\n            reference,\r\n            floating,\r\n            strategy\r\n          }) : reset.rects;\r\n        }\r\n        ({\r\n          x,\r\n          y\r\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\r\n      }\r\n      i = -1;\r\n    }\r\n  }\r\n  return {\r\n    x,\r\n    y,\r\n    placement: statefulPlacement,\r\n    strategy,\r\n    middlewareData\r\n  };\r\n};\r\n\r\n/**\r\n * Resolves with an object of overflow side offsets that determine how much the\r\n * element is overflowing a given clipping boundary on each side.\r\n * - positive = overflowing the boundary by that number of pixels\r\n * - negative = how many pixels left before it will overflow\r\n * - 0 = lies flush with the boundary\r\n * @see https://floating-ui.com/docs/detectOverflow\r\n */\r\nasync function detectOverflow(state, options) {\r\n  var _await$platform$isEle;\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  const {\r\n    x,\r\n    y,\r\n    platform,\r\n    rects,\r\n    elements,\r\n    strategy\r\n  } = state;\r\n  const {\r\n    boundary = 'clippingAncestors',\r\n    rootBoundary = 'viewport',\r\n    elementContext = 'floating',\r\n    altBoundary = false,\r\n    padding = 0\r\n  } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state);\r\n  const paddingObject = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getPaddingObject)(padding);\r\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\r\n  const element = elements[altBoundary ? altContext : elementContext];\r\n  const clippingClientRect = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.rectToClientRect)(await platform.getClippingRect({\r\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\r\n    boundary,\r\n    rootBoundary,\r\n    strategy\r\n  }));\r\n  const rect = elementContext === 'floating' ? {\r\n    x,\r\n    y,\r\n    width: rects.floating.width,\r\n    height: rects.floating.height\r\n  } : rects.reference;\r\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\r\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\r\n    x: 1,\r\n    y: 1\r\n  } : {\r\n    x: 1,\r\n    y: 1\r\n  };\r\n  const elementClientRect = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.rectToClientRect)(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\r\n    elements,\r\n    rect,\r\n    offsetParent,\r\n    strategy\r\n  }) : rect);\r\n  return {\r\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\r\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\r\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\r\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\r\n  };\r\n}\r\n\r\n/**\r\n * Provides data to position an inner element of the floating element so that it\r\n * appears centered to the reference element.\r\n * @see https://floating-ui.com/docs/arrow\r\n */\r\nconst arrow = options => ({\r\n  name: 'arrow',\r\n  options,\r\n  async fn(state) {\r\n    const {\r\n      x,\r\n      y,\r\n      placement,\r\n      rects,\r\n      platform,\r\n      elements,\r\n      middlewareData\r\n    } = state;\r\n    // Since `element` is required, we don't Partial<> the type.\r\n    const {\r\n      element,\r\n      padding = 0\r\n    } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state) || {};\r\n    if (element == null) {\r\n      return {};\r\n    }\r\n    const paddingObject = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getPaddingObject)(padding);\r\n    const coords = {\r\n      x,\r\n      y\r\n    };\r\n    const axis = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignmentAxis)(placement);\r\n    const length = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAxisLength)(axis);\r\n    const arrowDimensions = await platform.getDimensions(element);\r\n    const isYAxis = axis === 'y';\r\n    const minProp = isYAxis ? 'top' : 'left';\r\n    const maxProp = isYAxis ? 'bottom' : 'right';\r\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\r\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\r\n    const startDiff = coords[axis] - rects.reference[axis];\r\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\r\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\r\n\r\n    // DOM platform can return `window` as the `offsetParent`.\r\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\r\n      clientSize = elements.floating[clientProp] || rects.floating[length];\r\n    }\r\n    const centerToReference = endDiff / 2 - startDiff / 2;\r\n\r\n    // If the padding is large enough that it causes the arrow to no longer be\r\n    // centered, modify the padding so that it is centered.\r\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\r\n    const minPadding = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.min)(paddingObject[minProp], largestPossiblePadding);\r\n    const maxPadding = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.min)(paddingObject[maxProp], largestPossiblePadding);\r\n\r\n    // Make sure the arrow doesn't overflow the floating element if the center\r\n    // point is outside the floating element's bounds.\r\n    const min$1 = minPadding;\r\n    const max = clientSize - arrowDimensions[length] - maxPadding;\r\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\r\n    const offset = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.clamp)(min$1, center, max);\r\n\r\n    // If the reference is small enough that the arrow's padding causes it to\r\n    // to point to nothing for an aligned placement, adjust the offset of the\r\n    // floating element itself. To ensure `shift()` continues to take action,\r\n    // a single reset is performed when this is true.\r\n    const shouldAddOffset = !middlewareData.arrow && (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignment)(placement) != null && center !== offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\r\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;\r\n    return {\r\n      [axis]: coords[axis] + alignmentOffset,\r\n      data: {\r\n        [axis]: offset,\r\n        centerOffset: center - offset - alignmentOffset,\r\n        ...(shouldAddOffset && {\r\n          alignmentOffset\r\n        })\r\n      },\r\n      reset: shouldAddOffset\r\n    };\r\n  }\r\n});\r\n\r\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\r\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignment)(placement) === alignment), ...allowedPlacements.filter(placement => (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignment)(placement) !== alignment)] : allowedPlacements.filter(placement => (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(placement) === placement);\r\n  return allowedPlacementsSortedByAlignment.filter(placement => {\r\n    if (alignment) {\r\n      return (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignment)(placement) === alignment || (autoAlignment ? (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getOppositeAlignmentPlacement)(placement) !== placement : false);\r\n    }\r\n    return true;\r\n  });\r\n}\r\n/**\r\n * Optimizes the visibility of the floating element by choosing the placement\r\n * that has the most space available automatically, without needing to specify a\r\n * preferred placement. Alternative to `flip`.\r\n * @see https://floating-ui.com/docs/autoPlacement\r\n */\r\nconst autoPlacement = function (options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  return {\r\n    name: 'autoPlacement',\r\n    options,\r\n    async fn(state) {\r\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\r\n      const {\r\n        rects,\r\n        middlewareData,\r\n        placement,\r\n        platform,\r\n        elements\r\n      } = state;\r\n      const {\r\n        crossAxis = false,\r\n        alignment,\r\n        allowedPlacements = _floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.placements,\r\n        autoAlignment = true,\r\n        ...detectOverflowOptions\r\n      } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state);\r\n      const placements$1 = alignment !== undefined || allowedPlacements === _floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\r\n      const overflow = await detectOverflow(state, detectOverflowOptions);\r\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\r\n      const currentPlacement = placements$1[currentIndex];\r\n      if (currentPlacement == null) {\r\n        return {};\r\n      }\r\n      const alignmentSides = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignmentSides)(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\r\n\r\n      // Make `computeCoords` start from the right place.\r\n      if (placement !== currentPlacement) {\r\n        return {\r\n          reset: {\r\n            placement: placements$1[0]\r\n          }\r\n        };\r\n      }\r\n      const currentOverflows = [overflow[(0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\r\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\r\n        placement: currentPlacement,\r\n        overflows: currentOverflows\r\n      }];\r\n      const nextPlacement = placements$1[currentIndex + 1];\r\n\r\n      // There are more placements to check.\r\n      if (nextPlacement) {\r\n        return {\r\n          data: {\r\n            index: currentIndex + 1,\r\n            overflows: allOverflows\r\n          },\r\n          reset: {\r\n            placement: nextPlacement\r\n          }\r\n        };\r\n      }\r\n      const placementsSortedByMostSpace = allOverflows.map(d => {\r\n        const alignment = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignment)(d.placement);\r\n        return [d.placement, alignment && crossAxis ?\r\n        // Check along the mainAxis and main crossAxis side.\r\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\r\n        // Check only the mainAxis.\r\n        d.overflows[0], d.overflows];\r\n      }).sort((a, b) => a[1] - b[1]);\r\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\r\n      // Aligned placements should not check their opposite crossAxis\r\n      // side.\r\n      (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignment)(d[0]) ? 2 : 3).every(v => v <= 0));\r\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\r\n      if (resetPlacement !== placement) {\r\n        return {\r\n          data: {\r\n            index: currentIndex + 1,\r\n            overflows: allOverflows\r\n          },\r\n          reset: {\r\n            placement: resetPlacement\r\n          }\r\n        };\r\n      }\r\n      return {};\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Optimizes the visibility of the floating element by flipping the `placement`\r\n * in order to keep it in view when the preferred placement(s) will overflow the\r\n * clipping boundary. Alternative to `autoPlacement`.\r\n * @see https://floating-ui.com/docs/flip\r\n */\r\nconst flip = function (options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  return {\r\n    name: 'flip',\r\n    options,\r\n    async fn(state) {\r\n      var _middlewareData$arrow, _middlewareData$flip;\r\n      const {\r\n        placement,\r\n        middlewareData,\r\n        rects,\r\n        initialPlacement,\r\n        platform,\r\n        elements\r\n      } = state;\r\n      const {\r\n        mainAxis: checkMainAxis = true,\r\n        crossAxis: checkCrossAxis = true,\r\n        fallbackPlacements: specifiedFallbackPlacements,\r\n        fallbackStrategy = 'bestFit',\r\n        fallbackAxisSideDirection = 'none',\r\n        flipAlignment = true,\r\n        ...detectOverflowOptions\r\n      } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state);\r\n\r\n      // If a reset by the arrow was caused due to an alignment offset being\r\n      // added, we should skip any logic now since `flip()` has already done its\r\n      // work.\r\n      // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643\r\n      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\r\n        return {};\r\n      }\r\n      const side = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(placement);\r\n      const isBasePlacement = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(initialPlacement) === initialPlacement;\r\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\r\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [(0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getOppositePlacement)(initialPlacement)] : (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getExpandedPlacements)(initialPlacement));\r\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\r\n        fallbackPlacements.push(...(0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getOppositeAxisPlacements)(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\r\n      }\r\n      const placements = [initialPlacement, ...fallbackPlacements];\r\n      const overflow = await detectOverflow(state, detectOverflowOptions);\r\n      const overflows = [];\r\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\r\n      if (checkMainAxis) {\r\n        overflows.push(overflow[side]);\r\n      }\r\n      if (checkCrossAxis) {\r\n        const sides = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignmentSides)(placement, rects, rtl);\r\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\r\n      }\r\n      overflowsData = [...overflowsData, {\r\n        placement,\r\n        overflows\r\n      }];\r\n\r\n      // One or more sides is overflowing.\r\n      if (!overflows.every(side => side <= 0)) {\r\n        var _middlewareData$flip2, _overflowsData$filter;\r\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\r\n        const nextPlacement = placements[nextIndex];\r\n        if (nextPlacement) {\r\n          // Try next placement and re-run the lifecycle.\r\n          return {\r\n            data: {\r\n              index: nextIndex,\r\n              overflows: overflowsData\r\n            },\r\n            reset: {\r\n              placement: nextPlacement\r\n            }\r\n          };\r\n        }\r\n\r\n        // First, find the candidates that fit on the mainAxis side of overflow,\r\n        // then find the placement that fits the best on the main crossAxis side.\r\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\r\n\r\n        // Otherwise fallback.\r\n        if (!resetPlacement) {\r\n          switch (fallbackStrategy) {\r\n            case 'bestFit':\r\n              {\r\n                var _overflowsData$map$so;\r\n                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\r\n                if (placement) {\r\n                  resetPlacement = placement;\r\n                }\r\n                break;\r\n              }\r\n            case 'initialPlacement':\r\n              resetPlacement = initialPlacement;\r\n              break;\r\n          }\r\n        }\r\n        if (placement !== resetPlacement) {\r\n          return {\r\n            reset: {\r\n              placement: resetPlacement\r\n            }\r\n          };\r\n        }\r\n      }\r\n      return {};\r\n    }\r\n  };\r\n};\r\n\r\nfunction getSideOffsets(overflow, rect) {\r\n  return {\r\n    top: overflow.top - rect.height,\r\n    right: overflow.right - rect.width,\r\n    bottom: overflow.bottom - rect.height,\r\n    left: overflow.left - rect.width\r\n  };\r\n}\r\nfunction isAnySideFullyClipped(overflow) {\r\n  return _floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.sides.some(side => overflow[side] >= 0);\r\n}\r\n/**\r\n * Provides data to hide the floating element in applicable situations, such as\r\n * when it is not in the same clipping context as the reference element.\r\n * @see https://floating-ui.com/docs/hide\r\n */\r\nconst hide = function (options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  return {\r\n    name: 'hide',\r\n    options,\r\n    async fn(state) {\r\n      const {\r\n        rects\r\n      } = state;\r\n      const {\r\n        strategy = 'referenceHidden',\r\n        ...detectOverflowOptions\r\n      } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state);\r\n      switch (strategy) {\r\n        case 'referenceHidden':\r\n          {\r\n            const overflow = await detectOverflow(state, {\r\n              ...detectOverflowOptions,\r\n              elementContext: 'reference'\r\n            });\r\n            const offsets = getSideOffsets(overflow, rects.reference);\r\n            return {\r\n              data: {\r\n                referenceHiddenOffsets: offsets,\r\n                referenceHidden: isAnySideFullyClipped(offsets)\r\n              }\r\n            };\r\n          }\r\n        case 'escaped':\r\n          {\r\n            const overflow = await detectOverflow(state, {\r\n              ...detectOverflowOptions,\r\n              altBoundary: true\r\n            });\r\n            const offsets = getSideOffsets(overflow, rects.floating);\r\n            return {\r\n              data: {\r\n                escapedOffsets: offsets,\r\n                escaped: isAnySideFullyClipped(offsets)\r\n              }\r\n            };\r\n          }\r\n        default:\r\n          {\r\n            return {};\r\n          }\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nfunction getBoundingRect(rects) {\r\n  const minX = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.min)(...rects.map(rect => rect.left));\r\n  const minY = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.min)(...rects.map(rect => rect.top));\r\n  const maxX = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.max)(...rects.map(rect => rect.right));\r\n  const maxY = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.max)(...rects.map(rect => rect.bottom));\r\n  return {\r\n    x: minX,\r\n    y: minY,\r\n    width: maxX - minX,\r\n    height: maxY - minY\r\n  };\r\n}\r\nfunction getRectsByLine(rects) {\r\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\r\n  const groups = [];\r\n  let prevRect = null;\r\n  for (let i = 0; i < sortedRects.length; i++) {\r\n    const rect = sortedRects[i];\r\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\r\n      groups.push([rect]);\r\n    } else {\r\n      groups[groups.length - 1].push(rect);\r\n    }\r\n    prevRect = rect;\r\n  }\r\n  return groups.map(rect => (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.rectToClientRect)(getBoundingRect(rect)));\r\n}\r\n/**\r\n * Provides improved positioning for inline reference elements that can span\r\n * over multiple lines, such as hyperlinks or range selections.\r\n * @see https://floating-ui.com/docs/inline\r\n */\r\nconst inline = function (options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  return {\r\n    name: 'inline',\r\n    options,\r\n    async fn(state) {\r\n      const {\r\n        placement,\r\n        elements,\r\n        rects,\r\n        platform,\r\n        strategy\r\n      } = state;\r\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\r\n      // ClientRect's bounds, despite the event listener being triggered. A\r\n      // padding of 2 seems to handle this issue.\r\n      const {\r\n        padding = 2,\r\n        x,\r\n        y\r\n      } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state);\r\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\r\n      const clientRects = getRectsByLine(nativeClientRects);\r\n      const fallback = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.rectToClientRect)(getBoundingRect(nativeClientRects));\r\n      const paddingObject = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getPaddingObject)(padding);\r\n      function getBoundingClientRect() {\r\n        // There are two rects and they are disjoined.\r\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\r\n          // Find the first rect in which the point is fully inside.\r\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\r\n        }\r\n\r\n        // There are 2 or more connected rects.\r\n        if (clientRects.length >= 2) {\r\n          if ((0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSideAxis)(placement) === 'y') {\r\n            const firstRect = clientRects[0];\r\n            const lastRect = clientRects[clientRects.length - 1];\r\n            const isTop = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(placement) === 'top';\r\n            const top = firstRect.top;\r\n            const bottom = lastRect.bottom;\r\n            const left = isTop ? firstRect.left : lastRect.left;\r\n            const right = isTop ? firstRect.right : lastRect.right;\r\n            const width = right - left;\r\n            const height = bottom - top;\r\n            return {\r\n              top,\r\n              bottom,\r\n              left,\r\n              right,\r\n              width,\r\n              height,\r\n              x: left,\r\n              y: top\r\n            };\r\n          }\r\n          const isLeftSide = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(placement) === 'left';\r\n          const maxRight = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.max)(...clientRects.map(rect => rect.right));\r\n          const minLeft = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.min)(...clientRects.map(rect => rect.left));\r\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\r\n          const top = measureRects[0].top;\r\n          const bottom = measureRects[measureRects.length - 1].bottom;\r\n          const left = minLeft;\r\n          const right = maxRight;\r\n          const width = right - left;\r\n          const height = bottom - top;\r\n          return {\r\n            top,\r\n            bottom,\r\n            left,\r\n            right,\r\n            width,\r\n            height,\r\n            x: left,\r\n            y: top\r\n          };\r\n        }\r\n        return fallback;\r\n      }\r\n      const resetRects = await platform.getElementRects({\r\n        reference: {\r\n          getBoundingClientRect\r\n        },\r\n        floating: elements.floating,\r\n        strategy\r\n      });\r\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\r\n        return {\r\n          reset: {\r\n            rects: resetRects\r\n          }\r\n        };\r\n      }\r\n      return {};\r\n    }\r\n  };\r\n};\r\n\r\n// For type backwards-compatibility, the `OffsetOptions` type was also\r\n// Derivable.\r\n\r\nasync function convertValueToCoords(state, options) {\r\n  const {\r\n    placement,\r\n    platform,\r\n    elements\r\n  } = state;\r\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\r\n  const side = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(placement);\r\n  const alignment = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignment)(placement);\r\n  const isVertical = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSideAxis)(placement) === 'y';\r\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\r\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\r\n  const rawValue = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state);\r\n\r\n  // eslint-disable-next-line prefer-const\r\n  let {\r\n    mainAxis,\r\n    crossAxis,\r\n    alignmentAxis\r\n  } = typeof rawValue === 'number' ? {\r\n    mainAxis: rawValue,\r\n    crossAxis: 0,\r\n    alignmentAxis: null\r\n  } : {\r\n    mainAxis: 0,\r\n    crossAxis: 0,\r\n    alignmentAxis: null,\r\n    ...rawValue\r\n  };\r\n  if (alignment && typeof alignmentAxis === 'number') {\r\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\r\n  }\r\n  return isVertical ? {\r\n    x: crossAxis * crossAxisMulti,\r\n    y: mainAxis * mainAxisMulti\r\n  } : {\r\n    x: mainAxis * mainAxisMulti,\r\n    y: crossAxis * crossAxisMulti\r\n  };\r\n}\r\n\r\n/**\r\n * Modifies the placement by translating the floating element along the\r\n * specified axes.\r\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\r\n * object may be passed.\r\n * @see https://floating-ui.com/docs/offset\r\n */\r\nconst offset = function (options) {\r\n  if (options === void 0) {\r\n    options = 0;\r\n  }\r\n  return {\r\n    name: 'offset',\r\n    options,\r\n    async fn(state) {\r\n      var _middlewareData$offse, _middlewareData$arrow;\r\n      const {\r\n        x,\r\n        y,\r\n        placement,\r\n        middlewareData\r\n      } = state;\r\n      const diffCoords = await convertValueToCoords(state, options);\r\n\r\n      // If the placement is the same and the arrow caused an alignment offset\r\n      // then we don't need to change the positioning coordinates.\r\n      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\r\n        return {};\r\n      }\r\n      return {\r\n        x: x + diffCoords.x,\r\n        y: y + diffCoords.y,\r\n        data: {\r\n          ...diffCoords,\r\n          placement\r\n        }\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Optimizes the visibility of the floating element by shifting it in order to\r\n * keep it in view when it will overflow the clipping boundary.\r\n * @see https://floating-ui.com/docs/shift\r\n */\r\nconst shift = function (options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  return {\r\n    name: 'shift',\r\n    options,\r\n    async fn(state) {\r\n      const {\r\n        x,\r\n        y,\r\n        placement\r\n      } = state;\r\n      const {\r\n        mainAxis: checkMainAxis = true,\r\n        crossAxis: checkCrossAxis = false,\r\n        limiter = {\r\n          fn: _ref => {\r\n            let {\r\n              x,\r\n              y\r\n            } = _ref;\r\n            return {\r\n              x,\r\n              y\r\n            };\r\n          }\r\n        },\r\n        ...detectOverflowOptions\r\n      } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state);\r\n      const coords = {\r\n        x,\r\n        y\r\n      };\r\n      const overflow = await detectOverflow(state, detectOverflowOptions);\r\n      const crossAxis = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSideAxis)((0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(placement));\r\n      const mainAxis = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getOppositeAxis)(crossAxis);\r\n      let mainAxisCoord = coords[mainAxis];\r\n      let crossAxisCoord = coords[crossAxis];\r\n      if (checkMainAxis) {\r\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\r\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\r\n        const min = mainAxisCoord + overflow[minSide];\r\n        const max = mainAxisCoord - overflow[maxSide];\r\n        mainAxisCoord = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.clamp)(min, mainAxisCoord, max);\r\n      }\r\n      if (checkCrossAxis) {\r\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\r\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\r\n        const min = crossAxisCoord + overflow[minSide];\r\n        const max = crossAxisCoord - overflow[maxSide];\r\n        crossAxisCoord = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.clamp)(min, crossAxisCoord, max);\r\n      }\r\n      const limitedCoords = limiter.fn({\r\n        ...state,\r\n        [mainAxis]: mainAxisCoord,\r\n        [crossAxis]: crossAxisCoord\r\n      });\r\n      return {\r\n        ...limitedCoords,\r\n        data: {\r\n          x: limitedCoords.x - x,\r\n          y: limitedCoords.y - y\r\n        }\r\n      };\r\n    }\r\n  };\r\n};\r\n/**\r\n * Built-in `limiter` that will stop `shift()` at a certain point.\r\n */\r\nconst limitShift = function (options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  return {\r\n    options,\r\n    fn(state) {\r\n      const {\r\n        x,\r\n        y,\r\n        placement,\r\n        rects,\r\n        middlewareData\r\n      } = state;\r\n      const {\r\n        offset = 0,\r\n        mainAxis: checkMainAxis = true,\r\n        crossAxis: checkCrossAxis = true\r\n      } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state);\r\n      const coords = {\r\n        x,\r\n        y\r\n      };\r\n      const crossAxis = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSideAxis)(placement);\r\n      const mainAxis = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getOppositeAxis)(crossAxis);\r\n      let mainAxisCoord = coords[mainAxis];\r\n      let crossAxisCoord = coords[crossAxis];\r\n      const rawOffset = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(offset, state);\r\n      const computedOffset = typeof rawOffset === 'number' ? {\r\n        mainAxis: rawOffset,\r\n        crossAxis: 0\r\n      } : {\r\n        mainAxis: 0,\r\n        crossAxis: 0,\r\n        ...rawOffset\r\n      };\r\n      if (checkMainAxis) {\r\n        const len = mainAxis === 'y' ? 'height' : 'width';\r\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\r\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\r\n        if (mainAxisCoord < limitMin) {\r\n          mainAxisCoord = limitMin;\r\n        } else if (mainAxisCoord > limitMax) {\r\n          mainAxisCoord = limitMax;\r\n        }\r\n      }\r\n      if (checkCrossAxis) {\r\n        var _middlewareData$offse, _middlewareData$offse2;\r\n        const len = mainAxis === 'y' ? 'width' : 'height';\r\n        const isOriginSide = ['top', 'left'].includes((0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(placement));\r\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\r\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\r\n        if (crossAxisCoord < limitMin) {\r\n          crossAxisCoord = limitMin;\r\n        } else if (crossAxisCoord > limitMax) {\r\n          crossAxisCoord = limitMax;\r\n        }\r\n      }\r\n      return {\r\n        [mainAxis]: mainAxisCoord,\r\n        [crossAxis]: crossAxisCoord\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Provides data that allows you to change the size of the floating element —\r\n * for instance, prevent it from overflowing the clipping boundary or match the\r\n * width of the reference element.\r\n * @see https://floating-ui.com/docs/size\r\n */\r\nconst size = function (options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  return {\r\n    name: 'size',\r\n    options,\r\n    async fn(state) {\r\n      const {\r\n        placement,\r\n        rects,\r\n        platform,\r\n        elements\r\n      } = state;\r\n      const {\r\n        apply = () => {},\r\n        ...detectOverflowOptions\r\n      } = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.evaluate)(options, state);\r\n      const overflow = await detectOverflow(state, detectOverflowOptions);\r\n      const side = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSide)(placement);\r\n      const alignment = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getAlignment)(placement);\r\n      const isYAxis = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.getSideAxis)(placement) === 'y';\r\n      const {\r\n        width,\r\n        height\r\n      } = rects.floating;\r\n      let heightSide;\r\n      let widthSide;\r\n      if (side === 'top' || side === 'bottom') {\r\n        heightSide = side;\r\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\r\n      } else {\r\n        widthSide = side;\r\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\r\n      }\r\n      const overflowAvailableHeight = height - overflow[heightSide];\r\n      const overflowAvailableWidth = width - overflow[widthSide];\r\n      const noShift = !state.middlewareData.shift;\r\n      let availableHeight = overflowAvailableHeight;\r\n      let availableWidth = overflowAvailableWidth;\r\n      if (isYAxis) {\r\n        const maximumClippingWidth = width - overflow.left - overflow.right;\r\n        availableWidth = alignment || noShift ? (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.min)(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;\r\n      } else {\r\n        const maximumClippingHeight = height - overflow.top - overflow.bottom;\r\n        availableHeight = alignment || noShift ? (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.min)(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;\r\n      }\r\n      if (noShift && !alignment) {\r\n        const xMin = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.max)(overflow.left, 0);\r\n        const xMax = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.max)(overflow.right, 0);\r\n        const yMin = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.max)(overflow.top, 0);\r\n        const yMax = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.max)(overflow.bottom, 0);\r\n        if (isYAxis) {\r\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.max)(overflow.left, overflow.right));\r\n        } else {\r\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__.max)(overflow.top, overflow.bottom));\r\n        }\r\n      }\r\n      await apply({\r\n        ...state,\r\n        availableWidth,\r\n        availableHeight\r\n      });\r\n      const nextDimensions = await platform.getDimensions(elements.floating);\r\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\r\n        return {\r\n          reset: {\r\n            rects: true\r\n          }\r\n        };\r\n      }\r\n      return {};\r\n    }\r\n  };\r\n};\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@floating-ui/core/dist/floating-ui.core.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs":
/*!*****************************************************************!*\
  !*** ../node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrow: () => (/* binding */ arrow),\n/* harmony export */   autoPlacement: () => (/* binding */ autoPlacement),\n/* harmony export */   autoUpdate: () => (/* binding */ autoUpdate),\n/* harmony export */   computePosition: () => (/* binding */ computePosition),\n/* harmony export */   detectOverflow: () => (/* binding */ detectOverflow),\n/* harmony export */   flip: () => (/* binding */ flip),\n/* harmony export */   getOverflowAncestors: () => (/* reexport safe */ _floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getOverflowAncestors),\n/* harmony export */   hide: () => (/* binding */ hide),\n/* harmony export */   inline: () => (/* binding */ inline),\n/* harmony export */   limitShift: () => (/* binding */ limitShift),\n/* harmony export */   offset: () => (/* binding */ offset),\n/* harmony export */   platform: () => (/* binding */ platform),\n/* harmony export */   shift: () => (/* binding */ shift),\n/* harmony export */   size: () => (/* binding */ size)\n/* harmony export */ });\n/* harmony import */ var _floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @floating-ui/utils */ \"(ssr)/../node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs\");\n/* harmony import */ var _floating_ui_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @floating-ui/core */ \"(ssr)/../node_modules/@floating-ui/core/dist/floating-ui.core.mjs\");\n/* harmony import */ var _floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @floating-ui/utils/dom */ \"(ssr)/../node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs\");\n\r\n\r\n\r\n\r\n\r\nfunction getCssDimensions(element) {\r\n  const css = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getComputedStyle)(element);\r\n  // In testing environments, the `width` and `height` properties are empty\r\n  // strings for SVG elements, returning NaN. Fallback to `0` in this case.\r\n  let width = parseFloat(css.width) || 0;\r\n  let height = parseFloat(css.height) || 0;\r\n  const hasOffset = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element);\r\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\r\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\r\n  const shouldFallback = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.round)(width) !== offsetWidth || (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.round)(height) !== offsetHeight;\r\n  if (shouldFallback) {\r\n    width = offsetWidth;\r\n    height = offsetHeight;\r\n  }\r\n  return {\r\n    width,\r\n    height,\r\n    $: shouldFallback\r\n  };\r\n}\r\n\r\nfunction unwrapElement(element) {\r\n  return !(0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isElement)(element) ? element.contextElement : element;\r\n}\r\n\r\nfunction getScale(element) {\r\n  const domElement = unwrapElement(element);\r\n  if (!(0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(domElement)) {\r\n    return (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.createCoords)(1);\r\n  }\r\n  const rect = domElement.getBoundingClientRect();\r\n  const {\r\n    width,\r\n    height,\r\n    $\r\n  } = getCssDimensions(domElement);\r\n  let x = ($ ? (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.round)(rect.width) : rect.width) / width;\r\n  let y = ($ ? (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.round)(rect.height) : rect.height) / height;\r\n\r\n  // 0, NaN, or Infinity should always fallback to 1.\r\n\r\n  if (!x || !Number.isFinite(x)) {\r\n    x = 1;\r\n  }\r\n  if (!y || !Number.isFinite(y)) {\r\n    y = 1;\r\n  }\r\n  return {\r\n    x,\r\n    y\r\n  };\r\n}\r\n\r\nconst noOffsets = /*#__PURE__*/(0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.createCoords)(0);\r\nfunction getVisualOffsets(element) {\r\n  const win = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getWindow)(element);\r\n  if (!(0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isWebKit)() || !win.visualViewport) {\r\n    return noOffsets;\r\n  }\r\n  return {\r\n    x: win.visualViewport.offsetLeft,\r\n    y: win.visualViewport.offsetTop\r\n  };\r\n}\r\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\r\n  if (isFixed === void 0) {\r\n    isFixed = false;\r\n  }\r\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getWindow)(element)) {\r\n    return false;\r\n  }\r\n  return isFixed;\r\n}\r\n\r\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\r\n  if (includeScale === void 0) {\r\n    includeScale = false;\r\n  }\r\n  if (isFixedStrategy === void 0) {\r\n    isFixedStrategy = false;\r\n  }\r\n  const clientRect = element.getBoundingClientRect();\r\n  const domElement = unwrapElement(element);\r\n  let scale = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.createCoords)(1);\r\n  if (includeScale) {\r\n    if (offsetParent) {\r\n      if ((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isElement)(offsetParent)) {\r\n        scale = getScale(offsetParent);\r\n      }\r\n    } else {\r\n      scale = getScale(element);\r\n    }\r\n  }\r\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.createCoords)(0);\r\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\r\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\r\n  let width = clientRect.width / scale.x;\r\n  let height = clientRect.height / scale.y;\r\n  if (domElement) {\r\n    const win = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getWindow)(domElement);\r\n    const offsetWin = offsetParent && (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isElement)(offsetParent) ? (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getWindow)(offsetParent) : offsetParent;\r\n    let currentWin = win;\r\n    let currentIFrame = currentWin.frameElement;\r\n    while (currentIFrame && offsetParent && offsetWin !== currentWin) {\r\n      const iframeScale = getScale(currentIFrame);\r\n      const iframeRect = currentIFrame.getBoundingClientRect();\r\n      const css = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getComputedStyle)(currentIFrame);\r\n      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\r\n      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\r\n      x *= iframeScale.x;\r\n      y *= iframeScale.y;\r\n      width *= iframeScale.x;\r\n      height *= iframeScale.y;\r\n      x += left;\r\n      y += top;\r\n      currentWin = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getWindow)(currentIFrame);\r\n      currentIFrame = currentWin.frameElement;\r\n    }\r\n  }\r\n  return (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.rectToClientRect)({\r\n    width,\r\n    height,\r\n    x,\r\n    y\r\n  });\r\n}\r\n\r\nconst topLayerSelectors = [':popover-open', ':modal'];\r\nfunction isTopLayer(floating) {\r\n  return topLayerSelectors.some(selector => {\r\n    try {\r\n      return floating.matches(selector);\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  });\r\n}\r\n\r\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\r\n  let {\r\n    elements,\r\n    rect,\r\n    offsetParent,\r\n    strategy\r\n  } = _ref;\r\n  const isFixed = strategy === 'fixed';\r\n  const documentElement = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getDocumentElement)(offsetParent);\r\n  const topLayer = elements ? isTopLayer(elements.floating) : false;\r\n  if (offsetParent === documentElement || topLayer && isFixed) {\r\n    return rect;\r\n  }\r\n  let scroll = {\r\n    scrollLeft: 0,\r\n    scrollTop: 0\r\n  };\r\n  let scale = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.createCoords)(1);\r\n  const offsets = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.createCoords)(0);\r\n  const isOffsetParentAnElement = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(offsetParent);\r\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\r\n    if ((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getNodeName)(offsetParent) !== 'body' || (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isOverflowElement)(documentElement)) {\r\n      scroll = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getNodeScroll)(offsetParent);\r\n    }\r\n    if ((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(offsetParent)) {\r\n      const offsetRect = getBoundingClientRect(offsetParent);\r\n      scale = getScale(offsetParent);\r\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\r\n      offsets.y = offsetRect.y + offsetParent.clientTop;\r\n    }\r\n  }\r\n  return {\r\n    width: rect.width * scale.x,\r\n    height: rect.height * scale.y,\r\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,\r\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y\r\n  };\r\n}\r\n\r\nfunction getClientRects(element) {\r\n  return Array.from(element.getClientRects());\r\n}\r\n\r\nfunction getWindowScrollBarX(element) {\r\n  // If <html> has a CSS width greater than the viewport, then this will be\r\n  // incorrect for RTL.\r\n  return getBoundingClientRect((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getDocumentElement)(element)).left + (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getNodeScroll)(element).scrollLeft;\r\n}\r\n\r\n// Gets the entire size of the scrollable document area, even extending outside\r\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable.\r\nfunction getDocumentRect(element) {\r\n  const html = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getDocumentElement)(element);\r\n  const scroll = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getNodeScroll)(element);\r\n  const body = element.ownerDocument.body;\r\n  const width = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.max)(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\r\n  const height = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.max)(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\r\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\r\n  const y = -scroll.scrollTop;\r\n  if ((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getComputedStyle)(body).direction === 'rtl') {\r\n    x += (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.max)(html.clientWidth, body.clientWidth) - width;\r\n  }\r\n  return {\r\n    width,\r\n    height,\r\n    x,\r\n    y\r\n  };\r\n}\r\n\r\nfunction getViewportRect(element, strategy) {\r\n  const win = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getWindow)(element);\r\n  const html = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getDocumentElement)(element);\r\n  const visualViewport = win.visualViewport;\r\n  let width = html.clientWidth;\r\n  let height = html.clientHeight;\r\n  let x = 0;\r\n  let y = 0;\r\n  if (visualViewport) {\r\n    width = visualViewport.width;\r\n    height = visualViewport.height;\r\n    const visualViewportBased = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isWebKit)();\r\n    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {\r\n      x = visualViewport.offsetLeft;\r\n      y = visualViewport.offsetTop;\r\n    }\r\n  }\r\n  return {\r\n    width,\r\n    height,\r\n    x,\r\n    y\r\n  };\r\n}\r\n\r\n// Returns the inner client rect, subtracting scrollbars if present.\r\nfunction getInnerBoundingClientRect(element, strategy) {\r\n  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');\r\n  const top = clientRect.top + element.clientTop;\r\n  const left = clientRect.left + element.clientLeft;\r\n  const scale = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) ? getScale(element) : (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.createCoords)(1);\r\n  const width = element.clientWidth * scale.x;\r\n  const height = element.clientHeight * scale.y;\r\n  const x = left * scale.x;\r\n  const y = top * scale.y;\r\n  return {\r\n    width,\r\n    height,\r\n    x,\r\n    y\r\n  };\r\n}\r\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\r\n  let rect;\r\n  if (clippingAncestor === 'viewport') {\r\n    rect = getViewportRect(element, strategy);\r\n  } else if (clippingAncestor === 'document') {\r\n    rect = getDocumentRect((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getDocumentElement)(element));\r\n  } else if ((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isElement)(clippingAncestor)) {\r\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\r\n  } else {\r\n    const visualOffsets = getVisualOffsets(element);\r\n    rect = {\r\n      ...clippingAncestor,\r\n      x: clippingAncestor.x - visualOffsets.x,\r\n      y: clippingAncestor.y - visualOffsets.y\r\n    };\r\n  }\r\n  return (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.rectToClientRect)(rect);\r\n}\r\nfunction hasFixedPositionAncestor(element, stopNode) {\r\n  const parentNode = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getParentNode)(element);\r\n  if (parentNode === stopNode || !(0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isElement)(parentNode) || (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isLastTraversableNode)(parentNode)) {\r\n    return false;\r\n  }\r\n  return (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getComputedStyle)(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);\r\n}\r\n\r\n// A \"clipping ancestor\" is an `overflow` element with the characteristic of\r\n// clipping (or hiding) child elements. This returns all clipping ancestors\r\n// of the given element up the tree.\r\nfunction getClippingElementAncestors(element, cache) {\r\n  const cachedResult = cache.get(element);\r\n  if (cachedResult) {\r\n    return cachedResult;\r\n  }\r\n  let result = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getOverflowAncestors)(element, [], false).filter(el => (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isElement)(el) && (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getNodeName)(el) !== 'body');\r\n  let currentContainingBlockComputedStyle = null;\r\n  const elementIsFixed = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getComputedStyle)(element).position === 'fixed';\r\n  let currentNode = elementIsFixed ? (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getParentNode)(element) : element;\r\n\r\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\r\n  while ((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isElement)(currentNode) && !(0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isLastTraversableNode)(currentNode)) {\r\n    const computedStyle = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getComputedStyle)(currentNode);\r\n    const currentNodeIsContaining = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isContainingBlock)(currentNode);\r\n    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {\r\n      currentContainingBlockComputedStyle = null;\r\n    }\r\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isOverflowElement)(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\r\n    if (shouldDropCurrentNode) {\r\n      // Drop non-containing blocks.\r\n      result = result.filter(ancestor => ancestor !== currentNode);\r\n    } else {\r\n      // Record last containing block for next iteration.\r\n      currentContainingBlockComputedStyle = computedStyle;\r\n    }\r\n    currentNode = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getParentNode)(currentNode);\r\n  }\r\n  cache.set(element, result);\r\n  return result;\r\n}\r\n\r\n// Gets the maximum area that the element is visible in due to any number of\r\n// clipping ancestors.\r\nfunction getClippingRect(_ref) {\r\n  let {\r\n    element,\r\n    boundary,\r\n    rootBoundary,\r\n    strategy\r\n  } = _ref;\r\n  const elementClippingAncestors = boundary === 'clippingAncestors' ? getClippingElementAncestors(element, this._c) : [].concat(boundary);\r\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\r\n  const firstClippingAncestor = clippingAncestors[0];\r\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\r\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\r\n    accRect.top = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.max)(rect.top, accRect.top);\r\n    accRect.right = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.min)(rect.right, accRect.right);\r\n    accRect.bottom = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.min)(rect.bottom, accRect.bottom);\r\n    accRect.left = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.max)(rect.left, accRect.left);\r\n    return accRect;\r\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\r\n  return {\r\n    width: clippingRect.right - clippingRect.left,\r\n    height: clippingRect.bottom - clippingRect.top,\r\n    x: clippingRect.left,\r\n    y: clippingRect.top\r\n  };\r\n}\r\n\r\nfunction getDimensions(element) {\r\n  const {\r\n    width,\r\n    height\r\n  } = getCssDimensions(element);\r\n  return {\r\n    width,\r\n    height\r\n  };\r\n}\r\n\r\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\r\n  const isOffsetParentAnElement = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(offsetParent);\r\n  const documentElement = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getDocumentElement)(offsetParent);\r\n  const isFixed = strategy === 'fixed';\r\n  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\r\n  let scroll = {\r\n    scrollLeft: 0,\r\n    scrollTop: 0\r\n  };\r\n  const offsets = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.createCoords)(0);\r\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\r\n    if ((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getNodeName)(offsetParent) !== 'body' || (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isOverflowElement)(documentElement)) {\r\n      scroll = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getNodeScroll)(offsetParent);\r\n    }\r\n    if (isOffsetParentAnElement) {\r\n      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\r\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\r\n      offsets.y = offsetRect.y + offsetParent.clientTop;\r\n    } else if (documentElement) {\r\n      offsets.x = getWindowScrollBarX(documentElement);\r\n    }\r\n  }\r\n  const x = rect.left + scroll.scrollLeft - offsets.x;\r\n  const y = rect.top + scroll.scrollTop - offsets.y;\r\n  return {\r\n    x,\r\n    y,\r\n    width: rect.width,\r\n    height: rect.height\r\n  };\r\n}\r\n\r\nfunction getTrueOffsetParent(element, polyfill) {\r\n  if (!(0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) || (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getComputedStyle)(element).position === 'fixed') {\r\n    return null;\r\n  }\r\n  if (polyfill) {\r\n    return polyfill(element);\r\n  }\r\n  return element.offsetParent;\r\n}\r\n\r\n// Gets the closest ancestor positioned element. Handles some edge cases,\r\n// such as table ancestors and cross browser bugs.\r\nfunction getOffsetParent(element, polyfill) {\r\n  const window = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getWindow)(element);\r\n  if (!(0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) || isTopLayer(element)) {\r\n    return window;\r\n  }\r\n  let offsetParent = getTrueOffsetParent(element, polyfill);\r\n  while (offsetParent && (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isTableElement)(offsetParent) && (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getComputedStyle)(offsetParent).position === 'static') {\r\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\r\n  }\r\n  if (offsetParent && ((0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getNodeName)(offsetParent) === 'html' || (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getNodeName)(offsetParent) === 'body' && (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getComputedStyle)(offsetParent).position === 'static' && !(0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isContainingBlock)(offsetParent))) {\r\n    return window;\r\n  }\r\n  return offsetParent || (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getContainingBlock)(element) || window;\r\n}\r\n\r\nconst getElementRects = async function (data) {\r\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\r\n  const getDimensionsFn = this.getDimensions;\r\n  const floatingDimensions = await getDimensionsFn(data.floating);\r\n  return {\r\n    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),\r\n    floating: {\r\n      x: 0,\r\n      y: 0,\r\n      width: floatingDimensions.width,\r\n      height: floatingDimensions.height\r\n    }\r\n  };\r\n};\r\n\r\nfunction isRTL(element) {\r\n  return (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getComputedStyle)(element).direction === 'rtl';\r\n}\r\n\r\nconst platform = {\r\n  convertOffsetParentRelativeRectToViewportRelativeRect,\r\n  getDocumentElement: _floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getDocumentElement,\r\n  getClippingRect,\r\n  getOffsetParent,\r\n  getElementRects,\r\n  getClientRects,\r\n  getDimensions,\r\n  getScale,\r\n  isElement: _floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isElement,\r\n  isRTL\r\n};\r\n\r\n// https://samthor.au/2021/observing-dom/\r\nfunction observeMove(element, onMove) {\r\n  let io = null;\r\n  let timeoutId;\r\n  const root = (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getDocumentElement)(element);\r\n  function cleanup() {\r\n    var _io;\r\n    clearTimeout(timeoutId);\r\n    (_io = io) == null || _io.disconnect();\r\n    io = null;\r\n  }\r\n  function refresh(skip, threshold) {\r\n    if (skip === void 0) {\r\n      skip = false;\r\n    }\r\n    if (threshold === void 0) {\r\n      threshold = 1;\r\n    }\r\n    cleanup();\r\n    const {\r\n      left,\r\n      top,\r\n      width,\r\n      height\r\n    } = element.getBoundingClientRect();\r\n    if (!skip) {\r\n      onMove();\r\n    }\r\n    if (!width || !height) {\r\n      return;\r\n    }\r\n    const insetTop = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.floor)(top);\r\n    const insetRight = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.floor)(root.clientWidth - (left + width));\r\n    const insetBottom = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.floor)(root.clientHeight - (top + height));\r\n    const insetLeft = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.floor)(left);\r\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\r\n    const options = {\r\n      rootMargin,\r\n      threshold: (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.max)(0, (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_1__.min)(1, threshold)) || 1\r\n    };\r\n    let isFirstUpdate = true;\r\n    function handleObserve(entries) {\r\n      const ratio = entries[0].intersectionRatio;\r\n      if (ratio !== threshold) {\r\n        if (!isFirstUpdate) {\r\n          return refresh();\r\n        }\r\n        if (!ratio) {\r\n          // If the reference is clipped, the ratio is 0. Throttle the refresh\r\n          // to prevent an infinite loop of updates.\r\n          timeoutId = setTimeout(() => {\r\n            refresh(false, 1e-7);\r\n          }, 1000);\r\n        } else {\r\n          refresh(false, ratio);\r\n        }\r\n      }\r\n      isFirstUpdate = false;\r\n    }\r\n\r\n    // Older browsers don't support a `document` as the root and will throw an\r\n    // error.\r\n    try {\r\n      io = new IntersectionObserver(handleObserve, {\r\n        ...options,\r\n        // Handle <iframe>s\r\n        root: root.ownerDocument\r\n      });\r\n    } catch (e) {\r\n      io = new IntersectionObserver(handleObserve, options);\r\n    }\r\n    io.observe(element);\r\n  }\r\n  refresh(true);\r\n  return cleanup;\r\n}\r\n\r\n/**\r\n * Automatically updates the position of the floating element when necessary.\r\n * Should only be called when the floating element is mounted on the DOM or\r\n * visible on the screen.\r\n * @returns cleanup function that should be invoked when the floating element is\r\n * removed from the DOM or hidden from the screen.\r\n * @see https://floating-ui.com/docs/autoUpdate\r\n */\r\nfunction autoUpdate(reference, floating, update, options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  const {\r\n    ancestorScroll = true,\r\n    ancestorResize = true,\r\n    elementResize = typeof ResizeObserver === 'function',\r\n    layoutShift = typeof IntersectionObserver === 'function',\r\n    animationFrame = false\r\n  } = options;\r\n  const referenceEl = unwrapElement(reference);\r\n  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getOverflowAncestors)(referenceEl) : []), ...(0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.getOverflowAncestors)(floating)] : [];\r\n  ancestors.forEach(ancestor => {\r\n    ancestorScroll && ancestor.addEventListener('scroll', update, {\r\n      passive: true\r\n    });\r\n    ancestorResize && ancestor.addEventListener('resize', update);\r\n  });\r\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\r\n  let reobserveFrame = -1;\r\n  let resizeObserver = null;\r\n  if (elementResize) {\r\n    resizeObserver = new ResizeObserver(_ref => {\r\n      let [firstEntry] = _ref;\r\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\r\n        // Prevent update loops when using the `size` middleware.\r\n        // https://github.com/floating-ui/floating-ui/issues/1740\r\n        resizeObserver.unobserve(floating);\r\n        cancelAnimationFrame(reobserveFrame);\r\n        reobserveFrame = requestAnimationFrame(() => {\r\n          var _resizeObserver;\r\n          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);\r\n        });\r\n      }\r\n      update();\r\n    });\r\n    if (referenceEl && !animationFrame) {\r\n      resizeObserver.observe(referenceEl);\r\n    }\r\n    resizeObserver.observe(floating);\r\n  }\r\n  let frameId;\r\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\r\n  if (animationFrame) {\r\n    frameLoop();\r\n  }\r\n  function frameLoop() {\r\n    const nextRefRect = getBoundingClientRect(reference);\r\n    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {\r\n      update();\r\n    }\r\n    prevRefRect = nextRefRect;\r\n    frameId = requestAnimationFrame(frameLoop);\r\n  }\r\n  update();\r\n  return () => {\r\n    var _resizeObserver2;\r\n    ancestors.forEach(ancestor => {\r\n      ancestorScroll && ancestor.removeEventListener('scroll', update);\r\n      ancestorResize && ancestor.removeEventListener('resize', update);\r\n    });\r\n    cleanupIo == null || cleanupIo();\r\n    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();\r\n    resizeObserver = null;\r\n    if (animationFrame) {\r\n      cancelAnimationFrame(frameId);\r\n    }\r\n  };\r\n}\r\n\r\n// `OffsetOptions` in the core library were originally already `Derivable`. For\r\n// backwards-compatibility, re-define it here to use the DOM Derivable type.\r\n\r\n/**\r\n * Resolves with an object of overflow side offsets that determine how much the\r\n * element is overflowing a given clipping boundary on each side.\r\n * - positive = overflowing the boundary by that number of pixels\r\n * - negative = how many pixels left before it will overflow\r\n * - 0 = lies flush with the boundary\r\n * @see https://floating-ui.com/docs/detectOverflow\r\n */\r\nconst detectOverflow = _floating_ui_core__WEBPACK_IMPORTED_MODULE_2__.detectOverflow;\r\n\r\n/**\r\n * Modifies the placement by translating the floating element along the\r\n * specified axes.\r\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\r\n * object may be passed.\r\n * @see https://floating-ui.com/docs/offset\r\n */\r\nconst offset = _floating_ui_core__WEBPACK_IMPORTED_MODULE_2__.offset;\r\n\r\n/**\r\n * Optimizes the visibility of the floating element by choosing the placement\r\n * that has the most space available automatically, without needing to specify a\r\n * preferred placement. Alternative to `flip`.\r\n * @see https://floating-ui.com/docs/autoPlacement\r\n */\r\nconst autoPlacement = _floating_ui_core__WEBPACK_IMPORTED_MODULE_2__.autoPlacement;\r\n\r\n/**\r\n * Optimizes the visibility of the floating element by shifting it in order to\r\n * keep it in view when it will overflow the clipping boundary.\r\n * @see https://floating-ui.com/docs/shift\r\n */\r\nconst shift = _floating_ui_core__WEBPACK_IMPORTED_MODULE_2__.shift;\r\n\r\n/**\r\n * Optimizes the visibility of the floating element by flipping the `placement`\r\n * in order to keep it in view when the preferred placement(s) will overflow the\r\n * clipping boundary. Alternative to `autoPlacement`.\r\n * @see https://floating-ui.com/docs/flip\r\n */\r\nconst flip = _floating_ui_core__WEBPACK_IMPORTED_MODULE_2__.flip;\r\n\r\n/**\r\n * Provides data that allows you to change the size of the floating element —\r\n * for instance, prevent it from overflowing the clipping boundary or match the\r\n * width of the reference element.\r\n * @see https://floating-ui.com/docs/size\r\n */\r\nconst size = _floating_ui_core__WEBPACK_IMPORTED_MODULE_2__.size;\r\n\r\n/**\r\n * Provides data to hide the floating element in applicable situations, such as\r\n * when it is not in the same clipping context as the reference element.\r\n * @see https://floating-ui.com/docs/hide\r\n */\r\nconst hide = _floating_ui_core__WEBPACK_IMPORTED_MODULE_2__.hide;\r\n\r\n/**\r\n * Provides data to position an inner element of the floating element so that it\r\n * appears centered to the reference element.\r\n * @see https://floating-ui.com/docs/arrow\r\n */\r\nconst arrow = _floating_ui_core__WEBPACK_IMPORTED_MODULE_2__.arrow;\r\n\r\n/**\r\n * Provides improved positioning for inline reference elements that can span\r\n * over multiple lines, such as hyperlinks or range selections.\r\n * @see https://floating-ui.com/docs/inline\r\n */\r\nconst inline = _floating_ui_core__WEBPACK_IMPORTED_MODULE_2__.inline;\r\n\r\n/**\r\n * Built-in `limiter` that will stop `shift()` at a certain point.\r\n */\r\nconst limitShift = _floating_ui_core__WEBPACK_IMPORTED_MODULE_2__.limitShift;\r\n\r\n/**\r\n * Computes the `x` and `y` coordinates that will place the floating element\r\n * next to a given reference element.\r\n */\r\nconst computePosition = (reference, floating, options) => {\r\n  // This caches the expensive `getClippingElementAncestors` function so that\r\n  // multiple lifecycle resets re-use the same result. It only lives for a\r\n  // single call. If other functions become expensive, we can add them as well.\r\n  const cache = new Map();\r\n  const mergedOptions = {\r\n    platform,\r\n    ...options\r\n  };\r\n  const platformWithCache = {\r\n    ...mergedOptions.platform,\r\n    _c: cache\r\n  };\r\n  return (0,_floating_ui_core__WEBPACK_IMPORTED_MODULE_2__.computePosition)(reference, floating, {\r\n    ...mergedOptions,\r\n    platform: platformWithCache\r\n  });\r\n};\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0BmbG9hdGluZy11aS9kb20vZGlzdC9mbG9hdGluZy11aS5kb20ubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXlUO0FBQy9PO0FBQ3FOO0FBQ2pPO0FBQzlEO0FBQ0E7QUFDQSxjQUFjLHdFQUFnQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxRUFBYTtBQUNqQztBQUNBO0FBQ0EseUJBQXlCLHlEQUFLLDJCQUEyQix5REFBSztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGlFQUFTO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxxRUFBYTtBQUNwQixXQUFXLGdFQUFZO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixlQUFlLHlEQUFLO0FBQ3BCLGVBQWUseURBQUs7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGdFQUFZO0FBQzNDO0FBQ0EsY0FBYyxpRUFBUztBQUN2QixPQUFPLGdFQUFRO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRSxpRUFBUztBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxnRUFBWTtBQUMxQjtBQUNBO0FBQ0EsVUFBVSxpRUFBUztBQUNuQjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLDJIQUEySCxnRUFBWTtBQUN2STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlFQUFTO0FBQ3pCLHNDQUFzQyxpRUFBUyxpQkFBaUIsaUVBQVM7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix3RUFBZ0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixpRUFBUztBQUM1QjtBQUNBO0FBQ0E7QUFDQSxTQUFTLG9FQUFnQjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSwwQkFBMEIsMEVBQWtCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGdFQUFZO0FBQzFCLGtCQUFrQixnRUFBWTtBQUM5QixrQ0FBa0MscUVBQWE7QUFDL0M7QUFDQSxRQUFRLG1FQUFXLDZCQUE2Qix5RUFBaUI7QUFDakUsZUFBZSxxRUFBYTtBQUM1QjtBQUNBLFFBQVEscUVBQWE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLDBFQUFrQixrQkFBa0IscUVBQWE7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsMEVBQWtCO0FBQ2pDLGlCQUFpQixxRUFBYTtBQUM5QjtBQUNBLGdCQUFnQix1REFBRztBQUNuQixpQkFBaUIsdURBQUc7QUFDcEI7QUFDQTtBQUNBLE1BQU0sd0VBQWdCO0FBQ3RCLFNBQVMsdURBQUc7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsaUVBQVM7QUFDdkIsZUFBZSwwRUFBa0I7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxnRUFBUTtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IscUVBQWEsZ0NBQWdDLGdFQUFZO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSiwyQkFBMkIsMEVBQWtCO0FBQzdDLElBQUksU0FBUyxpRUFBUztBQUN0QjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsb0VBQWdCO0FBQ3pCO0FBQ0E7QUFDQSxxQkFBcUIscUVBQWE7QUFDbEMsa0NBQWtDLGlFQUFTLGdCQUFnQiw2RUFBcUI7QUFDaEY7QUFDQTtBQUNBLFNBQVMsd0VBQWdCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSw0RUFBb0Isa0NBQWtDLGlFQUFTLFFBQVEsbUVBQVc7QUFDakc7QUFDQSx5QkFBeUIsd0VBQWdCO0FBQ3pDLHFDQUFxQyxxRUFBYTtBQUNsRDtBQUNBO0FBQ0EsU0FBUyxpRUFBUyxrQkFBa0IsNkVBQXFCO0FBQ3pELDBCQUEwQix3RUFBZ0I7QUFDMUMsb0NBQW9DLHlFQUFpQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQSxrVEFBa1QseUVBQWlCO0FBQ25VO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IscUVBQWE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix1REFBRztBQUNyQixvQkFBb0IsdURBQUc7QUFDdkIscUJBQXFCLHVEQUFHO0FBQ3hCLG1CQUFtQix1REFBRztBQUN0QjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MscUVBQWE7QUFDL0MsMEJBQTBCLDBFQUFrQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsZ0VBQVk7QUFDOUI7QUFDQSxRQUFRLG1FQUFXLDZCQUE2Qix5RUFBaUI7QUFDakUsZUFBZSxxRUFBYTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLHFFQUFhLGFBQWEsd0VBQWdCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsaUVBQVM7QUFDMUIsT0FBTyxxRUFBYTtBQUNwQjtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsc0VBQWMsa0JBQWtCLHdFQUFnQjtBQUN6RTtBQUNBO0FBQ0EsdUJBQXVCLG1FQUFXLDZCQUE2QixtRUFBVyw2QkFBNkIsd0VBQWdCLHlDQUF5Qyx5RUFBaUI7QUFDakw7QUFDQTtBQUNBLHlCQUF5QiwwRUFBa0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyx3RUFBZ0I7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSwwRUFBa0I7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHlEQUFLO0FBQzFCLHVCQUF1Qix5REFBSztBQUM1Qix3QkFBd0IseURBQUs7QUFDN0Isc0JBQXNCLHlEQUFLO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQix1REFBRyxJQUFJLHVEQUFHO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLDBFQUEwRSw0RUFBb0Isd0JBQXdCLDRFQUFvQjtBQUMxSTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDZEQUFnQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxxREFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiw0REFBZTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG9EQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxtREFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsbURBQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxtREFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG9EQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUscURBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIseURBQVk7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxrRUFBaUI7QUFDMUI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQzRJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZW1wbG95ZWUvLi4vbm9kZV9tb2R1bGVzL0BmbG9hdGluZy11aS9kb20vZGlzdC9mbG9hdGluZy11aS5kb20ubWpzPzE4OTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVjdFRvQ2xpZW50UmVjdCwgZGV0ZWN0T3ZlcmZsb3cgYXMgZGV0ZWN0T3ZlcmZsb3ckMSwgb2Zmc2V0IGFzIG9mZnNldCQxLCBhdXRvUGxhY2VtZW50IGFzIGF1dG9QbGFjZW1lbnQkMSwgc2hpZnQgYXMgc2hpZnQkMSwgZmxpcCBhcyBmbGlwJDEsIHNpemUgYXMgc2l6ZSQxLCBoaWRlIGFzIGhpZGUkMSwgYXJyb3cgYXMgYXJyb3ckMSwgaW5saW5lIGFzIGlubGluZSQxLCBsaW1pdFNoaWZ0IGFzIGxpbWl0U2hpZnQkMSwgY29tcHV0ZVBvc2l0aW9uIGFzIGNvbXB1dGVQb3NpdGlvbiQxIH0gZnJvbSAnQGZsb2F0aW5nLXVpL2NvcmUnO1xyXG5pbXBvcnQgeyByb3VuZCwgY3JlYXRlQ29vcmRzLCBtYXgsIG1pbiwgZmxvb3IgfSBmcm9tICdAZmxvYXRpbmctdWkvdXRpbHMnO1xyXG5pbXBvcnQgeyBnZXRDb21wdXRlZFN0eWxlLCBpc0hUTUxFbGVtZW50LCBpc0VsZW1lbnQsIGdldFdpbmRvdywgaXNXZWJLaXQsIGdldERvY3VtZW50RWxlbWVudCwgZ2V0Tm9kZU5hbWUsIGlzT3ZlcmZsb3dFbGVtZW50LCBnZXROb2RlU2Nyb2xsLCBnZXRPdmVyZmxvd0FuY2VzdG9ycywgZ2V0UGFyZW50Tm9kZSwgaXNMYXN0VHJhdmVyc2FibGVOb2RlLCBpc0NvbnRhaW5pbmdCbG9jaywgaXNUYWJsZUVsZW1lbnQsIGdldENvbnRhaW5pbmdCbG9jayB9IGZyb20gJ0BmbG9hdGluZy11aS91dGlscy9kb20nO1xyXG5leHBvcnQgeyBnZXRPdmVyZmxvd0FuY2VzdG9ycyB9IGZyb20gJ0BmbG9hdGluZy11aS91dGlscy9kb20nO1xyXG5cclxuZnVuY3Rpb24gZ2V0Q3NzRGltZW5zaW9ucyhlbGVtZW50KSB7XHJcbiAgY29uc3QgY3NzID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcclxuICAvLyBJbiB0ZXN0aW5nIGVudmlyb25tZW50cywgdGhlIGB3aWR0aGAgYW5kIGBoZWlnaHRgIHByb3BlcnRpZXMgYXJlIGVtcHR5XHJcbiAgLy8gc3RyaW5ncyBmb3IgU1ZHIGVsZW1lbnRzLCByZXR1cm5pbmcgTmFOLiBGYWxsYmFjayB0byBgMGAgaW4gdGhpcyBjYXNlLlxyXG4gIGxldCB3aWR0aCA9IHBhcnNlRmxvYXQoY3NzLndpZHRoKSB8fCAwO1xyXG4gIGxldCBoZWlnaHQgPSBwYXJzZUZsb2F0KGNzcy5oZWlnaHQpIHx8IDA7XHJcbiAgY29uc3QgaGFzT2Zmc2V0ID0gaXNIVE1MRWxlbWVudChlbGVtZW50KTtcclxuICBjb25zdCBvZmZzZXRXaWR0aCA9IGhhc09mZnNldCA/IGVsZW1lbnQub2Zmc2V0V2lkdGggOiB3aWR0aDtcclxuICBjb25zdCBvZmZzZXRIZWlnaHQgPSBoYXNPZmZzZXQgPyBlbGVtZW50Lm9mZnNldEhlaWdodCA6IGhlaWdodDtcclxuICBjb25zdCBzaG91bGRGYWxsYmFjayA9IHJvdW5kKHdpZHRoKSAhPT0gb2Zmc2V0V2lkdGggfHwgcm91bmQoaGVpZ2h0KSAhPT0gb2Zmc2V0SGVpZ2h0O1xyXG4gIGlmIChzaG91bGRGYWxsYmFjaykge1xyXG4gICAgd2lkdGggPSBvZmZzZXRXaWR0aDtcclxuICAgIGhlaWdodCA9IG9mZnNldEhlaWdodDtcclxuICB9XHJcbiAgcmV0dXJuIHtcclxuICAgIHdpZHRoLFxyXG4gICAgaGVpZ2h0LFxyXG4gICAgJDogc2hvdWxkRmFsbGJhY2tcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiB1bndyYXBFbGVtZW50KGVsZW1lbnQpIHtcclxuICByZXR1cm4gIWlzRWxlbWVudChlbGVtZW50KSA/IGVsZW1lbnQuY29udGV4dEVsZW1lbnQgOiBlbGVtZW50O1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRTY2FsZShlbGVtZW50KSB7XHJcbiAgY29uc3QgZG9tRWxlbWVudCA9IHVud3JhcEVsZW1lbnQoZWxlbWVudCk7XHJcbiAgaWYgKCFpc0hUTUxFbGVtZW50KGRvbUVsZW1lbnQpKSB7XHJcbiAgICByZXR1cm4gY3JlYXRlQ29vcmRzKDEpO1xyXG4gIH1cclxuICBjb25zdCByZWN0ID0gZG9tRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICBjb25zdCB7XHJcbiAgICB3aWR0aCxcclxuICAgIGhlaWdodCxcclxuICAgICRcclxuICB9ID0gZ2V0Q3NzRGltZW5zaW9ucyhkb21FbGVtZW50KTtcclxuICBsZXQgeCA9ICgkID8gcm91bmQocmVjdC53aWR0aCkgOiByZWN0LndpZHRoKSAvIHdpZHRoO1xyXG4gIGxldCB5ID0gKCQgPyByb3VuZChyZWN0LmhlaWdodCkgOiByZWN0LmhlaWdodCkgLyBoZWlnaHQ7XHJcblxyXG4gIC8vIDAsIE5hTiwgb3IgSW5maW5pdHkgc2hvdWxkIGFsd2F5cyBmYWxsYmFjayB0byAxLlxyXG5cclxuICBpZiAoIXggfHwgIU51bWJlci5pc0Zpbml0ZSh4KSkge1xyXG4gICAgeCA9IDE7XHJcbiAgfVxyXG4gIGlmICgheSB8fCAhTnVtYmVyLmlzRmluaXRlKHkpKSB7XHJcbiAgICB5ID0gMTtcclxuICB9XHJcbiAgcmV0dXJuIHtcclxuICAgIHgsXHJcbiAgICB5XHJcbiAgfTtcclxufVxyXG5cclxuY29uc3Qgbm9PZmZzZXRzID0gLyojX19QVVJFX18qL2NyZWF0ZUNvb3JkcygwKTtcclxuZnVuY3Rpb24gZ2V0VmlzdWFsT2Zmc2V0cyhlbGVtZW50KSB7XHJcbiAgY29uc3Qgd2luID0gZ2V0V2luZG93KGVsZW1lbnQpO1xyXG4gIGlmICghaXNXZWJLaXQoKSB8fCAhd2luLnZpc3VhbFZpZXdwb3J0KSB7XHJcbiAgICByZXR1cm4gbm9PZmZzZXRzO1xyXG4gIH1cclxuICByZXR1cm4ge1xyXG4gICAgeDogd2luLnZpc3VhbFZpZXdwb3J0Lm9mZnNldExlZnQsXHJcbiAgICB5OiB3aW4udmlzdWFsVmlld3BvcnQub2Zmc2V0VG9wXHJcbiAgfTtcclxufVxyXG5mdW5jdGlvbiBzaG91bGRBZGRWaXN1YWxPZmZzZXRzKGVsZW1lbnQsIGlzRml4ZWQsIGZsb2F0aW5nT2Zmc2V0UGFyZW50KSB7XHJcbiAgaWYgKGlzRml4ZWQgPT09IHZvaWQgMCkge1xyXG4gICAgaXNGaXhlZCA9IGZhbHNlO1xyXG4gIH1cclxuICBpZiAoIWZsb2F0aW5nT2Zmc2V0UGFyZW50IHx8IGlzRml4ZWQgJiYgZmxvYXRpbmdPZmZzZXRQYXJlbnQgIT09IGdldFdpbmRvdyhlbGVtZW50KSkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuICByZXR1cm4gaXNGaXhlZDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIGluY2x1ZGVTY2FsZSwgaXNGaXhlZFN0cmF0ZWd5LCBvZmZzZXRQYXJlbnQpIHtcclxuICBpZiAoaW5jbHVkZVNjYWxlID09PSB2b2lkIDApIHtcclxuICAgIGluY2x1ZGVTY2FsZSA9IGZhbHNlO1xyXG4gIH1cclxuICBpZiAoaXNGaXhlZFN0cmF0ZWd5ID09PSB2b2lkIDApIHtcclxuICAgIGlzRml4ZWRTdHJhdGVneSA9IGZhbHNlO1xyXG4gIH1cclxuICBjb25zdCBjbGllbnRSZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICBjb25zdCBkb21FbGVtZW50ID0gdW53cmFwRWxlbWVudChlbGVtZW50KTtcclxuICBsZXQgc2NhbGUgPSBjcmVhdGVDb29yZHMoMSk7XHJcbiAgaWYgKGluY2x1ZGVTY2FsZSkge1xyXG4gICAgaWYgKG9mZnNldFBhcmVudCkge1xyXG4gICAgICBpZiAoaXNFbGVtZW50KG9mZnNldFBhcmVudCkpIHtcclxuICAgICAgICBzY2FsZSA9IGdldFNjYWxlKG9mZnNldFBhcmVudCk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHNjYWxlID0gZ2V0U2NhbGUoZWxlbWVudCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGNvbnN0IHZpc3VhbE9mZnNldHMgPSBzaG91bGRBZGRWaXN1YWxPZmZzZXRzKGRvbUVsZW1lbnQsIGlzRml4ZWRTdHJhdGVneSwgb2Zmc2V0UGFyZW50KSA/IGdldFZpc3VhbE9mZnNldHMoZG9tRWxlbWVudCkgOiBjcmVhdGVDb29yZHMoMCk7XHJcbiAgbGV0IHggPSAoY2xpZW50UmVjdC5sZWZ0ICsgdmlzdWFsT2Zmc2V0cy54KSAvIHNjYWxlLng7XHJcbiAgbGV0IHkgPSAoY2xpZW50UmVjdC50b3AgKyB2aXN1YWxPZmZzZXRzLnkpIC8gc2NhbGUueTtcclxuICBsZXQgd2lkdGggPSBjbGllbnRSZWN0LndpZHRoIC8gc2NhbGUueDtcclxuICBsZXQgaGVpZ2h0ID0gY2xpZW50UmVjdC5oZWlnaHQgLyBzY2FsZS55O1xyXG4gIGlmIChkb21FbGVtZW50KSB7XHJcbiAgICBjb25zdCB3aW4gPSBnZXRXaW5kb3coZG9tRWxlbWVudCk7XHJcbiAgICBjb25zdCBvZmZzZXRXaW4gPSBvZmZzZXRQYXJlbnQgJiYgaXNFbGVtZW50KG9mZnNldFBhcmVudCkgPyBnZXRXaW5kb3cob2Zmc2V0UGFyZW50KSA6IG9mZnNldFBhcmVudDtcclxuICAgIGxldCBjdXJyZW50V2luID0gd2luO1xyXG4gICAgbGV0IGN1cnJlbnRJRnJhbWUgPSBjdXJyZW50V2luLmZyYW1lRWxlbWVudDtcclxuICAgIHdoaWxlIChjdXJyZW50SUZyYW1lICYmIG9mZnNldFBhcmVudCAmJiBvZmZzZXRXaW4gIT09IGN1cnJlbnRXaW4pIHtcclxuICAgICAgY29uc3QgaWZyYW1lU2NhbGUgPSBnZXRTY2FsZShjdXJyZW50SUZyYW1lKTtcclxuICAgICAgY29uc3QgaWZyYW1lUmVjdCA9IGN1cnJlbnRJRnJhbWUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgIGNvbnN0IGNzcyA9IGdldENvbXB1dGVkU3R5bGUoY3VycmVudElGcmFtZSk7XHJcbiAgICAgIGNvbnN0IGxlZnQgPSBpZnJhbWVSZWN0LmxlZnQgKyAoY3VycmVudElGcmFtZS5jbGllbnRMZWZ0ICsgcGFyc2VGbG9hdChjc3MucGFkZGluZ0xlZnQpKSAqIGlmcmFtZVNjYWxlLng7XHJcbiAgICAgIGNvbnN0IHRvcCA9IGlmcmFtZVJlY3QudG9wICsgKGN1cnJlbnRJRnJhbWUuY2xpZW50VG9wICsgcGFyc2VGbG9hdChjc3MucGFkZGluZ1RvcCkpICogaWZyYW1lU2NhbGUueTtcclxuICAgICAgeCAqPSBpZnJhbWVTY2FsZS54O1xyXG4gICAgICB5ICo9IGlmcmFtZVNjYWxlLnk7XHJcbiAgICAgIHdpZHRoICo9IGlmcmFtZVNjYWxlLng7XHJcbiAgICAgIGhlaWdodCAqPSBpZnJhbWVTY2FsZS55O1xyXG4gICAgICB4ICs9IGxlZnQ7XHJcbiAgICAgIHkgKz0gdG9wO1xyXG4gICAgICBjdXJyZW50V2luID0gZ2V0V2luZG93KGN1cnJlbnRJRnJhbWUpO1xyXG4gICAgICBjdXJyZW50SUZyYW1lID0gY3VycmVudFdpbi5mcmFtZUVsZW1lbnQ7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiByZWN0VG9DbGllbnRSZWN0KHtcclxuICAgIHdpZHRoLFxyXG4gICAgaGVpZ2h0LFxyXG4gICAgeCxcclxuICAgIHlcclxuICB9KTtcclxufVxyXG5cclxuY29uc3QgdG9wTGF5ZXJTZWxlY3RvcnMgPSBbJzpwb3BvdmVyLW9wZW4nLCAnOm1vZGFsJ107XHJcbmZ1bmN0aW9uIGlzVG9wTGF5ZXIoZmxvYXRpbmcpIHtcclxuICByZXR1cm4gdG9wTGF5ZXJTZWxlY3RvcnMuc29tZShzZWxlY3RvciA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICByZXR1cm4gZmxvYXRpbmcubWF0Y2hlcyhzZWxlY3Rvcik7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gY29udmVydE9mZnNldFBhcmVudFJlbGF0aXZlUmVjdFRvVmlld3BvcnRSZWxhdGl2ZVJlY3QoX3JlZikge1xyXG4gIGxldCB7XHJcbiAgICBlbGVtZW50cyxcclxuICAgIHJlY3QsXHJcbiAgICBvZmZzZXRQYXJlbnQsXHJcbiAgICBzdHJhdGVneVxyXG4gIH0gPSBfcmVmO1xyXG4gIGNvbnN0IGlzRml4ZWQgPSBzdHJhdGVneSA9PT0gJ2ZpeGVkJztcclxuICBjb25zdCBkb2N1bWVudEVsZW1lbnQgPSBnZXREb2N1bWVudEVsZW1lbnQob2Zmc2V0UGFyZW50KTtcclxuICBjb25zdCB0b3BMYXllciA9IGVsZW1lbnRzID8gaXNUb3BMYXllcihlbGVtZW50cy5mbG9hdGluZykgOiBmYWxzZTtcclxuICBpZiAob2Zmc2V0UGFyZW50ID09PSBkb2N1bWVudEVsZW1lbnQgfHwgdG9wTGF5ZXIgJiYgaXNGaXhlZCkge1xyXG4gICAgcmV0dXJuIHJlY3Q7XHJcbiAgfVxyXG4gIGxldCBzY3JvbGwgPSB7XHJcbiAgICBzY3JvbGxMZWZ0OiAwLFxyXG4gICAgc2Nyb2xsVG9wOiAwXHJcbiAgfTtcclxuICBsZXQgc2NhbGUgPSBjcmVhdGVDb29yZHMoMSk7XHJcbiAgY29uc3Qgb2Zmc2V0cyA9IGNyZWF0ZUNvb3JkcygwKTtcclxuICBjb25zdCBpc09mZnNldFBhcmVudEFuRWxlbWVudCA9IGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KTtcclxuICBpZiAoaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgfHwgIWlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ICYmICFpc0ZpeGVkKSB7XHJcbiAgICBpZiAoZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSAhPT0gJ2JvZHknIHx8IGlzT3ZlcmZsb3dFbGVtZW50KGRvY3VtZW50RWxlbWVudCkpIHtcclxuICAgICAgc2Nyb2xsID0gZ2V0Tm9kZVNjcm9sbChvZmZzZXRQYXJlbnQpO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KSkge1xyXG4gICAgICBjb25zdCBvZmZzZXRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCk7XHJcbiAgICAgIHNjYWxlID0gZ2V0U2NhbGUob2Zmc2V0UGFyZW50KTtcclxuICAgICAgb2Zmc2V0cy54ID0gb2Zmc2V0UmVjdC54ICsgb2Zmc2V0UGFyZW50LmNsaWVudExlZnQ7XHJcbiAgICAgIG9mZnNldHMueSA9IG9mZnNldFJlY3QueSArIG9mZnNldFBhcmVudC5jbGllbnRUb3A7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB7XHJcbiAgICB3aWR0aDogcmVjdC53aWR0aCAqIHNjYWxlLngsXHJcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0ICogc2NhbGUueSxcclxuICAgIHg6IHJlY3QueCAqIHNjYWxlLnggLSBzY3JvbGwuc2Nyb2xsTGVmdCAqIHNjYWxlLnggKyBvZmZzZXRzLngsXHJcbiAgICB5OiByZWN0LnkgKiBzY2FsZS55IC0gc2Nyb2xsLnNjcm9sbFRvcCAqIHNjYWxlLnkgKyBvZmZzZXRzLnlcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRDbGllbnRSZWN0cyhlbGVtZW50KSB7XHJcbiAgcmV0dXJuIEFycmF5LmZyb20oZWxlbWVudC5nZXRDbGllbnRSZWN0cygpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KSB7XHJcbiAgLy8gSWYgPGh0bWw+IGhhcyBhIENTUyB3aWR0aCBncmVhdGVyIHRoYW4gdGhlIHZpZXdwb3J0LCB0aGVuIHRoaXMgd2lsbCBiZVxyXG4gIC8vIGluY29ycmVjdCBmb3IgUlRMLlxyXG4gIHJldHVybiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpKS5sZWZ0ICsgZ2V0Tm9kZVNjcm9sbChlbGVtZW50KS5zY3JvbGxMZWZ0O1xyXG59XHJcblxyXG4vLyBHZXRzIHRoZSBlbnRpcmUgc2l6ZSBvZiB0aGUgc2Nyb2xsYWJsZSBkb2N1bWVudCBhcmVhLCBldmVuIGV4dGVuZGluZyBvdXRzaWRlXHJcbi8vIG9mIHRoZSBgPGh0bWw+YCBhbmQgYDxib2R5PmAgcmVjdCBib3VuZHMgaWYgaG9yaXpvbnRhbGx5IHNjcm9sbGFibGUuXHJcbmZ1bmN0aW9uIGdldERvY3VtZW50UmVjdChlbGVtZW50KSB7XHJcbiAgY29uc3QgaHRtbCA9IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KTtcclxuICBjb25zdCBzY3JvbGwgPSBnZXROb2RlU2Nyb2xsKGVsZW1lbnQpO1xyXG4gIGNvbnN0IGJvZHkgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuYm9keTtcclxuICBjb25zdCB3aWR0aCA9IG1heChodG1sLnNjcm9sbFdpZHRoLCBodG1sLmNsaWVudFdpZHRoLCBib2R5LnNjcm9sbFdpZHRoLCBib2R5LmNsaWVudFdpZHRoKTtcclxuICBjb25zdCBoZWlnaHQgPSBtYXgoaHRtbC5zY3JvbGxIZWlnaHQsIGh0bWwuY2xpZW50SGVpZ2h0LCBib2R5LnNjcm9sbEhlaWdodCwgYm9keS5jbGllbnRIZWlnaHQpO1xyXG4gIGxldCB4ID0gLXNjcm9sbC5zY3JvbGxMZWZ0ICsgZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KTtcclxuICBjb25zdCB5ID0gLXNjcm9sbC5zY3JvbGxUb3A7XHJcbiAgaWYgKGdldENvbXB1dGVkU3R5bGUoYm9keSkuZGlyZWN0aW9uID09PSAncnRsJykge1xyXG4gICAgeCArPSBtYXgoaHRtbC5jbGllbnRXaWR0aCwgYm9keS5jbGllbnRXaWR0aCkgLSB3aWR0aDtcclxuICB9XHJcbiAgcmV0dXJuIHtcclxuICAgIHdpZHRoLFxyXG4gICAgaGVpZ2h0LFxyXG4gICAgeCxcclxuICAgIHlcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCwgc3RyYXRlZ3kpIHtcclxuICBjb25zdCB3aW4gPSBnZXRXaW5kb3coZWxlbWVudCk7XHJcbiAgY29uc3QgaHRtbCA9IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KTtcclxuICBjb25zdCB2aXN1YWxWaWV3cG9ydCA9IHdpbi52aXN1YWxWaWV3cG9ydDtcclxuICBsZXQgd2lkdGggPSBodG1sLmNsaWVudFdpZHRoO1xyXG4gIGxldCBoZWlnaHQgPSBodG1sLmNsaWVudEhlaWdodDtcclxuICBsZXQgeCA9IDA7XHJcbiAgbGV0IHkgPSAwO1xyXG4gIGlmICh2aXN1YWxWaWV3cG9ydCkge1xyXG4gICAgd2lkdGggPSB2aXN1YWxWaWV3cG9ydC53aWR0aDtcclxuICAgIGhlaWdodCA9IHZpc3VhbFZpZXdwb3J0LmhlaWdodDtcclxuICAgIGNvbnN0IHZpc3VhbFZpZXdwb3J0QmFzZWQgPSBpc1dlYktpdCgpO1xyXG4gICAgaWYgKCF2aXN1YWxWaWV3cG9ydEJhc2VkIHx8IHZpc3VhbFZpZXdwb3J0QmFzZWQgJiYgc3RyYXRlZ3kgPT09ICdmaXhlZCcpIHtcclxuICAgICAgeCA9IHZpc3VhbFZpZXdwb3J0Lm9mZnNldExlZnQ7XHJcbiAgICAgIHkgPSB2aXN1YWxWaWV3cG9ydC5vZmZzZXRUb3A7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB7XHJcbiAgICB3aWR0aCxcclxuICAgIGhlaWdodCxcclxuICAgIHgsXHJcbiAgICB5XHJcbiAgfTtcclxufVxyXG5cclxuLy8gUmV0dXJucyB0aGUgaW5uZXIgY2xpZW50IHJlY3QsIHN1YnRyYWN0aW5nIHNjcm9sbGJhcnMgaWYgcHJlc2VudC5cclxuZnVuY3Rpb24gZ2V0SW5uZXJCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCwgc3RyYXRlZ3kpIHtcclxuICBjb25zdCBjbGllbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIHRydWUsIHN0cmF0ZWd5ID09PSAnZml4ZWQnKTtcclxuICBjb25zdCB0b3AgPSBjbGllbnRSZWN0LnRvcCArIGVsZW1lbnQuY2xpZW50VG9wO1xyXG4gIGNvbnN0IGxlZnQgPSBjbGllbnRSZWN0LmxlZnQgKyBlbGVtZW50LmNsaWVudExlZnQ7XHJcbiAgY29uc3Qgc2NhbGUgPSBpc0hUTUxFbGVtZW50KGVsZW1lbnQpID8gZ2V0U2NhbGUoZWxlbWVudCkgOiBjcmVhdGVDb29yZHMoMSk7XHJcbiAgY29uc3Qgd2lkdGggPSBlbGVtZW50LmNsaWVudFdpZHRoICogc2NhbGUueDtcclxuICBjb25zdCBoZWlnaHQgPSBlbGVtZW50LmNsaWVudEhlaWdodCAqIHNjYWxlLnk7XHJcbiAgY29uc3QgeCA9IGxlZnQgKiBzY2FsZS54O1xyXG4gIGNvbnN0IHkgPSB0b3AgKiBzY2FsZS55O1xyXG4gIHJldHVybiB7XHJcbiAgICB3aWR0aCxcclxuICAgIGhlaWdodCxcclxuICAgIHgsXHJcbiAgICB5XHJcbiAgfTtcclxufVxyXG5mdW5jdGlvbiBnZXRDbGllbnRSZWN0RnJvbUNsaXBwaW5nQW5jZXN0b3IoZWxlbWVudCwgY2xpcHBpbmdBbmNlc3Rvciwgc3RyYXRlZ3kpIHtcclxuICBsZXQgcmVjdDtcclxuICBpZiAoY2xpcHBpbmdBbmNlc3RvciA9PT0gJ3ZpZXdwb3J0Jykge1xyXG4gICAgcmVjdCA9IGdldFZpZXdwb3J0UmVjdChlbGVtZW50LCBzdHJhdGVneSk7XHJcbiAgfSBlbHNlIGlmIChjbGlwcGluZ0FuY2VzdG9yID09PSAnZG9jdW1lbnQnKSB7XHJcbiAgICByZWN0ID0gZ2V0RG9jdW1lbnRSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSk7XHJcbiAgfSBlbHNlIGlmIChpc0VsZW1lbnQoY2xpcHBpbmdBbmNlc3RvcikpIHtcclxuICAgIHJlY3QgPSBnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdChjbGlwcGluZ0FuY2VzdG9yLCBzdHJhdGVneSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbnN0IHZpc3VhbE9mZnNldHMgPSBnZXRWaXN1YWxPZmZzZXRzKGVsZW1lbnQpO1xyXG4gICAgcmVjdCA9IHtcclxuICAgICAgLi4uY2xpcHBpbmdBbmNlc3RvcixcclxuICAgICAgeDogY2xpcHBpbmdBbmNlc3Rvci54IC0gdmlzdWFsT2Zmc2V0cy54LFxyXG4gICAgICB5OiBjbGlwcGluZ0FuY2VzdG9yLnkgLSB2aXN1YWxPZmZzZXRzLnlcclxuICAgIH07XHJcbiAgfVxyXG4gIHJldHVybiByZWN0VG9DbGllbnRSZWN0KHJlY3QpO1xyXG59XHJcbmZ1bmN0aW9uIGhhc0ZpeGVkUG9zaXRpb25BbmNlc3RvcihlbGVtZW50LCBzdG9wTm9kZSkge1xyXG4gIGNvbnN0IHBhcmVudE5vZGUgPSBnZXRQYXJlbnROb2RlKGVsZW1lbnQpO1xyXG4gIGlmIChwYXJlbnROb2RlID09PSBzdG9wTm9kZSB8fCAhaXNFbGVtZW50KHBhcmVudE5vZGUpIHx8IGlzTGFzdFRyYXZlcnNhYmxlTm9kZShwYXJlbnROb2RlKSkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZShwYXJlbnROb2RlKS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJyB8fCBoYXNGaXhlZFBvc2l0aW9uQW5jZXN0b3IocGFyZW50Tm9kZSwgc3RvcE5vZGUpO1xyXG59XHJcblxyXG4vLyBBIFwiY2xpcHBpbmcgYW5jZXN0b3JcIiBpcyBhbiBgb3ZlcmZsb3dgIGVsZW1lbnQgd2l0aCB0aGUgY2hhcmFjdGVyaXN0aWMgb2ZcclxuLy8gY2xpcHBpbmcgKG9yIGhpZGluZykgY2hpbGQgZWxlbWVudHMuIFRoaXMgcmV0dXJucyBhbGwgY2xpcHBpbmcgYW5jZXN0b3JzXHJcbi8vIG9mIHRoZSBnaXZlbiBlbGVtZW50IHVwIHRoZSB0cmVlLlxyXG5mdW5jdGlvbiBnZXRDbGlwcGluZ0VsZW1lbnRBbmNlc3RvcnMoZWxlbWVudCwgY2FjaGUpIHtcclxuICBjb25zdCBjYWNoZWRSZXN1bHQgPSBjYWNoZS5nZXQoZWxlbWVudCk7XHJcbiAgaWYgKGNhY2hlZFJlc3VsdCkge1xyXG4gICAgcmV0dXJuIGNhY2hlZFJlc3VsdDtcclxuICB9XHJcbiAgbGV0IHJlc3VsdCA9IGdldE92ZXJmbG93QW5jZXN0b3JzKGVsZW1lbnQsIFtdLCBmYWxzZSkuZmlsdGVyKGVsID0+IGlzRWxlbWVudChlbCkgJiYgZ2V0Tm9kZU5hbWUoZWwpICE9PSAnYm9keScpO1xyXG4gIGxldCBjdXJyZW50Q29udGFpbmluZ0Jsb2NrQ29tcHV0ZWRTdHlsZSA9IG51bGw7XHJcbiAgY29uc3QgZWxlbWVudElzRml4ZWQgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uID09PSAnZml4ZWQnO1xyXG4gIGxldCBjdXJyZW50Tm9kZSA9IGVsZW1lbnRJc0ZpeGVkID8gZ2V0UGFyZW50Tm9kZShlbGVtZW50KSA6IGVsZW1lbnQ7XHJcblxyXG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9Db250YWluaW5nX2Jsb2NrI2lkZW50aWZ5aW5nX3RoZV9jb250YWluaW5nX2Jsb2NrXHJcbiAgd2hpbGUgKGlzRWxlbWVudChjdXJyZW50Tm9kZSkgJiYgIWlzTGFzdFRyYXZlcnNhYmxlTm9kZShjdXJyZW50Tm9kZSkpIHtcclxuICAgIGNvbnN0IGNvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGN1cnJlbnROb2RlKTtcclxuICAgIGNvbnN0IGN1cnJlbnROb2RlSXNDb250YWluaW5nID0gaXNDb250YWluaW5nQmxvY2soY3VycmVudE5vZGUpO1xyXG4gICAgaWYgKCFjdXJyZW50Tm9kZUlzQ29udGFpbmluZyAmJiBjb21wdXRlZFN0eWxlLnBvc2l0aW9uID09PSAnZml4ZWQnKSB7XHJcbiAgICAgIGN1cnJlbnRDb250YWluaW5nQmxvY2tDb21wdXRlZFN0eWxlID0gbnVsbDtcclxuICAgIH1cclxuICAgIGNvbnN0IHNob3VsZERyb3BDdXJyZW50Tm9kZSA9IGVsZW1lbnRJc0ZpeGVkID8gIWN1cnJlbnROb2RlSXNDb250YWluaW5nICYmICFjdXJyZW50Q29udGFpbmluZ0Jsb2NrQ29tcHV0ZWRTdHlsZSA6ICFjdXJyZW50Tm9kZUlzQ29udGFpbmluZyAmJiBjb21wdXRlZFN0eWxlLnBvc2l0aW9uID09PSAnc3RhdGljJyAmJiAhIWN1cnJlbnRDb250YWluaW5nQmxvY2tDb21wdXRlZFN0eWxlICYmIFsnYWJzb2x1dGUnLCAnZml4ZWQnXS5pbmNsdWRlcyhjdXJyZW50Q29udGFpbmluZ0Jsb2NrQ29tcHV0ZWRTdHlsZS5wb3NpdGlvbikgfHwgaXNPdmVyZmxvd0VsZW1lbnQoY3VycmVudE5vZGUpICYmICFjdXJyZW50Tm9kZUlzQ29udGFpbmluZyAmJiBoYXNGaXhlZFBvc2l0aW9uQW5jZXN0b3IoZWxlbWVudCwgY3VycmVudE5vZGUpO1xyXG4gICAgaWYgKHNob3VsZERyb3BDdXJyZW50Tm9kZSkge1xyXG4gICAgICAvLyBEcm9wIG5vbi1jb250YWluaW5nIGJsb2Nrcy5cclxuICAgICAgcmVzdWx0ID0gcmVzdWx0LmZpbHRlcihhbmNlc3RvciA9PiBhbmNlc3RvciAhPT0gY3VycmVudE5vZGUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gUmVjb3JkIGxhc3QgY29udGFpbmluZyBibG9jayBmb3IgbmV4dCBpdGVyYXRpb24uXHJcbiAgICAgIGN1cnJlbnRDb250YWluaW5nQmxvY2tDb21wdXRlZFN0eWxlID0gY29tcHV0ZWRTdHlsZTtcclxuICAgIH1cclxuICAgIGN1cnJlbnROb2RlID0gZ2V0UGFyZW50Tm9kZShjdXJyZW50Tm9kZSk7XHJcbiAgfVxyXG4gIGNhY2hlLnNldChlbGVtZW50LCByZXN1bHQpO1xyXG4gIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbi8vIEdldHMgdGhlIG1heGltdW0gYXJlYSB0aGF0IHRoZSBlbGVtZW50IGlzIHZpc2libGUgaW4gZHVlIHRvIGFueSBudW1iZXIgb2ZcclxuLy8gY2xpcHBpbmcgYW5jZXN0b3JzLlxyXG5mdW5jdGlvbiBnZXRDbGlwcGluZ1JlY3QoX3JlZikge1xyXG4gIGxldCB7XHJcbiAgICBlbGVtZW50LFxyXG4gICAgYm91bmRhcnksXHJcbiAgICByb290Qm91bmRhcnksXHJcbiAgICBzdHJhdGVneVxyXG4gIH0gPSBfcmVmO1xyXG4gIGNvbnN0IGVsZW1lbnRDbGlwcGluZ0FuY2VzdG9ycyA9IGJvdW5kYXJ5ID09PSAnY2xpcHBpbmdBbmNlc3RvcnMnID8gZ2V0Q2xpcHBpbmdFbGVtZW50QW5jZXN0b3JzKGVsZW1lbnQsIHRoaXMuX2MpIDogW10uY29uY2F0KGJvdW5kYXJ5KTtcclxuICBjb25zdCBjbGlwcGluZ0FuY2VzdG9ycyA9IFsuLi5lbGVtZW50Q2xpcHBpbmdBbmNlc3RvcnMsIHJvb3RCb3VuZGFyeV07XHJcbiAgY29uc3QgZmlyc3RDbGlwcGluZ0FuY2VzdG9yID0gY2xpcHBpbmdBbmNlc3RvcnNbMF07XHJcbiAgY29uc3QgY2xpcHBpbmdSZWN0ID0gY2xpcHBpbmdBbmNlc3RvcnMucmVkdWNlKChhY2NSZWN0LCBjbGlwcGluZ0FuY2VzdG9yKSA9PiB7XHJcbiAgICBjb25zdCByZWN0ID0gZ2V0Q2xpZW50UmVjdEZyb21DbGlwcGluZ0FuY2VzdG9yKGVsZW1lbnQsIGNsaXBwaW5nQW5jZXN0b3IsIHN0cmF0ZWd5KTtcclxuICAgIGFjY1JlY3QudG9wID0gbWF4KHJlY3QudG9wLCBhY2NSZWN0LnRvcCk7XHJcbiAgICBhY2NSZWN0LnJpZ2h0ID0gbWluKHJlY3QucmlnaHQsIGFjY1JlY3QucmlnaHQpO1xyXG4gICAgYWNjUmVjdC5ib3R0b20gPSBtaW4ocmVjdC5ib3R0b20sIGFjY1JlY3QuYm90dG9tKTtcclxuICAgIGFjY1JlY3QubGVmdCA9IG1heChyZWN0LmxlZnQsIGFjY1JlY3QubGVmdCk7XHJcbiAgICByZXR1cm4gYWNjUmVjdDtcclxuICB9LCBnZXRDbGllbnRSZWN0RnJvbUNsaXBwaW5nQW5jZXN0b3IoZWxlbWVudCwgZmlyc3RDbGlwcGluZ0FuY2VzdG9yLCBzdHJhdGVneSkpO1xyXG4gIHJldHVybiB7XHJcbiAgICB3aWR0aDogY2xpcHBpbmdSZWN0LnJpZ2h0IC0gY2xpcHBpbmdSZWN0LmxlZnQsXHJcbiAgICBoZWlnaHQ6IGNsaXBwaW5nUmVjdC5ib3R0b20gLSBjbGlwcGluZ1JlY3QudG9wLFxyXG4gICAgeDogY2xpcHBpbmdSZWN0LmxlZnQsXHJcbiAgICB5OiBjbGlwcGluZ1JlY3QudG9wXHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0RGltZW5zaW9ucyhlbGVtZW50KSB7XHJcbiAgY29uc3Qge1xyXG4gICAgd2lkdGgsXHJcbiAgICBoZWlnaHRcclxuICB9ID0gZ2V0Q3NzRGltZW5zaW9ucyhlbGVtZW50KTtcclxuICByZXR1cm4ge1xyXG4gICAgd2lkdGgsXHJcbiAgICBoZWlnaHRcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRSZWN0UmVsYXRpdmVUb09mZnNldFBhcmVudChlbGVtZW50LCBvZmZzZXRQYXJlbnQsIHN0cmF0ZWd5KSB7XHJcbiAgY29uc3QgaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgPSBpc0hUTUxFbGVtZW50KG9mZnNldFBhcmVudCk7XHJcbiAgY29uc3QgZG9jdW1lbnRFbGVtZW50ID0gZ2V0RG9jdW1lbnRFbGVtZW50KG9mZnNldFBhcmVudCk7XHJcbiAgY29uc3QgaXNGaXhlZCA9IHN0cmF0ZWd5ID09PSAnZml4ZWQnO1xyXG4gIGNvbnN0IHJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCwgdHJ1ZSwgaXNGaXhlZCwgb2Zmc2V0UGFyZW50KTtcclxuICBsZXQgc2Nyb2xsID0ge1xyXG4gICAgc2Nyb2xsTGVmdDogMCxcclxuICAgIHNjcm9sbFRvcDogMFxyXG4gIH07XHJcbiAgY29uc3Qgb2Zmc2V0cyA9IGNyZWF0ZUNvb3JkcygwKTtcclxuICBpZiAoaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgfHwgIWlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ICYmICFpc0ZpeGVkKSB7XHJcbiAgICBpZiAoZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSAhPT0gJ2JvZHknIHx8IGlzT3ZlcmZsb3dFbGVtZW50KGRvY3VtZW50RWxlbWVudCkpIHtcclxuICAgICAgc2Nyb2xsID0gZ2V0Tm9kZVNjcm9sbChvZmZzZXRQYXJlbnQpO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzT2Zmc2V0UGFyZW50QW5FbGVtZW50KSB7XHJcbiAgICAgIGNvbnN0IG9mZnNldFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qob2Zmc2V0UGFyZW50LCB0cnVlLCBpc0ZpeGVkLCBvZmZzZXRQYXJlbnQpO1xyXG4gICAgICBvZmZzZXRzLnggPSBvZmZzZXRSZWN0LnggKyBvZmZzZXRQYXJlbnQuY2xpZW50TGVmdDtcclxuICAgICAgb2Zmc2V0cy55ID0gb2Zmc2V0UmVjdC55ICsgb2Zmc2V0UGFyZW50LmNsaWVudFRvcDtcclxuICAgIH0gZWxzZSBpZiAoZG9jdW1lbnRFbGVtZW50KSB7XHJcbiAgICAgIG9mZnNldHMueCA9IGdldFdpbmRvd1Njcm9sbEJhclgoZG9jdW1lbnRFbGVtZW50KTtcclxuICAgIH1cclxuICB9XHJcbiAgY29uc3QgeCA9IHJlY3QubGVmdCArIHNjcm9sbC5zY3JvbGxMZWZ0IC0gb2Zmc2V0cy54O1xyXG4gIGNvbnN0IHkgPSByZWN0LnRvcCArIHNjcm9sbC5zY3JvbGxUb3AgLSBvZmZzZXRzLnk7XHJcbiAgcmV0dXJuIHtcclxuICAgIHgsXHJcbiAgICB5LFxyXG4gICAgd2lkdGg6IHJlY3Qud2lkdGgsXHJcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0XHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0VHJ1ZU9mZnNldFBhcmVudChlbGVtZW50LCBwb2x5ZmlsbCkge1xyXG4gIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSB8fCBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uID09PSAnZml4ZWQnKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbiAgaWYgKHBvbHlmaWxsKSB7XHJcbiAgICByZXR1cm4gcG9seWZpbGwoZWxlbWVudCk7XHJcbiAgfVxyXG4gIHJldHVybiBlbGVtZW50Lm9mZnNldFBhcmVudDtcclxufVxyXG5cclxuLy8gR2V0cyB0aGUgY2xvc2VzdCBhbmNlc3RvciBwb3NpdGlvbmVkIGVsZW1lbnQuIEhhbmRsZXMgc29tZSBlZGdlIGNhc2VzLFxyXG4vLyBzdWNoIGFzIHRhYmxlIGFuY2VzdG9ycyBhbmQgY3Jvc3MgYnJvd3NlciBidWdzLlxyXG5mdW5jdGlvbiBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCwgcG9seWZpbGwpIHtcclxuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coZWxlbWVudCk7XHJcbiAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8IGlzVG9wTGF5ZXIoZWxlbWVudCkpIHtcclxuICAgIHJldHVybiB3aW5kb3c7XHJcbiAgfVxyXG4gIGxldCBvZmZzZXRQYXJlbnQgPSBnZXRUcnVlT2Zmc2V0UGFyZW50KGVsZW1lbnQsIHBvbHlmaWxsKTtcclxuICB3aGlsZSAob2Zmc2V0UGFyZW50ICYmIGlzVGFibGVFbGVtZW50KG9mZnNldFBhcmVudCkgJiYgZ2V0Q29tcHV0ZWRTdHlsZShvZmZzZXRQYXJlbnQpLnBvc2l0aW9uID09PSAnc3RhdGljJykge1xyXG4gICAgb2Zmc2V0UGFyZW50ID0gZ2V0VHJ1ZU9mZnNldFBhcmVudChvZmZzZXRQYXJlbnQsIHBvbHlmaWxsKTtcclxuICB9XHJcbiAgaWYgKG9mZnNldFBhcmVudCAmJiAoZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSA9PT0gJ2h0bWwnIHx8IGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgPT09ICdib2R5JyAmJiBnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gPT09ICdzdGF0aWMnICYmICFpc0NvbnRhaW5pbmdCbG9jayhvZmZzZXRQYXJlbnQpKSkge1xyXG4gICAgcmV0dXJuIHdpbmRvdztcclxuICB9XHJcbiAgcmV0dXJuIG9mZnNldFBhcmVudCB8fCBnZXRDb250YWluaW5nQmxvY2soZWxlbWVudCkgfHwgd2luZG93O1xyXG59XHJcblxyXG5jb25zdCBnZXRFbGVtZW50UmVjdHMgPSBhc3luYyBmdW5jdGlvbiAoZGF0YSkge1xyXG4gIGNvbnN0IGdldE9mZnNldFBhcmVudEZuID0gdGhpcy5nZXRPZmZzZXRQYXJlbnQgfHwgZ2V0T2Zmc2V0UGFyZW50O1xyXG4gIGNvbnN0IGdldERpbWVuc2lvbnNGbiA9IHRoaXMuZ2V0RGltZW5zaW9ucztcclxuICBjb25zdCBmbG9hdGluZ0RpbWVuc2lvbnMgPSBhd2FpdCBnZXREaW1lbnNpb25zRm4oZGF0YS5mbG9hdGluZyk7XHJcbiAgcmV0dXJuIHtcclxuICAgIHJlZmVyZW5jZTogZ2V0UmVjdFJlbGF0aXZlVG9PZmZzZXRQYXJlbnQoZGF0YS5yZWZlcmVuY2UsIGF3YWl0IGdldE9mZnNldFBhcmVudEZuKGRhdGEuZmxvYXRpbmcpLCBkYXRhLnN0cmF0ZWd5KSxcclxuICAgIGZsb2F0aW5nOiB7XHJcbiAgICAgIHg6IDAsXHJcbiAgICAgIHk6IDAsXHJcbiAgICAgIHdpZHRoOiBmbG9hdGluZ0RpbWVuc2lvbnMud2lkdGgsXHJcbiAgICAgIGhlaWdodDogZmxvYXRpbmdEaW1lbnNpb25zLmhlaWdodFxyXG4gICAgfVxyXG4gIH07XHJcbn07XHJcblxyXG5mdW5jdGlvbiBpc1JUTChlbGVtZW50KSB7XHJcbiAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkuZGlyZWN0aW9uID09PSAncnRsJztcclxufVxyXG5cclxuY29uc3QgcGxhdGZvcm0gPSB7XHJcbiAgY29udmVydE9mZnNldFBhcmVudFJlbGF0aXZlUmVjdFRvVmlld3BvcnRSZWxhdGl2ZVJlY3QsXHJcbiAgZ2V0RG9jdW1lbnRFbGVtZW50LFxyXG4gIGdldENsaXBwaW5nUmVjdCxcclxuICBnZXRPZmZzZXRQYXJlbnQsXHJcbiAgZ2V0RWxlbWVudFJlY3RzLFxyXG4gIGdldENsaWVudFJlY3RzLFxyXG4gIGdldERpbWVuc2lvbnMsXHJcbiAgZ2V0U2NhbGUsXHJcbiAgaXNFbGVtZW50LFxyXG4gIGlzUlRMXHJcbn07XHJcblxyXG4vLyBodHRwczovL3NhbXRob3IuYXUvMjAyMS9vYnNlcnZpbmctZG9tL1xyXG5mdW5jdGlvbiBvYnNlcnZlTW92ZShlbGVtZW50LCBvbk1vdmUpIHtcclxuICBsZXQgaW8gPSBudWxsO1xyXG4gIGxldCB0aW1lb3V0SWQ7XHJcbiAgY29uc3Qgcm9vdCA9IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KTtcclxuICBmdW5jdGlvbiBjbGVhbnVwKCkge1xyXG4gICAgdmFyIF9pbztcclxuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xyXG4gICAgKF9pbyA9IGlvKSA9PSBudWxsIHx8IF9pby5kaXNjb25uZWN0KCk7XHJcbiAgICBpbyA9IG51bGw7XHJcbiAgfVxyXG4gIGZ1bmN0aW9uIHJlZnJlc2goc2tpcCwgdGhyZXNob2xkKSB7XHJcbiAgICBpZiAoc2tpcCA9PT0gdm9pZCAwKSB7XHJcbiAgICAgIHNraXAgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmICh0aHJlc2hvbGQgPT09IHZvaWQgMCkge1xyXG4gICAgICB0aHJlc2hvbGQgPSAxO1xyXG4gICAgfVxyXG4gICAgY2xlYW51cCgpO1xyXG4gICAgY29uc3Qge1xyXG4gICAgICBsZWZ0LFxyXG4gICAgICB0b3AsXHJcbiAgICAgIHdpZHRoLFxyXG4gICAgICBoZWlnaHRcclxuICAgIH0gPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgaWYgKCFza2lwKSB7XHJcbiAgICAgIG9uTW92ZSgpO1xyXG4gICAgfVxyXG4gICAgaWYgKCF3aWR0aCB8fCAhaGVpZ2h0KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGluc2V0VG9wID0gZmxvb3IodG9wKTtcclxuICAgIGNvbnN0IGluc2V0UmlnaHQgPSBmbG9vcihyb290LmNsaWVudFdpZHRoIC0gKGxlZnQgKyB3aWR0aCkpO1xyXG4gICAgY29uc3QgaW5zZXRCb3R0b20gPSBmbG9vcihyb290LmNsaWVudEhlaWdodCAtICh0b3AgKyBoZWlnaHQpKTtcclxuICAgIGNvbnN0IGluc2V0TGVmdCA9IGZsb29yKGxlZnQpO1xyXG4gICAgY29uc3Qgcm9vdE1hcmdpbiA9IC1pbnNldFRvcCArIFwicHggXCIgKyAtaW5zZXRSaWdodCArIFwicHggXCIgKyAtaW5zZXRCb3R0b20gKyBcInB4IFwiICsgLWluc2V0TGVmdCArIFwicHhcIjtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIHJvb3RNYXJnaW4sXHJcbiAgICAgIHRocmVzaG9sZDogbWF4KDAsIG1pbigxLCB0aHJlc2hvbGQpKSB8fCAxXHJcbiAgICB9O1xyXG4gICAgbGV0IGlzRmlyc3RVcGRhdGUgPSB0cnVlO1xyXG4gICAgZnVuY3Rpb24gaGFuZGxlT2JzZXJ2ZShlbnRyaWVzKSB7XHJcbiAgICAgIGNvbnN0IHJhdGlvID0gZW50cmllc1swXS5pbnRlcnNlY3Rpb25SYXRpbztcclxuICAgICAgaWYgKHJhdGlvICE9PSB0aHJlc2hvbGQpIHtcclxuICAgICAgICBpZiAoIWlzRmlyc3RVcGRhdGUpIHtcclxuICAgICAgICAgIHJldHVybiByZWZyZXNoKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghcmF0aW8pIHtcclxuICAgICAgICAgIC8vIElmIHRoZSByZWZlcmVuY2UgaXMgY2xpcHBlZCwgdGhlIHJhdGlvIGlzIDAuIFRocm90dGxlIHRoZSByZWZyZXNoXHJcbiAgICAgICAgICAvLyB0byBwcmV2ZW50IGFuIGluZmluaXRlIGxvb3Agb2YgdXBkYXRlcy5cclxuICAgICAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICByZWZyZXNoKGZhbHNlLCAxZS03KTtcclxuICAgICAgICAgIH0sIDEwMDApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZWZyZXNoKGZhbHNlLCByYXRpbyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlzRmlyc3RVcGRhdGUgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBPbGRlciBicm93c2VycyBkb24ndCBzdXBwb3J0IGEgYGRvY3VtZW50YCBhcyB0aGUgcm9vdCBhbmQgd2lsbCB0aHJvdyBhblxyXG4gICAgLy8gZXJyb3IuXHJcbiAgICB0cnkge1xyXG4gICAgICBpbyA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihoYW5kbGVPYnNlcnZlLCB7XHJcbiAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgICAvLyBIYW5kbGUgPGlmcmFtZT5zXHJcbiAgICAgICAgcm9vdDogcm9vdC5vd25lckRvY3VtZW50XHJcbiAgICAgIH0pO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICBpbyA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihoYW5kbGVPYnNlcnZlLCBvcHRpb25zKTtcclxuICAgIH1cclxuICAgIGlvLm9ic2VydmUoZWxlbWVudCk7XHJcbiAgfVxyXG4gIHJlZnJlc2godHJ1ZSk7XHJcbiAgcmV0dXJuIGNsZWFudXA7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBdXRvbWF0aWNhbGx5IHVwZGF0ZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBmbG9hdGluZyBlbGVtZW50IHdoZW4gbmVjZXNzYXJ5LlxyXG4gKiBTaG91bGQgb25seSBiZSBjYWxsZWQgd2hlbiB0aGUgZmxvYXRpbmcgZWxlbWVudCBpcyBtb3VudGVkIG9uIHRoZSBET00gb3JcclxuICogdmlzaWJsZSBvbiB0aGUgc2NyZWVuLlxyXG4gKiBAcmV0dXJucyBjbGVhbnVwIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIGludm9rZWQgd2hlbiB0aGUgZmxvYXRpbmcgZWxlbWVudCBpc1xyXG4gKiByZW1vdmVkIGZyb20gdGhlIERPTSBvciBoaWRkZW4gZnJvbSB0aGUgc2NyZWVuLlxyXG4gKiBAc2VlIGh0dHBzOi8vZmxvYXRpbmctdWkuY29tL2RvY3MvYXV0b1VwZGF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gYXV0b1VwZGF0ZShyZWZlcmVuY2UsIGZsb2F0aW5nLCB1cGRhdGUsIG9wdGlvbnMpIHtcclxuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XHJcbiAgICBvcHRpb25zID0ge307XHJcbiAgfVxyXG4gIGNvbnN0IHtcclxuICAgIGFuY2VzdG9yU2Nyb2xsID0gdHJ1ZSxcclxuICAgIGFuY2VzdG9yUmVzaXplID0gdHJ1ZSxcclxuICAgIGVsZW1lbnRSZXNpemUgPSB0eXBlb2YgUmVzaXplT2JzZXJ2ZXIgPT09ICdmdW5jdGlvbicsXHJcbiAgICBsYXlvdXRTaGlmdCA9IHR5cGVvZiBJbnRlcnNlY3Rpb25PYnNlcnZlciA9PT0gJ2Z1bmN0aW9uJyxcclxuICAgIGFuaW1hdGlvbkZyYW1lID0gZmFsc2VcclxuICB9ID0gb3B0aW9ucztcclxuICBjb25zdCByZWZlcmVuY2VFbCA9IHVud3JhcEVsZW1lbnQocmVmZXJlbmNlKTtcclxuICBjb25zdCBhbmNlc3RvcnMgPSBhbmNlc3RvclNjcm9sbCB8fCBhbmNlc3RvclJlc2l6ZSA/IFsuLi4ocmVmZXJlbmNlRWwgPyBnZXRPdmVyZmxvd0FuY2VzdG9ycyhyZWZlcmVuY2VFbCkgOiBbXSksIC4uLmdldE92ZXJmbG93QW5jZXN0b3JzKGZsb2F0aW5nKV0gOiBbXTtcclxuICBhbmNlc3RvcnMuZm9yRWFjaChhbmNlc3RvciA9PiB7XHJcbiAgICBhbmNlc3RvclNjcm9sbCAmJiBhbmNlc3Rvci5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB1cGRhdGUsIHtcclxuICAgICAgcGFzc2l2ZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBhbmNlc3RvclJlc2l6ZSAmJiBhbmNlc3Rvci5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB1cGRhdGUpO1xyXG4gIH0pO1xyXG4gIGNvbnN0IGNsZWFudXBJbyA9IHJlZmVyZW5jZUVsICYmIGxheW91dFNoaWZ0ID8gb2JzZXJ2ZU1vdmUocmVmZXJlbmNlRWwsIHVwZGF0ZSkgOiBudWxsO1xyXG4gIGxldCByZW9ic2VydmVGcmFtZSA9IC0xO1xyXG4gIGxldCByZXNpemVPYnNlcnZlciA9IG51bGw7XHJcbiAgaWYgKGVsZW1lbnRSZXNpemUpIHtcclxuICAgIHJlc2l6ZU9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKF9yZWYgPT4ge1xyXG4gICAgICBsZXQgW2ZpcnN0RW50cnldID0gX3JlZjtcclxuICAgICAgaWYgKGZpcnN0RW50cnkgJiYgZmlyc3RFbnRyeS50YXJnZXQgPT09IHJlZmVyZW5jZUVsICYmIHJlc2l6ZU9ic2VydmVyKSB7XHJcbiAgICAgICAgLy8gUHJldmVudCB1cGRhdGUgbG9vcHMgd2hlbiB1c2luZyB0aGUgYHNpemVgIG1pZGRsZXdhcmUuXHJcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zsb2F0aW5nLXVpL2Zsb2F0aW5nLXVpL2lzc3Vlcy8xNzQwXHJcbiAgICAgICAgcmVzaXplT2JzZXJ2ZXIudW5vYnNlcnZlKGZsb2F0aW5nKTtcclxuICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShyZW9ic2VydmVGcmFtZSk7XHJcbiAgICAgICAgcmVvYnNlcnZlRnJhbWUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xyXG4gICAgICAgICAgdmFyIF9yZXNpemVPYnNlcnZlcjtcclxuICAgICAgICAgIChfcmVzaXplT2JzZXJ2ZXIgPSByZXNpemVPYnNlcnZlcikgPT0gbnVsbCB8fCBfcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShmbG9hdGluZyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgdXBkYXRlKCk7XHJcbiAgICB9KTtcclxuICAgIGlmIChyZWZlcmVuY2VFbCAmJiAhYW5pbWF0aW9uRnJhbWUpIHtcclxuICAgICAgcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShyZWZlcmVuY2VFbCk7XHJcbiAgICB9XHJcbiAgICByZXNpemVPYnNlcnZlci5vYnNlcnZlKGZsb2F0aW5nKTtcclxuICB9XHJcbiAgbGV0IGZyYW1lSWQ7XHJcbiAgbGV0IHByZXZSZWZSZWN0ID0gYW5pbWF0aW9uRnJhbWUgPyBnZXRCb3VuZGluZ0NsaWVudFJlY3QocmVmZXJlbmNlKSA6IG51bGw7XHJcbiAgaWYgKGFuaW1hdGlvbkZyYW1lKSB7XHJcbiAgICBmcmFtZUxvb3AoKTtcclxuICB9XHJcbiAgZnVuY3Rpb24gZnJhbWVMb29wKCkge1xyXG4gICAgY29uc3QgbmV4dFJlZlJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QocmVmZXJlbmNlKTtcclxuICAgIGlmIChwcmV2UmVmUmVjdCAmJiAobmV4dFJlZlJlY3QueCAhPT0gcHJldlJlZlJlY3QueCB8fCBuZXh0UmVmUmVjdC55ICE9PSBwcmV2UmVmUmVjdC55IHx8IG5leHRSZWZSZWN0LndpZHRoICE9PSBwcmV2UmVmUmVjdC53aWR0aCB8fCBuZXh0UmVmUmVjdC5oZWlnaHQgIT09IHByZXZSZWZSZWN0LmhlaWdodCkpIHtcclxuICAgICAgdXBkYXRlKCk7XHJcbiAgICB9XHJcbiAgICBwcmV2UmVmUmVjdCA9IG5leHRSZWZSZWN0O1xyXG4gICAgZnJhbWVJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShmcmFtZUxvb3ApO1xyXG4gIH1cclxuICB1cGRhdGUoKTtcclxuICByZXR1cm4gKCkgPT4ge1xyXG4gICAgdmFyIF9yZXNpemVPYnNlcnZlcjI7XHJcbiAgICBhbmNlc3RvcnMuZm9yRWFjaChhbmNlc3RvciA9PiB7XHJcbiAgICAgIGFuY2VzdG9yU2Nyb2xsICYmIGFuY2VzdG9yLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHVwZGF0ZSk7XHJcbiAgICAgIGFuY2VzdG9yUmVzaXplICYmIGFuY2VzdG9yLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHVwZGF0ZSk7XHJcbiAgICB9KTtcclxuICAgIGNsZWFudXBJbyA9PSBudWxsIHx8IGNsZWFudXBJbygpO1xyXG4gICAgKF9yZXNpemVPYnNlcnZlcjIgPSByZXNpemVPYnNlcnZlcikgPT0gbnVsbCB8fCBfcmVzaXplT2JzZXJ2ZXIyLmRpc2Nvbm5lY3QoKTtcclxuICAgIHJlc2l6ZU9ic2VydmVyID0gbnVsbDtcclxuICAgIGlmIChhbmltYXRpb25GcmFtZSkge1xyXG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShmcmFtZUlkKTtcclxuICAgIH1cclxuICB9O1xyXG59XHJcblxyXG4vLyBgT2Zmc2V0T3B0aW9uc2AgaW4gdGhlIGNvcmUgbGlicmFyeSB3ZXJlIG9yaWdpbmFsbHkgYWxyZWFkeSBgRGVyaXZhYmxlYC4gRm9yXHJcbi8vIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5LCByZS1kZWZpbmUgaXQgaGVyZSB0byB1c2UgdGhlIERPTSBEZXJpdmFibGUgdHlwZS5cclxuXHJcbi8qKlxyXG4gKiBSZXNvbHZlcyB3aXRoIGFuIG9iamVjdCBvZiBvdmVyZmxvdyBzaWRlIG9mZnNldHMgdGhhdCBkZXRlcm1pbmUgaG93IG11Y2ggdGhlXHJcbiAqIGVsZW1lbnQgaXMgb3ZlcmZsb3dpbmcgYSBnaXZlbiBjbGlwcGluZyBib3VuZGFyeSBvbiBlYWNoIHNpZGUuXHJcbiAqIC0gcG9zaXRpdmUgPSBvdmVyZmxvd2luZyB0aGUgYm91bmRhcnkgYnkgdGhhdCBudW1iZXIgb2YgcGl4ZWxzXHJcbiAqIC0gbmVnYXRpdmUgPSBob3cgbWFueSBwaXhlbHMgbGVmdCBiZWZvcmUgaXQgd2lsbCBvdmVyZmxvd1xyXG4gKiAtIDAgPSBsaWVzIGZsdXNoIHdpdGggdGhlIGJvdW5kYXJ5XHJcbiAqIEBzZWUgaHR0cHM6Ly9mbG9hdGluZy11aS5jb20vZG9jcy9kZXRlY3RPdmVyZmxvd1xyXG4gKi9cclxuY29uc3QgZGV0ZWN0T3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyQxO1xyXG5cclxuLyoqXHJcbiAqIE1vZGlmaWVzIHRoZSBwbGFjZW1lbnQgYnkgdHJhbnNsYXRpbmcgdGhlIGZsb2F0aW5nIGVsZW1lbnQgYWxvbmcgdGhlXHJcbiAqIHNwZWNpZmllZCBheGVzLlxyXG4gKiBBIG51bWJlciAoc2hvcnRoYW5kIGZvciBgbWFpbkF4aXNgIG9yIGRpc3RhbmNlKSwgb3IgYW4gYXhlcyBjb25maWd1cmF0aW9uXHJcbiAqIG9iamVjdCBtYXkgYmUgcGFzc2VkLlxyXG4gKiBAc2VlIGh0dHBzOi8vZmxvYXRpbmctdWkuY29tL2RvY3Mvb2Zmc2V0XHJcbiAqL1xyXG5jb25zdCBvZmZzZXQgPSBvZmZzZXQkMTtcclxuXHJcbi8qKlxyXG4gKiBPcHRpbWl6ZXMgdGhlIHZpc2liaWxpdHkgb2YgdGhlIGZsb2F0aW5nIGVsZW1lbnQgYnkgY2hvb3NpbmcgdGhlIHBsYWNlbWVudFxyXG4gKiB0aGF0IGhhcyB0aGUgbW9zdCBzcGFjZSBhdmFpbGFibGUgYXV0b21hdGljYWxseSwgd2l0aG91dCBuZWVkaW5nIHRvIHNwZWNpZnkgYVxyXG4gKiBwcmVmZXJyZWQgcGxhY2VtZW50LiBBbHRlcm5hdGl2ZSB0byBgZmxpcGAuXHJcbiAqIEBzZWUgaHR0cHM6Ly9mbG9hdGluZy11aS5jb20vZG9jcy9hdXRvUGxhY2VtZW50XHJcbiAqL1xyXG5jb25zdCBhdXRvUGxhY2VtZW50ID0gYXV0b1BsYWNlbWVudCQxO1xyXG5cclxuLyoqXHJcbiAqIE9wdGltaXplcyB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgZmxvYXRpbmcgZWxlbWVudCBieSBzaGlmdGluZyBpdCBpbiBvcmRlciB0b1xyXG4gKiBrZWVwIGl0IGluIHZpZXcgd2hlbiBpdCB3aWxsIG92ZXJmbG93IHRoZSBjbGlwcGluZyBib3VuZGFyeS5cclxuICogQHNlZSBodHRwczovL2Zsb2F0aW5nLXVpLmNvbS9kb2NzL3NoaWZ0XHJcbiAqL1xyXG5jb25zdCBzaGlmdCA9IHNoaWZ0JDE7XHJcblxyXG4vKipcclxuICogT3B0aW1pemVzIHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBmbG9hdGluZyBlbGVtZW50IGJ5IGZsaXBwaW5nIHRoZSBgcGxhY2VtZW50YFxyXG4gKiBpbiBvcmRlciB0byBrZWVwIGl0IGluIHZpZXcgd2hlbiB0aGUgcHJlZmVycmVkIHBsYWNlbWVudChzKSB3aWxsIG92ZXJmbG93IHRoZVxyXG4gKiBjbGlwcGluZyBib3VuZGFyeS4gQWx0ZXJuYXRpdmUgdG8gYGF1dG9QbGFjZW1lbnRgLlxyXG4gKiBAc2VlIGh0dHBzOi8vZmxvYXRpbmctdWkuY29tL2RvY3MvZmxpcFxyXG4gKi9cclxuY29uc3QgZmxpcCA9IGZsaXAkMTtcclxuXHJcbi8qKlxyXG4gKiBQcm92aWRlcyBkYXRhIHRoYXQgYWxsb3dzIHlvdSB0byBjaGFuZ2UgdGhlIHNpemUgb2YgdGhlIGZsb2F0aW5nIGVsZW1lbnQg4oCUXHJcbiAqIGZvciBpbnN0YW5jZSwgcHJldmVudCBpdCBmcm9tIG92ZXJmbG93aW5nIHRoZSBjbGlwcGluZyBib3VuZGFyeSBvciBtYXRjaCB0aGVcclxuICogd2lkdGggb2YgdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxyXG4gKiBAc2VlIGh0dHBzOi8vZmxvYXRpbmctdWkuY29tL2RvY3Mvc2l6ZVxyXG4gKi9cclxuY29uc3Qgc2l6ZSA9IHNpemUkMTtcclxuXHJcbi8qKlxyXG4gKiBQcm92aWRlcyBkYXRhIHRvIGhpZGUgdGhlIGZsb2F0aW5nIGVsZW1lbnQgaW4gYXBwbGljYWJsZSBzaXR1YXRpb25zLCBzdWNoIGFzXHJcbiAqIHdoZW4gaXQgaXMgbm90IGluIHRoZSBzYW1lIGNsaXBwaW5nIGNvbnRleHQgYXMgdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxyXG4gKiBAc2VlIGh0dHBzOi8vZmxvYXRpbmctdWkuY29tL2RvY3MvaGlkZVxyXG4gKi9cclxuY29uc3QgaGlkZSA9IGhpZGUkMTtcclxuXHJcbi8qKlxyXG4gKiBQcm92aWRlcyBkYXRhIHRvIHBvc2l0aW9uIGFuIGlubmVyIGVsZW1lbnQgb2YgdGhlIGZsb2F0aW5nIGVsZW1lbnQgc28gdGhhdCBpdFxyXG4gKiBhcHBlYXJzIGNlbnRlcmVkIHRvIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cclxuICogQHNlZSBodHRwczovL2Zsb2F0aW5nLXVpLmNvbS9kb2NzL2Fycm93XHJcbiAqL1xyXG5jb25zdCBhcnJvdyA9IGFycm93JDE7XHJcblxyXG4vKipcclxuICogUHJvdmlkZXMgaW1wcm92ZWQgcG9zaXRpb25pbmcgZm9yIGlubGluZSByZWZlcmVuY2UgZWxlbWVudHMgdGhhdCBjYW4gc3BhblxyXG4gKiBvdmVyIG11bHRpcGxlIGxpbmVzLCBzdWNoIGFzIGh5cGVybGlua3Mgb3IgcmFuZ2Ugc2VsZWN0aW9ucy5cclxuICogQHNlZSBodHRwczovL2Zsb2F0aW5nLXVpLmNvbS9kb2NzL2lubGluZVxyXG4gKi9cclxuY29uc3QgaW5saW5lID0gaW5saW5lJDE7XHJcblxyXG4vKipcclxuICogQnVpbHQtaW4gYGxpbWl0ZXJgIHRoYXQgd2lsbCBzdG9wIGBzaGlmdCgpYCBhdCBhIGNlcnRhaW4gcG9pbnQuXHJcbiAqL1xyXG5jb25zdCBsaW1pdFNoaWZ0ID0gbGltaXRTaGlmdCQxO1xyXG5cclxuLyoqXHJcbiAqIENvbXB1dGVzIHRoZSBgeGAgYW5kIGB5YCBjb29yZGluYXRlcyB0aGF0IHdpbGwgcGxhY2UgdGhlIGZsb2F0aW5nIGVsZW1lbnRcclxuICogbmV4dCB0byBhIGdpdmVuIHJlZmVyZW5jZSBlbGVtZW50LlxyXG4gKi9cclxuY29uc3QgY29tcHV0ZVBvc2l0aW9uID0gKHJlZmVyZW5jZSwgZmxvYXRpbmcsIG9wdGlvbnMpID0+IHtcclxuICAvLyBUaGlzIGNhY2hlcyB0aGUgZXhwZW5zaXZlIGBnZXRDbGlwcGluZ0VsZW1lbnRBbmNlc3RvcnNgIGZ1bmN0aW9uIHNvIHRoYXRcclxuICAvLyBtdWx0aXBsZSBsaWZlY3ljbGUgcmVzZXRzIHJlLXVzZSB0aGUgc2FtZSByZXN1bHQuIEl0IG9ubHkgbGl2ZXMgZm9yIGFcclxuICAvLyBzaW5nbGUgY2FsbC4gSWYgb3RoZXIgZnVuY3Rpb25zIGJlY29tZSBleHBlbnNpdmUsIHdlIGNhbiBhZGQgdGhlbSBhcyB3ZWxsLlxyXG4gIGNvbnN0IGNhY2hlID0gbmV3IE1hcCgpO1xyXG4gIGNvbnN0IG1lcmdlZE9wdGlvbnMgPSB7XHJcbiAgICBwbGF0Zm9ybSxcclxuICAgIC4uLm9wdGlvbnNcclxuICB9O1xyXG4gIGNvbnN0IHBsYXRmb3JtV2l0aENhY2hlID0ge1xyXG4gICAgLi4ubWVyZ2VkT3B0aW9ucy5wbGF0Zm9ybSxcclxuICAgIF9jOiBjYWNoZVxyXG4gIH07XHJcbiAgcmV0dXJuIGNvbXB1dGVQb3NpdGlvbiQxKHJlZmVyZW5jZSwgZmxvYXRpbmcsIHtcclxuICAgIC4uLm1lcmdlZE9wdGlvbnMsXHJcbiAgICBwbGF0Zm9ybTogcGxhdGZvcm1XaXRoQ2FjaGVcclxuICB9KTtcclxufTtcclxuXHJcbmV4cG9ydCB7IGFycm93LCBhdXRvUGxhY2VtZW50LCBhdXRvVXBkYXRlLCBjb21wdXRlUG9zaXRpb24sIGRldGVjdE92ZXJmbG93LCBmbGlwLCBoaWRlLCBpbmxpbmUsIGxpbWl0U2hpZnQsIG9mZnNldCwgcGxhdGZvcm0sIHNoaWZ0LCBzaXplIH07XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs":
/*!*****************************************************************************!*\
  !*** ../node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrow: () => (/* binding */ arrow),\n/* harmony export */   autoPlacement: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.autoPlacement),\n/* harmony export */   autoUpdate: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.autoUpdate),\n/* harmony export */   computePosition: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.computePosition),\n/* harmony export */   detectOverflow: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.detectOverflow),\n/* harmony export */   flip: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.flip),\n/* harmony export */   getOverflowAncestors: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_1__.getOverflowAncestors),\n/* harmony export */   hide: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.hide),\n/* harmony export */   inline: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.inline),\n/* harmony export */   limitShift: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.limitShift),\n/* harmony export */   offset: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.offset),\n/* harmony export */   platform: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.platform),\n/* harmony export */   shift: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.shift),\n/* harmony export */   size: () => (/* reexport safe */ _floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.size),\n/* harmony export */   useFloating: () => (/* binding */ useFloating)\n/* harmony export */ });\n/* harmony import */ var _floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @floating-ui/dom */ \"(ssr)/../node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n/* harmony import */ var _floating_ui_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @floating-ui/dom */ \"(ssr)/../node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Provides data to position an inner element of the floating element so that it\r\n * appears centered to the reference element.\r\n * This wraps the core `arrow` middleware to allow React refs as the element.\r\n * @see https://floating-ui.com/docs/arrow\r\n */\r\nconst arrow = options => {\r\n  function isRef(value) {\r\n    return {}.hasOwnProperty.call(value, 'current');\r\n  }\r\n  return {\r\n    name: 'arrow',\r\n    options,\r\n    fn(state) {\r\n      const {\r\n        element,\r\n        padding\r\n      } = typeof options === 'function' ? options(state) : options;\r\n      if (element && isRef(element)) {\r\n        if (element.current != null) {\r\n          return (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.arrow)({\r\n            element: element.current,\r\n            padding\r\n          }).fn(state);\r\n        }\r\n        return {};\r\n      }\r\n      if (element) {\r\n        return (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.arrow)({\r\n          element,\r\n          padding\r\n        }).fn(state);\r\n      }\r\n      return {};\r\n    }\r\n  };\r\n};\r\n\r\nvar index = typeof document !== 'undefined' ? react__WEBPACK_IMPORTED_MODULE_2__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_2__.useEffect;\r\n\r\n// Fork of `fast-deep-equal` that only does the comparisons we need and compares\r\n// functions\r\nfunction deepEqual(a, b) {\r\n  if (a === b) {\r\n    return true;\r\n  }\r\n  if (typeof a !== typeof b) {\r\n    return false;\r\n  }\r\n  if (typeof a === 'function' && a.toString() === b.toString()) {\r\n    return true;\r\n  }\r\n  let length;\r\n  let i;\r\n  let keys;\r\n  if (a && b && typeof a === 'object') {\r\n    if (Array.isArray(a)) {\r\n      length = a.length;\r\n      if (length !== b.length) return false;\r\n      for (i = length; i-- !== 0;) {\r\n        if (!deepEqual(a[i], b[i])) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    keys = Object.keys(a);\r\n    length = keys.length;\r\n    if (length !== Object.keys(b).length) {\r\n      return false;\r\n    }\r\n    for (i = length; i-- !== 0;) {\r\n      if (!{}.hasOwnProperty.call(b, keys[i])) {\r\n        return false;\r\n      }\r\n    }\r\n    for (i = length; i-- !== 0;) {\r\n      const key = keys[i];\r\n      if (key === '_owner' && a.$$typeof) {\r\n        continue;\r\n      }\r\n      if (!deepEqual(a[key], b[key])) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  return a !== a && b !== b;\r\n}\r\n\r\nfunction getDPR(element) {\r\n  if (typeof window === 'undefined') {\r\n    return 1;\r\n  }\r\n  const win = element.ownerDocument.defaultView || window;\r\n  return win.devicePixelRatio || 1;\r\n}\r\n\r\nfunction roundByDPR(element, value) {\r\n  const dpr = getDPR(element);\r\n  return Math.round(value * dpr) / dpr;\r\n}\r\n\r\nfunction useLatestRef(value) {\r\n  const ref = react__WEBPACK_IMPORTED_MODULE_2__.useRef(value);\r\n  index(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref;\r\n}\r\n\r\n/**\r\n * Provides data to position a floating element.\r\n * @see https://floating-ui.com/docs/useFloating\r\n */\r\nfunction useFloating(options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  const {\r\n    placement = 'bottom',\r\n    strategy = 'absolute',\r\n    middleware = [],\r\n    platform,\r\n    elements: {\r\n      reference: externalReference,\r\n      floating: externalFloating\r\n    } = {},\r\n    transform = true,\r\n    whileElementsMounted,\r\n    open\r\n  } = options;\r\n  const [data, setData] = react__WEBPACK_IMPORTED_MODULE_2__.useState({\r\n    x: 0,\r\n    y: 0,\r\n    strategy,\r\n    placement,\r\n    middlewareData: {},\r\n    isPositioned: false\r\n  });\r\n  const [latestMiddleware, setLatestMiddleware] = react__WEBPACK_IMPORTED_MODULE_2__.useState(middleware);\r\n  if (!deepEqual(latestMiddleware, middleware)) {\r\n    setLatestMiddleware(middleware);\r\n  }\r\n  const [_reference, _setReference] = react__WEBPACK_IMPORTED_MODULE_2__.useState(null);\r\n  const [_floating, _setFloating] = react__WEBPACK_IMPORTED_MODULE_2__.useState(null);\r\n  const setReference = react__WEBPACK_IMPORTED_MODULE_2__.useCallback(node => {\r\n    if (node !== referenceRef.current) {\r\n      referenceRef.current = node;\r\n      _setReference(node);\r\n    }\r\n  }, []);\r\n  const setFloating = react__WEBPACK_IMPORTED_MODULE_2__.useCallback(node => {\r\n    if (node !== floatingRef.current) {\r\n      floatingRef.current = node;\r\n      _setFloating(node);\r\n    }\r\n  }, []);\r\n  const referenceEl = externalReference || _reference;\r\n  const floatingEl = externalFloating || _floating;\r\n  const referenceRef = react__WEBPACK_IMPORTED_MODULE_2__.useRef(null);\r\n  const floatingRef = react__WEBPACK_IMPORTED_MODULE_2__.useRef(null);\r\n  const dataRef = react__WEBPACK_IMPORTED_MODULE_2__.useRef(data);\r\n  const hasWhileElementsMounted = whileElementsMounted != null;\r\n  const whileElementsMountedRef = useLatestRef(whileElementsMounted);\r\n  const platformRef = useLatestRef(platform);\r\n  const update = react__WEBPACK_IMPORTED_MODULE_2__.useCallback(() => {\r\n    if (!referenceRef.current || !floatingRef.current) {\r\n      return;\r\n    }\r\n    const config = {\r\n      placement,\r\n      strategy,\r\n      middleware: latestMiddleware\r\n    };\r\n    if (platformRef.current) {\r\n      config.platform = platformRef.current;\r\n    }\r\n    (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_0__.computePosition)(referenceRef.current, floatingRef.current, config).then(data => {\r\n      const fullData = {\r\n        ...data,\r\n        isPositioned: true\r\n      };\r\n      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {\r\n        dataRef.current = fullData;\r\n        react_dom__WEBPACK_IMPORTED_MODULE_3__.flushSync(() => {\r\n          setData(fullData);\r\n        });\r\n      }\r\n    });\r\n  }, [latestMiddleware, placement, strategy, platformRef]);\r\n  index(() => {\r\n    if (open === false && dataRef.current.isPositioned) {\r\n      dataRef.current.isPositioned = false;\r\n      setData(data => ({\r\n        ...data,\r\n        isPositioned: false\r\n      }));\r\n    }\r\n  }, [open]);\r\n  const isMountedRef = react__WEBPACK_IMPORTED_MODULE_2__.useRef(false);\r\n  index(() => {\r\n    isMountedRef.current = true;\r\n    return () => {\r\n      isMountedRef.current = false;\r\n    };\r\n  }, []);\r\n  index(() => {\r\n    if (referenceEl) referenceRef.current = referenceEl;\r\n    if (floatingEl) floatingRef.current = floatingEl;\r\n    if (referenceEl && floatingEl) {\r\n      if (whileElementsMountedRef.current) {\r\n        return whileElementsMountedRef.current(referenceEl, floatingEl, update);\r\n      }\r\n      update();\r\n    }\r\n  }, [referenceEl, floatingEl, update, whileElementsMountedRef, hasWhileElementsMounted]);\r\n  const refs = react__WEBPACK_IMPORTED_MODULE_2__.useMemo(() => ({\r\n    reference: referenceRef,\r\n    floating: floatingRef,\r\n    setReference,\r\n    setFloating\r\n  }), [setReference, setFloating]);\r\n  const elements = react__WEBPACK_IMPORTED_MODULE_2__.useMemo(() => ({\r\n    reference: referenceEl,\r\n    floating: floatingEl\r\n  }), [referenceEl, floatingEl]);\r\n  const floatingStyles = react__WEBPACK_IMPORTED_MODULE_2__.useMemo(() => {\r\n    const initialStyles = {\r\n      position: strategy,\r\n      left: 0,\r\n      top: 0\r\n    };\r\n    if (!elements.floating) {\r\n      return initialStyles;\r\n    }\r\n    const x = roundByDPR(elements.floating, data.x);\r\n    const y = roundByDPR(elements.floating, data.y);\r\n    if (transform) {\r\n      return {\r\n        ...initialStyles,\r\n        transform: \"translate(\" + x + \"px, \" + y + \"px)\",\r\n        ...(getDPR(elements.floating) >= 1.5 && {\r\n          willChange: 'transform'\r\n        })\r\n      };\r\n    }\r\n    return {\r\n      position: strategy,\r\n      left: x,\r\n      top: y\r\n    };\r\n  }, [strategy, transform, elements.floating, data.x, data.y]);\r\n  return react__WEBPACK_IMPORTED_MODULE_2__.useMemo(() => ({\r\n    ...data,\r\n    update,\r\n    refs,\r\n    elements,\r\n    floatingStyles\r\n  }), [data, update, refs, elements, floatingStyles]);\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@floating-ui/react/dist/floating-ui.react.mjs":
/*!*********************************************************************!*\
  !*** ../node_modules/@floating-ui/react/dist/floating-ui.react.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var react__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Composite: () => (/* binding */ Composite),\n/* harmony export */   CompositeItem: () => (/* binding */ CompositeItem),\n/* harmony export */   FloatingArrow: () => (/* binding */ FloatingArrow),\n/* harmony export */   FloatingDelayGroup: () => (/* binding */ FloatingDelayGroup),\n/* harmony export */   FloatingFocusManager: () => (/* binding */ FloatingFocusManager),\n/* harmony export */   FloatingList: () => (/* binding */ FloatingList),\n/* harmony export */   FloatingNode: () => (/* binding */ FloatingNode),\n/* harmony export */   FloatingOverlay: () => (/* binding */ FloatingOverlay),\n/* harmony export */   FloatingPortal: () => (/* binding */ FloatingPortal),\n/* harmony export */   FloatingTree: () => (/* binding */ FloatingTree),\n/* harmony export */   arrow: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_1__.arrow),\n/* harmony export */   autoPlacement: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.autoPlacement),\n/* harmony export */   autoUpdate: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.autoUpdate),\n/* harmony export */   computePosition: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.computePosition),\n/* harmony export */   detectOverflow: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.detectOverflow),\n/* harmony export */   flip: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.flip),\n/* harmony export */   getOverflowAncestors: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.getOverflowAncestors),\n/* harmony export */   hide: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.hide),\n/* harmony export */   inline: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.inline),\n/* harmony export */   inner: () => (/* binding */ inner),\n/* harmony export */   limitShift: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.limitShift),\n/* harmony export */   offset: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.offset),\n/* harmony export */   platform: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.platform),\n/* harmony export */   safePolygon: () => (/* binding */ safePolygon),\n/* harmony export */   shift: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.shift),\n/* harmony export */   size: () => (/* reexport safe */ _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.size),\n/* harmony export */   useClick: () => (/* binding */ useClick),\n/* harmony export */   useClientPoint: () => (/* binding */ useClientPoint),\n/* harmony export */   useDelayGroup: () => (/* binding */ useDelayGroup),\n/* harmony export */   useDelayGroupContext: () => (/* binding */ useDelayGroupContext),\n/* harmony export */   useDismiss: () => (/* binding */ useDismiss),\n/* harmony export */   useFloating: () => (/* binding */ useFloating),\n/* harmony export */   useFloatingNodeId: () => (/* binding */ useFloatingNodeId),\n/* harmony export */   useFloatingParentNodeId: () => (/* binding */ useFloatingParentNodeId),\n/* harmony export */   useFloatingPortalNode: () => (/* binding */ useFloatingPortalNode),\n/* harmony export */   useFloatingTree: () => (/* binding */ useFloatingTree),\n/* harmony export */   useFocus: () => (/* binding */ useFocus),\n/* harmony export */   useHover: () => (/* binding */ useHover),\n/* harmony export */   useId: () => (/* binding */ useId),\n/* harmony export */   useInnerOffset: () => (/* binding */ useInnerOffset),\n/* harmony export */   useInteractions: () => (/* binding */ useInteractions),\n/* harmony export */   useListItem: () => (/* binding */ useListItem),\n/* harmony export */   useListNavigation: () => (/* binding */ useListNavigation),\n/* harmony export */   useMergeRefs: () => (/* binding */ useMergeRefs),\n/* harmony export */   useRole: () => (/* binding */ useRole),\n/* harmony export */   useTransitionStatus: () => (/* binding */ useTransitionStatus),\n/* harmony export */   useTransitionStyles: () => (/* binding */ useTransitionStyles),\n/* harmony export */   useTypeahead: () => (/* binding */ useTypeahead)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @floating-ui/react/utils */ \"(ssr)/../node_modules/@floating-ui/react/dist/floating-ui.react.utils.mjs\");\n/* harmony import */ var _floating_ui_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @floating-ui/utils */ \"(ssr)/../node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs\");\n/* harmony import */ var _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @floating-ui/react-dom */ \"(ssr)/../node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n/* harmony import */ var _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @floating-ui/utils/dom */ \"(ssr)/../node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs\");\n/* harmony import */ var _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @floating-ui/react-dom */ \"(ssr)/../node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs\");\n/* harmony import */ var tabbable__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tabbable */ \"(ssr)/../node_modules/tabbable/dist/index.esm.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Merges an array of refs into a single memoized callback ref or `null`.\r\n * @see https://floating-ui.com/docs/react-utils#usemergerefs\r\n */\r\nfunction useMergeRefs(refs) {\r\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n    if (refs.every(ref => ref == null)) {\r\n      return null;\r\n    }\r\n    return value => {\r\n      refs.forEach(ref => {\r\n        if (typeof ref === 'function') {\r\n          ref(value);\r\n        } else if (ref != null) {\r\n          ref.current = value;\r\n        }\r\n      });\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, refs);\r\n}\r\n\r\n// https://github.com/mui/material-ui/issues/41190#issuecomment-2040873379\r\nconst SafeReact = {\r\n  .../*#__PURE__*/ (react__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (react__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(react__WEBPACK_IMPORTED_MODULE_0__, 2)))\r\n};\r\n\r\nconst useInsertionEffect = SafeReact.useInsertionEffect;\r\nconst useSafeInsertionEffect = useInsertionEffect || (fn => fn());\r\nfunction useEffectEvent(callback) {\r\n  const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(() => {\r\n    if (true) {\r\n      throw new Error('Cannot call an event handler while rendering.');\r\n    }\r\n  });\r\n  useSafeInsertionEffect(() => {\r\n    ref.current = callback;\r\n  });\r\n  return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function () {\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n    return ref.current == null ? void 0 : ref.current(...args);\r\n  }, []);\r\n}\r\n\r\nconst ARROW_UP = 'ArrowUp';\r\nconst ARROW_DOWN = 'ArrowDown';\r\nconst ARROW_LEFT = 'ArrowLeft';\r\nconst ARROW_RIGHT = 'ArrowRight';\r\nfunction isDifferentRow(index, cols, prevRow) {\r\n  return Math.floor(index / cols) !== prevRow;\r\n}\r\nfunction isIndexOutOfBounds(listRef, index) {\r\n  return index < 0 || index >= listRef.current.length;\r\n}\r\nfunction getMinIndex(listRef, disabledIndices) {\r\n  return findNonDisabledIndex(listRef, {\r\n    disabledIndices\r\n  });\r\n}\r\nfunction getMaxIndex(listRef, disabledIndices) {\r\n  return findNonDisabledIndex(listRef, {\r\n    decrement: true,\r\n    startingIndex: listRef.current.length,\r\n    disabledIndices\r\n  });\r\n}\r\nfunction findNonDisabledIndex(listRef, _temp) {\r\n  let {\r\n    startingIndex = -1,\r\n    decrement = false,\r\n    disabledIndices,\r\n    amount = 1\r\n  } = _temp === void 0 ? {} : _temp;\r\n  const list = listRef.current;\r\n  const isDisabledIndex = disabledIndices ? index => disabledIndices.includes(index) : index => {\r\n    const element = list[index];\r\n    return element == null || element.hasAttribute('disabled') || element.getAttribute('aria-disabled') === 'true';\r\n  };\r\n  let index = startingIndex;\r\n  do {\r\n    index += decrement ? -amount : amount;\r\n  } while (index >= 0 && index <= list.length - 1 && isDisabledIndex(index));\r\n  return index;\r\n}\r\nfunction getGridNavigatedIndex(elementsRef, _ref) {\r\n  let {\r\n    event,\r\n    orientation,\r\n    loop,\r\n    cols,\r\n    disabledIndices,\r\n    minIndex,\r\n    maxIndex,\r\n    prevIndex,\r\n    stopEvent: stop = false\r\n  } = _ref;\r\n  let nextIndex = prevIndex;\r\n  if (event.key === ARROW_UP) {\r\n    stop && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\r\n    if (prevIndex === -1) {\r\n      nextIndex = maxIndex;\r\n    } else {\r\n      nextIndex = findNonDisabledIndex(elementsRef, {\r\n        startingIndex: nextIndex,\r\n        amount: cols,\r\n        decrement: true,\r\n        disabledIndices\r\n      });\r\n      if (loop && (prevIndex - cols < minIndex || nextIndex < 0)) {\r\n        const col = prevIndex % cols;\r\n        const maxCol = maxIndex % cols;\r\n        const offset = maxIndex - (maxCol - col);\r\n        if (maxCol === col) {\r\n          nextIndex = maxIndex;\r\n        } else {\r\n          nextIndex = maxCol > col ? offset : offset - cols;\r\n        }\r\n      }\r\n    }\r\n    if (isIndexOutOfBounds(elementsRef, nextIndex)) {\r\n      nextIndex = prevIndex;\r\n    }\r\n  }\r\n  if (event.key === ARROW_DOWN) {\r\n    stop && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\r\n    if (prevIndex === -1) {\r\n      nextIndex = minIndex;\r\n    } else {\r\n      nextIndex = findNonDisabledIndex(elementsRef, {\r\n        startingIndex: prevIndex,\r\n        amount: cols,\r\n        disabledIndices\r\n      });\r\n      if (loop && prevIndex + cols > maxIndex) {\r\n        nextIndex = findNonDisabledIndex(elementsRef, {\r\n          startingIndex: prevIndex % cols - cols,\r\n          amount: cols,\r\n          disabledIndices\r\n        });\r\n      }\r\n    }\r\n    if (isIndexOutOfBounds(elementsRef, nextIndex)) {\r\n      nextIndex = prevIndex;\r\n    }\r\n  }\r\n\r\n  // Remains on the same row/column.\r\n  if (orientation === 'both') {\r\n    const prevRow = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_6__.floor)(prevIndex / cols);\r\n    if (event.key === ARROW_RIGHT) {\r\n      stop && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\r\n      if (prevIndex % cols !== cols - 1) {\r\n        nextIndex = findNonDisabledIndex(elementsRef, {\r\n          startingIndex: prevIndex,\r\n          disabledIndices\r\n        });\r\n        if (loop && isDifferentRow(nextIndex, cols, prevRow)) {\r\n          nextIndex = findNonDisabledIndex(elementsRef, {\r\n            startingIndex: prevIndex - prevIndex % cols - 1,\r\n            disabledIndices\r\n          });\r\n        }\r\n      } else if (loop) {\r\n        nextIndex = findNonDisabledIndex(elementsRef, {\r\n          startingIndex: prevIndex - prevIndex % cols - 1,\r\n          disabledIndices\r\n        });\r\n      }\r\n      if (isDifferentRow(nextIndex, cols, prevRow)) {\r\n        nextIndex = prevIndex;\r\n      }\r\n    }\r\n    if (event.key === ARROW_LEFT) {\r\n      stop && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\r\n      if (prevIndex % cols !== 0) {\r\n        nextIndex = findNonDisabledIndex(elementsRef, {\r\n          startingIndex: prevIndex,\r\n          disabledIndices,\r\n          decrement: true\r\n        });\r\n        if (loop && isDifferentRow(nextIndex, cols, prevRow)) {\r\n          nextIndex = findNonDisabledIndex(elementsRef, {\r\n            startingIndex: prevIndex + (cols - prevIndex % cols),\r\n            decrement: true,\r\n            disabledIndices\r\n          });\r\n        }\r\n      } else if (loop) {\r\n        nextIndex = findNonDisabledIndex(elementsRef, {\r\n          startingIndex: prevIndex + (cols - prevIndex % cols),\r\n          decrement: true,\r\n          disabledIndices\r\n        });\r\n      }\r\n      if (isDifferentRow(nextIndex, cols, prevRow)) {\r\n        nextIndex = prevIndex;\r\n      }\r\n    }\r\n    const lastRow = (0,_floating_ui_utils__WEBPACK_IMPORTED_MODULE_6__.floor)(maxIndex / cols) === prevRow;\r\n    if (isIndexOutOfBounds(elementsRef, nextIndex)) {\r\n      if (loop && lastRow) {\r\n        nextIndex = event.key === ARROW_LEFT ? maxIndex : findNonDisabledIndex(elementsRef, {\r\n          startingIndex: prevIndex - prevIndex % cols - 1,\r\n          disabledIndices\r\n        });\r\n      } else {\r\n        nextIndex = prevIndex;\r\n      }\r\n    }\r\n  }\r\n  return nextIndex;\r\n}\r\n\r\n/** For each cell index, gets the item index that occupies that cell */\r\nfunction buildCellMap(sizes, cols, dense) {\r\n  const cellMap = [];\r\n  let startIndex = 0;\r\n  sizes.forEach((_ref2, index) => {\r\n    let {\r\n      width,\r\n      height\r\n    } = _ref2;\r\n    if (width > cols) {\r\n      if (true) {\r\n        throw new Error(\"[Floating UI]: Invalid grid - item width at index \" + index + \" is greater than grid columns\");\r\n      }\r\n    }\r\n    let itemPlaced = false;\r\n    if (dense) {\r\n      startIndex = 0;\r\n    }\r\n    while (!itemPlaced) {\r\n      const targetCells = [];\r\n      for (let i = 0; i < width; i++) {\r\n        for (let j = 0; j < height; j++) {\r\n          targetCells.push(startIndex + i + j * cols);\r\n        }\r\n      }\r\n      if (startIndex % cols + width <= cols && targetCells.every(cell => cellMap[cell] == null)) {\r\n        targetCells.forEach(cell => {\r\n          cellMap[cell] = index;\r\n        });\r\n        itemPlaced = true;\r\n      } else {\r\n        startIndex++;\r\n      }\r\n    }\r\n  });\r\n\r\n  // convert into a non-sparse array\r\n  return [...cellMap];\r\n}\r\n\r\n/** Gets cell index of an item's corner or -1 when index is -1. */\r\nfunction getCellIndexOfCorner(index, sizes, cellMap, cols, corner) {\r\n  if (index === -1) return -1;\r\n  const firstCellIndex = cellMap.indexOf(index);\r\n  switch (corner) {\r\n    case 'tl':\r\n      return firstCellIndex;\r\n    case 'tr':\r\n      return firstCellIndex + sizes[index].width - 1;\r\n    case 'bl':\r\n      return firstCellIndex + (sizes[index].height - 1) * cols;\r\n    case 'br':\r\n      return cellMap.lastIndexOf(index);\r\n  }\r\n}\r\n\r\n/** Gets all cell indices that correspond to the specified indices */\r\nfunction getCellIndices(indices, cellMap) {\r\n  return cellMap.flatMap((index, cellIndex) => indices.includes(index) ? [cellIndex] : []);\r\n}\r\n\r\nlet rafId = 0;\r\nfunction enqueueFocus(el, options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  const {\r\n    preventScroll = false,\r\n    cancelPrevious = true,\r\n    sync = false\r\n  } = options;\r\n  cancelPrevious && cancelAnimationFrame(rafId);\r\n  const exec = () => el == null ? void 0 : el.focus({\r\n    preventScroll\r\n  });\r\n  if (sync) {\r\n    exec();\r\n  } else {\r\n    rafId = requestAnimationFrame(exec);\r\n  }\r\n}\r\n\r\nvar index = typeof document !== 'undefined' ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\r\n\r\nfunction sortByDocumentPosition(a, b) {\r\n  const position = a.compareDocumentPosition(b);\r\n  if (position & Node.DOCUMENT_POSITION_FOLLOWING || position & Node.DOCUMENT_POSITION_CONTAINED_BY) {\r\n    return -1;\r\n  }\r\n  if (position & Node.DOCUMENT_POSITION_PRECEDING || position & Node.DOCUMENT_POSITION_CONTAINS) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\nfunction areMapsEqual(map1, map2) {\r\n  if (map1.size !== map2.size) {\r\n    return false;\r\n  }\r\n  for (const [key, value] of map1.entries()) {\r\n    if (value !== map2.get(key)) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\nconst FloatingListContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext({\r\n  register: () => {},\r\n  unregister: () => {},\r\n  map: /*#__PURE__*/new Map(),\r\n  elementsRef: {\r\n    current: []\r\n  }\r\n});\r\n/**\r\n * Provides context for a list of items within the floating element.\r\n * @see https://floating-ui.com/docs/FloatingList\r\n */\r\nfunction FloatingList(props) {\r\n  const {\r\n    children,\r\n    elementsRef,\r\n    labelsRef\r\n  } = props;\r\n  const [map, setMap] = react__WEBPACK_IMPORTED_MODULE_0__.useState(() => new Map());\r\n  const register = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(node => {\r\n    setMap(prevMap => new Map(prevMap).set(node, null));\r\n  }, []);\r\n  const unregister = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(node => {\r\n    setMap(prevMap => {\r\n      const map = new Map(prevMap);\r\n      map.delete(node);\r\n      return map;\r\n    });\r\n  }, []);\r\n  index(() => {\r\n    const newMap = new Map(map);\r\n    const nodes = Array.from(newMap.keys()).sort(sortByDocumentPosition);\r\n    nodes.forEach((node, index) => {\r\n      newMap.set(node, index);\r\n    });\r\n    if (!areMapsEqual(map, newMap)) {\r\n      setMap(newMap);\r\n    }\r\n  }, [map]);\r\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FloatingListContext.Provider, {\r\n    value: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\r\n      register,\r\n      unregister,\r\n      map,\r\n      elementsRef,\r\n      labelsRef\r\n    }), [register, unregister, map, elementsRef, labelsRef])\r\n  }, children);\r\n}\r\n/**\r\n * Used to register a list item and its index (DOM position) in the\r\n * `FloatingList`.\r\n * @see https://floating-ui.com/docs/FloatingList#uselistitem\r\n */\r\nfunction useListItem(props) {\r\n  if (props === void 0) {\r\n    props = {};\r\n  }\r\n  const {\r\n    label\r\n  } = props;\r\n  const {\r\n    register,\r\n    unregister,\r\n    map,\r\n    elementsRef,\r\n    labelsRef\r\n  } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(FloatingListContext);\r\n  const [index$1, setIndex] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\r\n  const componentRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n  const ref = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(node => {\r\n    componentRef.current = node;\r\n    if (index$1 !== null) {\r\n      elementsRef.current[index$1] = node;\r\n      if (labelsRef) {\r\n        var _node$textContent;\r\n        const isLabelDefined = label !== undefined;\r\n        labelsRef.current[index$1] = isLabelDefined ? label : (_node$textContent = node == null ? void 0 : node.textContent) != null ? _node$textContent : null;\r\n      }\r\n    }\r\n  }, [index$1, elementsRef, labelsRef, label]);\r\n  index(() => {\r\n    const node = componentRef.current;\r\n    if (node) {\r\n      register(node);\r\n      return () => {\r\n        unregister(node);\r\n      };\r\n    }\r\n  }, [register, unregister]);\r\n  index(() => {\r\n    const index = componentRef.current ? map.get(componentRef.current) : null;\r\n    if (index != null) {\r\n      setIndex(index);\r\n    }\r\n  }, [map]);\r\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\r\n    ref,\r\n    index: index$1 == null ? -1 : index$1\r\n  }), [index$1, ref]);\r\n}\r\n\r\nfunction renderJsx(render, computedProps) {\r\n  if (typeof render === 'function') {\r\n    return render(computedProps);\r\n  }\r\n  if (render) {\r\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(render, computedProps);\r\n  }\r\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", computedProps);\r\n}\r\nconst CompositeContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext({\r\n  activeIndex: 0,\r\n  onNavigate: () => {}\r\n});\r\nconst horizontalKeys = [ARROW_LEFT, ARROW_RIGHT];\r\nconst verticalKeys = [ARROW_UP, ARROW_DOWN];\r\nconst allKeys = [...horizontalKeys, ...verticalKeys];\r\n\r\n/**\r\n * Creates a single tab stop whose items are navigated by arrow keys, which\r\n * provides list navigation outside of floating element contexts.\r\n *\r\n * This is useful to enable navigation of a list of items that aren’t part of a\r\n * floating element. A menubar is an example of a composite, with each reference\r\n * element being an item.\r\n * @see https://floating-ui.com/docs/Composite\r\n */\r\nconst Composite = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function Composite(props, forwardedRef) {\r\n  const {\r\n    render,\r\n    orientation = 'both',\r\n    loop = true,\r\n    cols = 1,\r\n    disabledIndices = [],\r\n    activeIndex: externalActiveIndex,\r\n    onNavigate: externalSetActiveIndex,\r\n    itemSizes,\r\n    dense = false,\r\n    ...domProps\r\n  } = props;\r\n  const [internalActiveIndex, internalSetActiveIndex] = react__WEBPACK_IMPORTED_MODULE_0__.useState(0);\r\n  const activeIndex = externalActiveIndex != null ? externalActiveIndex : internalActiveIndex;\r\n  const onNavigate = useEffectEvent(externalSetActiveIndex != null ? externalSetActiveIndex : internalSetActiveIndex);\r\n  const elementsRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef([]);\r\n  const renderElementProps = render && typeof render !== 'function' ? render.props : {};\r\n  const contextValue = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\r\n    activeIndex,\r\n    onNavigate\r\n  }), [activeIndex, onNavigate]);\r\n  const isGrid = cols > 1;\r\n  function handleKeyDown(event) {\r\n    if (!allKeys.includes(event.key)) return;\r\n    let nextIndex = activeIndex;\r\n    if (isGrid) {\r\n      const sizes = itemSizes || Array.from({\r\n        length: elementsRef.current.length\r\n      }, () => ({\r\n        width: 1,\r\n        height: 1\r\n      }));\r\n      // To calculate movements on the grid, we use hypothetical cell indices\r\n      // as if every item was 1x1, then convert back to real indices.\r\n      const cellMap = buildCellMap(sizes, cols, dense);\r\n      const minGridIndex = cellMap.findIndex(index => index != null && !disabledIndices.includes(index));\r\n      // last enabled index\r\n      const maxGridIndex = cellMap.reduce((foundIndex, index, cellIndex) => index != null && !(disabledIndices != null && disabledIndices.includes(index)) ? cellIndex : foundIndex, -1);\r\n      nextIndex = cellMap[getGridNavigatedIndex({\r\n        current: cellMap.map(itemIndex => itemIndex ? elementsRef.current[itemIndex] : null)\r\n      }, {\r\n        event,\r\n        orientation,\r\n        loop,\r\n        cols,\r\n        // treat undefined (empty grid spaces) as disabled indices so we\r\n        // don't end up in them\r\n        disabledIndices: getCellIndices([...disabledIndices, undefined], cellMap),\r\n        minIndex: minGridIndex,\r\n        maxIndex: maxGridIndex,\r\n        prevIndex: getCellIndexOfCorner(activeIndex, sizes, cellMap, cols,\r\n        // use a corner matching the edge closest to the direction we're\r\n        // moving in so we don't end up in the same item. Prefer\r\n        // top/left over bottom/right.\r\n        event.key === ARROW_DOWN ? 'bl' : event.key === ARROW_RIGHT ? 'tr' : 'tl')\r\n      })]; // navigated cell will never be nullish\r\n    }\r\n    const minIndex = getMinIndex(elementsRef, disabledIndices);\r\n    const maxIndex = getMaxIndex(elementsRef, disabledIndices);\r\n    const toEndKeys = {\r\n      horizontal: [ARROW_RIGHT],\r\n      vertical: [ARROW_DOWN],\r\n      both: [ARROW_RIGHT, ARROW_DOWN]\r\n    }[orientation];\r\n    const toStartKeys = {\r\n      horizontal: [ARROW_LEFT],\r\n      vertical: [ARROW_UP],\r\n      both: [ARROW_LEFT, ARROW_UP]\r\n    }[orientation];\r\n    const preventedKeys = isGrid ? allKeys : {\r\n      horizontal: horizontalKeys,\r\n      vertical: verticalKeys,\r\n      both: allKeys\r\n    }[orientation];\r\n    if (nextIndex === activeIndex && [...toEndKeys, ...toStartKeys].includes(event.key)) {\r\n      if (loop && nextIndex === maxIndex && toEndKeys.includes(event.key)) {\r\n        nextIndex = minIndex;\r\n      } else if (loop && nextIndex === minIndex && toStartKeys.includes(event.key)) {\r\n        nextIndex = maxIndex;\r\n      } else {\r\n        nextIndex = findNonDisabledIndex(elementsRef, {\r\n          startingIndex: nextIndex,\r\n          decrement: toStartKeys.includes(event.key),\r\n          disabledIndices\r\n        });\r\n      }\r\n    }\r\n    if (nextIndex !== activeIndex && !isIndexOutOfBounds(elementsRef, nextIndex)) {\r\n      event.stopPropagation();\r\n      if (preventedKeys.includes(event.key)) {\r\n        event.preventDefault();\r\n      }\r\n      onNavigate(nextIndex);\r\n\r\n      // Wait for FocusManager `returnFocus` to execute.\r\n      queueMicrotask(() => {\r\n        enqueueFocus(elementsRef.current[nextIndex]);\r\n      });\r\n    }\r\n  }\r\n  const computedProps = {\r\n    ...domProps,\r\n    ...renderElementProps,\r\n    ref: forwardedRef,\r\n    'aria-orientation': orientation === 'both' ? undefined : orientation,\r\n    onKeyDown(e) {\r\n      domProps.onKeyDown == null || domProps.onKeyDown(e);\r\n      renderElementProps.onKeyDown == null || renderElementProps.onKeyDown(e);\r\n      handleKeyDown(e);\r\n    }\r\n  };\r\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(CompositeContext.Provider, {\r\n    value: contextValue\r\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FloatingList, {\r\n    elementsRef: elementsRef\r\n  }, renderJsx(render, computedProps)));\r\n});\r\n/**\r\n * @see https://floating-ui.com/docs/Composite\r\n */\r\nconst CompositeItem = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function CompositeItem(props, forwardedRef) {\r\n  const {\r\n    render,\r\n    ...domProps\r\n  } = props;\r\n  const renderElementProps = render && typeof render !== 'function' ? render.props : {};\r\n  const {\r\n    activeIndex,\r\n    onNavigate\r\n  } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(CompositeContext);\r\n  const {\r\n    ref,\r\n    index\r\n  } = useListItem();\r\n  const mergedRef = useMergeRefs([ref, forwardedRef, renderElementProps.ref]);\r\n  const isActive = activeIndex === index;\r\n  const computedProps = {\r\n    ...domProps,\r\n    ...renderElementProps,\r\n    ref: mergedRef,\r\n    tabIndex: isActive ? 0 : -1,\r\n    'data-active': isActive ? '' : undefined,\r\n    onFocus(e) {\r\n      domProps.onFocus == null || domProps.onFocus(e);\r\n      renderElementProps.onFocus == null || renderElementProps.onFocus(e);\r\n      onNavigate(index);\r\n    }\r\n  };\r\n  return renderJsx(render, computedProps);\r\n});\r\n\r\nfunction _extends() {\r\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      var source = arguments[i];\r\n      for (var key in source) {\r\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n          target[key] = source[key];\r\n        }\r\n      }\r\n    }\r\n    return target;\r\n  };\r\n  return _extends.apply(this, arguments);\r\n}\r\n\r\nlet serverHandoffComplete = false;\r\nlet count = 0;\r\nconst genId = () => // Ensure the id is unique with multiple independent versions of Floating UI\r\n// on <React 18\r\n\"floating-ui-\" + Math.random().toString(36).slice(2, 6) + count++;\r\nfunction useFloatingId() {\r\n  const [id, setId] = react__WEBPACK_IMPORTED_MODULE_0__.useState(() => serverHandoffComplete ? genId() : undefined);\r\n  index(() => {\r\n    if (id == null) {\r\n      setId(genId());\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    serverHandoffComplete = true;\r\n  }, []);\r\n  return id;\r\n}\r\nconst useReactId = SafeReact.useId;\r\n\r\n/**\r\n * Uses React 18's built-in `useId()` when available, or falls back to a\r\n * slightly less performant (requiring a double render) implementation for\r\n * earlier React versions.\r\n * @see https://floating-ui.com/docs/react-utils#useid\r\n */\r\nconst useId = useReactId || useFloatingId;\r\n\r\nlet devMessageSet;\r\nif (true) {\r\n  devMessageSet = /*#__PURE__*/new Set();\r\n}\r\nfunction warn() {\r\n  var _devMessageSet;\r\n  for (var _len = arguments.length, messages = new Array(_len), _key = 0; _key < _len; _key++) {\r\n    messages[_key] = arguments[_key];\r\n  }\r\n  const message = \"Floating UI: \" + messages.join(' ');\r\n  if (!((_devMessageSet = devMessageSet) != null && _devMessageSet.has(message))) {\r\n    var _devMessageSet2;\r\n    (_devMessageSet2 = devMessageSet) == null || _devMessageSet2.add(message);\r\n    console.warn(message);\r\n  }\r\n}\r\nfunction error() {\r\n  var _devMessageSet3;\r\n  for (var _len2 = arguments.length, messages = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\r\n    messages[_key2] = arguments[_key2];\r\n  }\r\n  const message = \"Floating UI: \" + messages.join(' ');\r\n  if (!((_devMessageSet3 = devMessageSet) != null && _devMessageSet3.has(message))) {\r\n    var _devMessageSet4;\r\n    (_devMessageSet4 = devMessageSet) == null || _devMessageSet4.add(message);\r\n    console.error(message);\r\n  }\r\n}\r\n\r\n/**\r\n * Renders a pointing arrow triangle.\r\n * @see https://floating-ui.com/docs/FloatingArrow\r\n */\r\nconst FloatingArrow = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function FloatingArrow(props, ref) {\r\n  const {\r\n    context: {\r\n      placement,\r\n      elements: {\r\n        floating\r\n      },\r\n      middlewareData: {\r\n        arrow\r\n      }\r\n    },\r\n    width = 14,\r\n    height = 7,\r\n    tipRadius = 0,\r\n    strokeWidth = 0,\r\n    staticOffset,\r\n    stroke,\r\n    d,\r\n    style: {\r\n      transform,\r\n      ...restStyle\r\n    } = {},\r\n    ...rest\r\n  } = props;\r\n  if (true) {\r\n    if (!ref) {\r\n      warn('The `ref` prop is required for `FloatingArrow`.');\r\n    }\r\n  }\r\n  const clipPathId = useId();\r\n  if (!floating) {\r\n    return null;\r\n  }\r\n\r\n  // Strokes must be double the border width, this ensures the stroke's width\r\n  // works as you'd expect.\r\n  const computedStrokeWidth = strokeWidth * 2;\r\n  const halfStrokeWidth = computedStrokeWidth / 2;\r\n  const svgX = width / 2 * (tipRadius / -8 + 1);\r\n  const svgY = height / 2 * tipRadius / 4;\r\n  const [side, alignment] = placement.split('-');\r\n  const isRTL = _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.platform.isRTL(floating);\r\n  const isCustomShape = !!d;\r\n  const isVerticalSide = side === 'top' || side === 'bottom';\r\n  const yOffsetProp = staticOffset && alignment === 'end' ? 'bottom' : 'top';\r\n  let xOffsetProp = staticOffset && alignment === 'end' ? 'right' : 'left';\r\n  if (staticOffset && isRTL) {\r\n    xOffsetProp = alignment === 'end' ? 'left' : 'right';\r\n  }\r\n  const arrowX = (arrow == null ? void 0 : arrow.x) != null ? staticOffset || arrow.x : '';\r\n  const arrowY = (arrow == null ? void 0 : arrow.y) != null ? staticOffset || arrow.y : '';\r\n  const dValue = d || 'M0,0' + (\" H\" + width) + (\" L\" + (width - svgX) + \",\" + (height - svgY)) + (\" Q\" + width / 2 + \",\" + height + \" \" + svgX + \",\" + (height - svgY)) + ' Z';\r\n  const rotation = {\r\n    top: isCustomShape ? 'rotate(180deg)' : '',\r\n    left: isCustomShape ? 'rotate(90deg)' : 'rotate(-90deg)',\r\n    bottom: isCustomShape ? '' : 'rotate(180deg)',\r\n    right: isCustomShape ? 'rotate(-90deg)' : 'rotate(90deg)'\r\n  }[side];\r\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", _extends({}, rest, {\r\n    \"aria-hidden\": true,\r\n    ref: ref,\r\n    width: isCustomShape ? width : width + computedStrokeWidth,\r\n    height: width,\r\n    viewBox: \"0 0 \" + width + \" \" + (height > width ? height : width),\r\n    style: {\r\n      position: 'absolute',\r\n      pointerEvents: 'none',\r\n      [xOffsetProp]: arrowX,\r\n      [yOffsetProp]: arrowY,\r\n      [side]: isVerticalSide || isCustomShape ? '100%' : \"calc(100% - \" + computedStrokeWidth / 2 + \"px)\",\r\n      transform: \"\" + rotation + (transform != null ? transform : ''),\r\n      ...restStyle\r\n    }\r\n  }), computedStrokeWidth > 0 && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\r\n    clipPath: \"url(#\" + clipPathId + \")\",\r\n    fill: \"none\",\r\n    stroke: stroke\r\n    // Account for the stroke on the fill path rendered below.\r\n    ,\r\n    strokeWidth: computedStrokeWidth + (d ? 0 : 1),\r\n    d: dValue\r\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\r\n    stroke: computedStrokeWidth && !d ? rest.fill : 'none',\r\n    d: dValue\r\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"clipPath\", {\r\n    id: clipPathId\r\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"rect\", {\r\n    x: -halfStrokeWidth,\r\n    y: halfStrokeWidth * (isCustomShape ? -1 : 1),\r\n    width: width + computedStrokeWidth,\r\n    height: width\r\n  })));\r\n});\r\n\r\nfunction createPubSub() {\r\n  const map = new Map();\r\n  return {\r\n    emit(event, data) {\r\n      var _map$get;\r\n      (_map$get = map.get(event)) == null || _map$get.forEach(handler => handler(data));\r\n    },\r\n    on(event, listener) {\r\n      map.set(event, [...(map.get(event) || []), listener]);\r\n    },\r\n    off(event, listener) {\r\n      var _map$get2;\r\n      map.set(event, ((_map$get2 = map.get(event)) == null ? void 0 : _map$get2.filter(l => l !== listener)) || []);\r\n    }\r\n  };\r\n}\r\n\r\nconst FloatingNodeContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\r\nconst FloatingTreeContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\r\n\r\n/**\r\n * Returns the parent node id for nested floating elements, if available.\r\n * Returns `null` for top-level floating elements.\r\n */\r\nconst useFloatingParentNodeId = () => {\r\n  var _React$useContext;\r\n  return ((_React$useContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(FloatingNodeContext)) == null ? void 0 : _React$useContext.id) || null;\r\n};\r\n\r\n/**\r\n * Returns the nearest floating tree context, if available.\r\n */\r\nconst useFloatingTree = () => react__WEBPACK_IMPORTED_MODULE_0__.useContext(FloatingTreeContext);\r\n\r\n/**\r\n * Registers a node into the `FloatingTree`, returning its id.\r\n * @see https://floating-ui.com/docs/FloatingTree\r\n */\r\nfunction useFloatingNodeId(customParentId) {\r\n  const id = useId();\r\n  const tree = useFloatingTree();\r\n  const reactParentId = useFloatingParentNodeId();\r\n  const parentId = customParentId || reactParentId;\r\n  index(() => {\r\n    const node = {\r\n      id,\r\n      parentId\r\n    };\r\n    tree == null || tree.addNode(node);\r\n    return () => {\r\n      tree == null || tree.removeNode(node);\r\n    };\r\n  }, [tree, id, parentId]);\r\n  return id;\r\n}\r\n\r\n/**\r\n * Provides parent node context for nested floating elements.\r\n * @see https://floating-ui.com/docs/FloatingTree\r\n */\r\nfunction FloatingNode(props) {\r\n  const {\r\n    children,\r\n    id\r\n  } = props;\r\n  const parentId = useFloatingParentNodeId();\r\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FloatingNodeContext.Provider, {\r\n    value: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\r\n      id,\r\n      parentId\r\n    }), [id, parentId])\r\n  }, children);\r\n}\r\n\r\n/**\r\n * Provides context for nested floating elements when they are not children of\r\n * each other on the DOM.\r\n * This is not necessary in all cases, except when there must be explicit communication between parent and child floating elements. It is necessary for:\r\n * - The `bubbles` option in the `useDismiss()` Hook\r\n * - Nested virtual list navigation\r\n * - Nested floating elements that each open on hover\r\n * - Custom communication between parent and child floating elements\r\n * @see https://floating-ui.com/docs/FloatingTree\r\n */\r\nfunction FloatingTree(props) {\r\n  const {\r\n    children\r\n  } = props;\r\n  const nodesRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef([]);\r\n  const addNode = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(node => {\r\n    nodesRef.current = [...nodesRef.current, node];\r\n  }, []);\r\n  const removeNode = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(node => {\r\n    nodesRef.current = nodesRef.current.filter(n => n !== node);\r\n  }, []);\r\n  const events = react__WEBPACK_IMPORTED_MODULE_0__.useState(() => createPubSub())[0];\r\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FloatingTreeContext.Provider, {\r\n    value: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\r\n      nodesRef,\r\n      addNode,\r\n      removeNode,\r\n      events\r\n    }), [addNode, removeNode, events])\r\n  }, children);\r\n}\r\n\r\nfunction createAttribute(name) {\r\n  return \"data-floating-ui-\" + name;\r\n}\r\n\r\nfunction useLatestRef(value) {\r\n  const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(value);\r\n  index(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref;\r\n}\r\n\r\nconst safePolygonIdentifier = /*#__PURE__*/createAttribute('safe-polygon');\r\nfunction getDelay(value, prop, pointerType) {\r\n  if (pointerType && !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isMouseLikePointerType)(pointerType)) {\r\n    return 0;\r\n  }\r\n  if (typeof value === 'number') {\r\n    return value;\r\n  }\r\n  return value == null ? void 0 : value[prop];\r\n}\r\n/**\r\n * Opens the floating element while hovering over the reference element, like\r\n * CSS `:hover`.\r\n * @see https://floating-ui.com/docs/useHover\r\n */\r\nfunction useHover(context, props) {\r\n  if (props === void 0) {\r\n    props = {};\r\n  }\r\n  const {\r\n    open,\r\n    onOpenChange,\r\n    dataRef,\r\n    events,\r\n    elements: {\r\n      domReference,\r\n      floating\r\n    },\r\n    refs\r\n  } = context;\r\n  const {\r\n    enabled = true,\r\n    delay = 0,\r\n    handleClose = null,\r\n    mouseOnly = false,\r\n    restMs = 0,\r\n    move = true\r\n  } = props;\r\n  const tree = useFloatingTree();\r\n  const parentId = useFloatingParentNodeId();\r\n  const handleCloseRef = useLatestRef(handleClose);\r\n  const delayRef = useLatestRef(delay);\r\n  const pointerTypeRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\r\n  const timeoutRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(-1);\r\n  const handlerRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\r\n  const restTimeoutRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(-1);\r\n  const blockMouseMoveRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(true);\r\n  const performedPointerEventsMutationRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\r\n  const unbindMouseMoveRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(() => {});\r\n  const isHoverOpen = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {\r\n    var _dataRef$current$open;\r\n    const type = (_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type;\r\n    return (type == null ? void 0 : type.includes('mouse')) && type !== 'mousedown';\r\n  }, [dataRef]);\r\n\r\n  // When closing before opening, clear the delay timeouts to cancel it\r\n  // from showing.\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    if (!enabled) {\r\n      return;\r\n    }\r\n    function onOpenChange(_ref) {\r\n      let {\r\n        open\r\n      } = _ref;\r\n      if (!open) {\r\n        clearTimeout(timeoutRef.current);\r\n        clearTimeout(restTimeoutRef.current);\r\n        blockMouseMoveRef.current = true;\r\n      }\r\n    }\r\n    events.on('openchange', onOpenChange);\r\n    return () => {\r\n      events.off('openchange', onOpenChange);\r\n    };\r\n  }, [enabled, events]);\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    if (!enabled || !handleCloseRef.current || !open) {\r\n      return;\r\n    }\r\n    function onLeave(event) {\r\n      if (isHoverOpen()) {\r\n        onOpenChange(false, event, 'hover');\r\n      }\r\n    }\r\n    const html = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(floating).documentElement;\r\n    html.addEventListener('mouseleave', onLeave);\r\n    return () => {\r\n      html.removeEventListener('mouseleave', onLeave);\r\n    };\r\n  }, [floating, open, onOpenChange, enabled, handleCloseRef, isHoverOpen]);\r\n  const closeWithDelay = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function (event, runElseBranch, reason) {\r\n    if (runElseBranch === void 0) {\r\n      runElseBranch = true;\r\n    }\r\n    if (reason === void 0) {\r\n      reason = 'hover';\r\n    }\r\n    const closeDelay = getDelay(delayRef.current, 'close', pointerTypeRef.current);\r\n    if (closeDelay && !handlerRef.current) {\r\n      clearTimeout(timeoutRef.current);\r\n      timeoutRef.current = window.setTimeout(() => onOpenChange(false, event, reason), closeDelay);\r\n    } else if (runElseBranch) {\r\n      clearTimeout(timeoutRef.current);\r\n      onOpenChange(false, event, reason);\r\n    }\r\n  }, [delayRef, onOpenChange]);\r\n  const cleanupMouseMoveHandler = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {\r\n    unbindMouseMoveRef.current();\r\n    handlerRef.current = undefined;\r\n  }, []);\r\n  const clearPointerEvents = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {\r\n    if (performedPointerEventsMutationRef.current) {\r\n      const body = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(refs.floating.current).body;\r\n      body.style.pointerEvents = '';\r\n      body.removeAttribute(safePolygonIdentifier);\r\n      performedPointerEventsMutationRef.current = false;\r\n    }\r\n  }, [refs]);\r\n\r\n  // Registering the mouse events on the reference directly to bypass React's\r\n  // delegation system. If the cursor was on a disabled element and then entered\r\n  // the reference (no gap), `mouseenter` doesn't fire in the delegation system.\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    if (!enabled) {\r\n      return;\r\n    }\r\n    function isClickLikeOpenEvent() {\r\n      return dataRef.current.openEvent ? ['click', 'mousedown'].includes(dataRef.current.openEvent.type) : false;\r\n    }\r\n    function onMouseEnter(event) {\r\n      clearTimeout(timeoutRef.current);\r\n      blockMouseMoveRef.current = false;\r\n      if (mouseOnly && !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isMouseLikePointerType)(pointerTypeRef.current) || restMs > 0 && !getDelay(delayRef.current, 'open')) {\r\n        return;\r\n      }\r\n      const openDelay = getDelay(delayRef.current, 'open', pointerTypeRef.current);\r\n      if (openDelay) {\r\n        timeoutRef.current = window.setTimeout(() => {\r\n          onOpenChange(true, event, 'hover');\r\n        }, openDelay);\r\n      } else {\r\n        onOpenChange(true, event, 'hover');\r\n      }\r\n    }\r\n    function onMouseLeave(event) {\r\n      if (isClickLikeOpenEvent()) {\r\n        return;\r\n      }\r\n      unbindMouseMoveRef.current();\r\n      const doc = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(floating);\r\n      clearTimeout(restTimeoutRef.current);\r\n      if (handleCloseRef.current) {\r\n        // Prevent clearing `onScrollMouseLeave` timeout.\r\n        if (!open) {\r\n          clearTimeout(timeoutRef.current);\r\n        }\r\n        handlerRef.current = handleCloseRef.current({\r\n          ...context,\r\n          tree,\r\n          x: event.clientX,\r\n          y: event.clientY,\r\n          onClose() {\r\n            clearPointerEvents();\r\n            cleanupMouseMoveHandler();\r\n            closeWithDelay(event, true, 'safe-polygon');\r\n          }\r\n        });\r\n        const handler = handlerRef.current;\r\n        doc.addEventListener('mousemove', handler);\r\n        unbindMouseMoveRef.current = () => {\r\n          doc.removeEventListener('mousemove', handler);\r\n        };\r\n        return;\r\n      }\r\n\r\n      // Allow interactivity without `safePolygon` on touch devices. With a\r\n      // pointer, a short close delay is an alternative, so it should work\r\n      // consistently.\r\n      const shouldClose = pointerTypeRef.current === 'touch' ? !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(floating, event.relatedTarget) : true;\r\n      if (shouldClose) {\r\n        closeWithDelay(event);\r\n      }\r\n    }\r\n\r\n    // Ensure the floating element closes after scrolling even if the pointer\r\n    // did not move.\r\n    // https://github.com/floating-ui/floating-ui/discussions/1692\r\n    function onScrollMouseLeave(event) {\r\n      if (isClickLikeOpenEvent()) {\r\n        return;\r\n      }\r\n      handleCloseRef.current == null || handleCloseRef.current({\r\n        ...context,\r\n        tree,\r\n        x: event.clientX,\r\n        y: event.clientY,\r\n        onClose() {\r\n          clearPointerEvents();\r\n          cleanupMouseMoveHandler();\r\n          closeWithDelay(event);\r\n        }\r\n      })(event);\r\n    }\r\n    if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.isElement)(domReference)) {\r\n      const ref = domReference;\r\n      open && ref.addEventListener('mouseleave', onScrollMouseLeave);\r\n      floating == null || floating.addEventListener('mouseleave', onScrollMouseLeave);\r\n      move && ref.addEventListener('mousemove', onMouseEnter, {\r\n        once: true\r\n      });\r\n      ref.addEventListener('mouseenter', onMouseEnter);\r\n      ref.addEventListener('mouseleave', onMouseLeave);\r\n      return () => {\r\n        open && ref.removeEventListener('mouseleave', onScrollMouseLeave);\r\n        floating == null || floating.removeEventListener('mouseleave', onScrollMouseLeave);\r\n        move && ref.removeEventListener('mousemove', onMouseEnter);\r\n        ref.removeEventListener('mouseenter', onMouseEnter);\r\n        ref.removeEventListener('mouseleave', onMouseLeave);\r\n      };\r\n    }\r\n  }, [domReference, floating, enabled, context, mouseOnly, restMs, move, closeWithDelay, cleanupMouseMoveHandler, clearPointerEvents, onOpenChange, open, tree, delayRef, handleCloseRef, dataRef]);\r\n\r\n  // Block pointer-events of every element other than the reference and floating\r\n  // while the floating element is open and has a `handleClose` handler. Also\r\n  // handles nested floating elements.\r\n  // https://github.com/floating-ui/floating-ui/issues/1722\r\n  index(() => {\r\n    var _handleCloseRef$curre;\r\n    if (!enabled) {\r\n      return;\r\n    }\r\n    if (open && (_handleCloseRef$curre = handleCloseRef.current) != null && _handleCloseRef$curre.__options.blockPointerEvents && isHoverOpen()) {\r\n      const body = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(floating).body;\r\n      body.setAttribute(safePolygonIdentifier, '');\r\n      body.style.pointerEvents = 'none';\r\n      performedPointerEventsMutationRef.current = true;\r\n      if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.isElement)(domReference) && floating) {\r\n        var _tree$nodesRef$curren;\r\n        const ref = domReference;\r\n        const parentFloating = tree == null || (_tree$nodesRef$curren = tree.nodesRef.current.find(node => node.id === parentId)) == null || (_tree$nodesRef$curren = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren.elements.floating;\r\n        if (parentFloating) {\r\n          parentFloating.style.pointerEvents = '';\r\n        }\r\n        ref.style.pointerEvents = 'auto';\r\n        floating.style.pointerEvents = 'auto';\r\n        return () => {\r\n          ref.style.pointerEvents = '';\r\n          floating.style.pointerEvents = '';\r\n        };\r\n      }\r\n    }\r\n  }, [enabled, open, parentId, floating, domReference, tree, handleCloseRef, isHoverOpen]);\r\n  index(() => {\r\n    if (!open) {\r\n      pointerTypeRef.current = undefined;\r\n      cleanupMouseMoveHandler();\r\n      clearPointerEvents();\r\n    }\r\n  }, [open, cleanupMouseMoveHandler, clearPointerEvents]);\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    return () => {\r\n      cleanupMouseMoveHandler();\r\n      clearTimeout(timeoutRef.current);\r\n      clearTimeout(restTimeoutRef.current);\r\n      clearPointerEvents();\r\n    };\r\n  }, [enabled, domReference, cleanupMouseMoveHandler, clearPointerEvents]);\r\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n    if (!enabled) {\r\n      return {};\r\n    }\r\n    function setPointerRef(event) {\r\n      pointerTypeRef.current = event.pointerType;\r\n    }\r\n    return {\r\n      reference: {\r\n        onPointerDown: setPointerRef,\r\n        onPointerEnter: setPointerRef,\r\n        onMouseMove(event) {\r\n          function handleMouseMove() {\r\n            if (!blockMouseMoveRef.current) {\r\n              onOpenChange(true, event.nativeEvent, 'hover');\r\n            }\r\n          }\r\n          if (mouseOnly && !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isMouseLikePointerType)(pointerTypeRef.current)) {\r\n            return;\r\n          }\r\n          if (open || restMs === 0) {\r\n            return;\r\n          }\r\n          clearTimeout(restTimeoutRef.current);\r\n          if (pointerTypeRef.current === 'touch') {\r\n            handleMouseMove();\r\n          } else {\r\n            restTimeoutRef.current = window.setTimeout(handleMouseMove, restMs);\r\n          }\r\n        }\r\n      },\r\n      floating: {\r\n        onMouseEnter() {\r\n          clearTimeout(timeoutRef.current);\r\n        },\r\n        onMouseLeave(event) {\r\n          closeWithDelay(event.nativeEvent, false);\r\n        }\r\n      }\r\n    };\r\n  }, [enabled, mouseOnly, open, restMs, onOpenChange, closeWithDelay]);\r\n}\r\n\r\nconst NOOP = () => {};\r\nconst FloatingDelayGroupContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext({\r\n  delay: 0,\r\n  initialDelay: 0,\r\n  timeoutMs: 0,\r\n  currentId: null,\r\n  setCurrentId: NOOP,\r\n  setState: NOOP,\r\n  isInstantPhase: false\r\n});\r\n\r\n/**\r\n * @deprecated\r\n * Use the return value of `useDelayGroup()` instead.\r\n */\r\nconst useDelayGroupContext = () => react__WEBPACK_IMPORTED_MODULE_0__.useContext(FloatingDelayGroupContext);\r\n/**\r\n * Provides context for a group of floating elements that should share a\r\n * `delay`.\r\n * @see https://floating-ui.com/docs/FloatingDelayGroup\r\n */\r\nfunction FloatingDelayGroup(props) {\r\n  const {\r\n    children,\r\n    delay,\r\n    timeoutMs = 0\r\n  } = props;\r\n  const [state, setState] = react__WEBPACK_IMPORTED_MODULE_0__.useReducer((prev, next) => ({\r\n    ...prev,\r\n    ...next\r\n  }), {\r\n    delay,\r\n    timeoutMs,\r\n    initialDelay: delay,\r\n    currentId: null,\r\n    isInstantPhase: false\r\n  });\r\n  const initialCurrentIdRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n  const setCurrentId = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(currentId => {\r\n    setState({\r\n      currentId\r\n    });\r\n  }, []);\r\n  index(() => {\r\n    if (state.currentId) {\r\n      if (initialCurrentIdRef.current === null) {\r\n        initialCurrentIdRef.current = state.currentId;\r\n      } else {\r\n        setState({\r\n          isInstantPhase: true\r\n        });\r\n      }\r\n    } else {\r\n      setState({\r\n        isInstantPhase: false\r\n      });\r\n      initialCurrentIdRef.current = null;\r\n    }\r\n  }, [state.currentId]);\r\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FloatingDelayGroupContext.Provider, {\r\n    value: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\r\n      ...state,\r\n      setState,\r\n      setCurrentId\r\n    }), [state, setCurrentId])\r\n  }, children);\r\n}\r\n/**\r\n * Enables grouping when called inside a component that's a child of a\r\n * `FloatingDelayGroup`.\r\n * @see https://floating-ui.com/docs/FloatingDelayGroup\r\n */\r\nfunction useDelayGroup(context, options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  const {\r\n    open,\r\n    onOpenChange,\r\n    floatingId\r\n  } = context;\r\n  const {\r\n    id: optionId\r\n  } = options;\r\n  const id = optionId != null ? optionId : floatingId;\r\n  const groupContext = useDelayGroupContext();\r\n  const {\r\n    currentId,\r\n    setCurrentId,\r\n    initialDelay,\r\n    setState,\r\n    timeoutMs\r\n  } = groupContext;\r\n  index(() => {\r\n    if (!currentId) return;\r\n    setState({\r\n      delay: {\r\n        open: 1,\r\n        close: getDelay(initialDelay, 'close')\r\n      }\r\n    });\r\n    if (currentId !== id) {\r\n      onOpenChange(false);\r\n    }\r\n  }, [id, onOpenChange, setState, currentId, initialDelay]);\r\n  index(() => {\r\n    function unset() {\r\n      onOpenChange(false);\r\n      setState({\r\n        delay: initialDelay,\r\n        currentId: null\r\n      });\r\n    }\r\n    if (!currentId) return;\r\n    if (!open && currentId === id) {\r\n      if (timeoutMs) {\r\n        const timeout = window.setTimeout(unset, timeoutMs);\r\n        return () => {\r\n          clearTimeout(timeout);\r\n        };\r\n      }\r\n      unset();\r\n    }\r\n  }, [open, setState, currentId, id, onOpenChange, initialDelay, timeoutMs]);\r\n  index(() => {\r\n    if (setCurrentId === NOOP || !open) return;\r\n    setCurrentId(id);\r\n  }, [open, setCurrentId, id]);\r\n  return groupContext;\r\n}\r\n\r\nfunction getAncestors(nodes, id) {\r\n  var _nodes$find;\r\n  let allAncestors = [];\r\n  let currentParentId = (_nodes$find = nodes.find(node => node.id === id)) == null ? void 0 : _nodes$find.parentId;\r\n  while (currentParentId) {\r\n    const currentNode = nodes.find(node => node.id === currentParentId);\r\n    currentParentId = currentNode == null ? void 0 : currentNode.parentId;\r\n    if (currentNode) {\r\n      allAncestors = allAncestors.concat(currentNode);\r\n    }\r\n  }\r\n  return allAncestors;\r\n}\r\n\r\nfunction getChildren(nodes, id) {\r\n  let allChildren = nodes.filter(node => {\r\n    var _node$context;\r\n    return node.parentId === id && ((_node$context = node.context) == null ? void 0 : _node$context.open);\r\n  });\r\n  let currentChildren = allChildren;\r\n  while (currentChildren.length) {\r\n    currentChildren = nodes.filter(node => {\r\n      var _currentChildren;\r\n      return (_currentChildren = currentChildren) == null ? void 0 : _currentChildren.some(n => {\r\n        var _node$context2;\r\n        return node.parentId === n.id && ((_node$context2 = node.context) == null ? void 0 : _node$context2.open);\r\n      });\r\n    });\r\n    allChildren = allChildren.concat(currentChildren);\r\n  }\r\n  return allChildren;\r\n}\r\nfunction getDeepestNode(nodes, id) {\r\n  let deepestNodeId;\r\n  let maxDepth = -1;\r\n  function findDeepest(nodeId, depth) {\r\n    if (depth > maxDepth) {\r\n      deepestNodeId = nodeId;\r\n      maxDepth = depth;\r\n    }\r\n    const children = getChildren(nodes, nodeId);\r\n    children.forEach(child => {\r\n      findDeepest(child.id, depth + 1);\r\n    });\r\n  }\r\n  findDeepest(id, 0);\r\n  return nodes.find(node => node.id === deepestNodeId);\r\n}\r\n\r\n// Modified to add conditional `aria-hidden` support:\r\n// https://github.com/theKashey/aria-hidden/blob/9220c8f4a4fd35f63bee5510a9f41a37264382d4/src/index.ts\r\nlet counterMap = /*#__PURE__*/new WeakMap();\r\nlet uncontrolledElementsSet = /*#__PURE__*/new WeakSet();\r\nlet markerMap = {};\r\nlet lockCount = 0;\r\nconst supportsInert = () => typeof HTMLElement !== 'undefined' && 'inert' in HTMLElement.prototype;\r\nconst unwrapHost = node => node && (node.host || unwrapHost(node.parentNode));\r\nconst correctElements = (parent, targets) => targets.map(target => {\r\n  if (parent.contains(target)) {\r\n    return target;\r\n  }\r\n  const correctedTarget = unwrapHost(target);\r\n  if (parent.contains(correctedTarget)) {\r\n    return correctedTarget;\r\n  }\r\n  return null;\r\n}).filter(x => x != null);\r\nfunction applyAttributeToOthers(uncorrectedAvoidElements, body, ariaHidden, inert) {\r\n  const markerName = 'data-floating-ui-inert';\r\n  const controlAttribute = inert ? 'inert' : ariaHidden ? 'aria-hidden' : null;\r\n  const avoidElements = correctElements(body, uncorrectedAvoidElements);\r\n  const elementsToKeep = new Set();\r\n  const elementsToStop = new Set(avoidElements);\r\n  const hiddenElements = [];\r\n  if (!markerMap[markerName]) {\r\n    markerMap[markerName] = new WeakMap();\r\n  }\r\n  const markerCounter = markerMap[markerName];\r\n  avoidElements.forEach(keep);\r\n  deep(body);\r\n  elementsToKeep.clear();\r\n  function keep(el) {\r\n    if (!el || elementsToKeep.has(el)) {\r\n      return;\r\n    }\r\n    elementsToKeep.add(el);\r\n    el.parentNode && keep(el.parentNode);\r\n  }\r\n  function deep(parent) {\r\n    if (!parent || elementsToStop.has(parent)) {\r\n      return;\r\n    }\r\n    Array.prototype.forEach.call(parent.children, node => {\r\n      if (elementsToKeep.has(node)) {\r\n        deep(node);\r\n      } else {\r\n        const attr = controlAttribute ? node.getAttribute(controlAttribute) : null;\r\n        const alreadyHidden = attr !== null && attr !== 'false';\r\n        const counterValue = (counterMap.get(node) || 0) + 1;\r\n        const markerValue = (markerCounter.get(node) || 0) + 1;\r\n        counterMap.set(node, counterValue);\r\n        markerCounter.set(node, markerValue);\r\n        hiddenElements.push(node);\r\n        if (counterValue === 1 && alreadyHidden) {\r\n          uncontrolledElementsSet.add(node);\r\n        }\r\n        if (markerValue === 1) {\r\n          node.setAttribute(markerName, '');\r\n        }\r\n        if (!alreadyHidden && controlAttribute) {\r\n          node.setAttribute(controlAttribute, 'true');\r\n        }\r\n      }\r\n    });\r\n  }\r\n  lockCount++;\r\n  return () => {\r\n    hiddenElements.forEach(element => {\r\n      const counterValue = (counterMap.get(element) || 0) - 1;\r\n      const markerValue = (markerCounter.get(element) || 0) - 1;\r\n      counterMap.set(element, counterValue);\r\n      markerCounter.set(element, markerValue);\r\n      if (!counterValue) {\r\n        if (!uncontrolledElementsSet.has(element) && controlAttribute) {\r\n          element.removeAttribute(controlAttribute);\r\n        }\r\n        uncontrolledElementsSet.delete(element);\r\n      }\r\n      if (!markerValue) {\r\n        element.removeAttribute(markerName);\r\n      }\r\n    });\r\n    lockCount--;\r\n    if (!lockCount) {\r\n      counterMap = new WeakMap();\r\n      counterMap = new WeakMap();\r\n      uncontrolledElementsSet = new WeakSet();\r\n      markerMap = {};\r\n    }\r\n  };\r\n}\r\nfunction markOthers(avoidElements, ariaHidden, inert) {\r\n  if (ariaHidden === void 0) {\r\n    ariaHidden = false;\r\n  }\r\n  if (inert === void 0) {\r\n    inert = false;\r\n  }\r\n  const body = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(avoidElements[0]).body;\r\n  return applyAttributeToOthers(avoidElements.concat(Array.from(body.querySelectorAll('[aria-live]'))), body, ariaHidden, inert);\r\n}\r\n\r\nconst getTabbableOptions = () => ({\r\n  getShadowRoot: true,\r\n  displayCheck:\r\n  // JSDOM does not support the `tabbable` library. To solve this we can\r\n  // check if `ResizeObserver` is a real function (not polyfilled), which\r\n  // determines if the current environment is JSDOM-like.\r\n  typeof ResizeObserver === 'function' && ResizeObserver.toString().includes('[native code]') ? 'full' : 'none'\r\n});\r\nfunction getTabbableIn(container, direction) {\r\n  const allTabbable = (0,tabbable__WEBPACK_IMPORTED_MODULE_7__.tabbable)(container, getTabbableOptions());\r\n  if (direction === 'prev') {\r\n    allTabbable.reverse();\r\n  }\r\n  const activeIndex = allTabbable.indexOf((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.activeElement)((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(container)));\r\n  const nextTabbableElements = allTabbable.slice(activeIndex + 1);\r\n  return nextTabbableElements[0];\r\n}\r\nfunction getNextTabbable() {\r\n  return getTabbableIn(document.body, 'next');\r\n}\r\nfunction getPreviousTabbable() {\r\n  return getTabbableIn(document.body, 'prev');\r\n}\r\nfunction isOutsideEvent(event, container) {\r\n  const containerElement = container || event.currentTarget;\r\n  const relatedTarget = event.relatedTarget;\r\n  return !relatedTarget || !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(containerElement, relatedTarget);\r\n}\r\nfunction disableFocusInside(container) {\r\n  const tabbableElements = (0,tabbable__WEBPACK_IMPORTED_MODULE_7__.tabbable)(container, getTabbableOptions());\r\n  tabbableElements.forEach(element => {\r\n    element.dataset.tabindex = element.getAttribute('tabindex') || '';\r\n    element.setAttribute('tabindex', '-1');\r\n  });\r\n}\r\nfunction enableFocusInside(container) {\r\n  const elements = container.querySelectorAll('[data-tabindex]');\r\n  elements.forEach(element => {\r\n    const tabindex = element.dataset.tabindex;\r\n    delete element.dataset.tabindex;\r\n    if (tabindex) {\r\n      element.setAttribute('tabindex', tabindex);\r\n    } else {\r\n      element.removeAttribute('tabindex');\r\n    }\r\n  });\r\n}\r\n\r\n// See Diego Haz's Sandbox for making this logic work well on Safari/iOS:\r\n// https://codesandbox.io/s/tabbable-portal-f4tng?file=/src/FocusTrap.tsx\r\n\r\nconst HIDDEN_STYLES = {\r\n  border: 0,\r\n  clip: 'rect(0 0 0 0)',\r\n  height: '1px',\r\n  margin: '-1px',\r\n  overflow: 'hidden',\r\n  padding: 0,\r\n  position: 'fixed',\r\n  whiteSpace: 'nowrap',\r\n  width: '1px',\r\n  top: 0,\r\n  left: 0\r\n};\r\nlet timeoutId;\r\nfunction setActiveElementOnTab(event) {\r\n  if (event.key === 'Tab') {\r\n    event.target;\r\n    clearTimeout(timeoutId);\r\n  }\r\n}\r\nconst FocusGuard = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function FocusGuard(props, ref) {\r\n  const [role, setRole] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\r\n  index(() => {\r\n    if ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isSafari)()) {\r\n      // Unlike other screen readers such as NVDA and JAWS, the virtual cursor\r\n      // on VoiceOver does trigger the onFocus event, so we can use the focus\r\n      // trap element. On Safari, only buttons trigger the onFocus event.\r\n      // NB: \"group\" role in the Sandbox no longer appears to work, must be a\r\n      // button role.\r\n      setRole('button');\r\n    }\r\n    document.addEventListener('keydown', setActiveElementOnTab);\r\n    return () => {\r\n      document.removeEventListener('keydown', setActiveElementOnTab);\r\n    };\r\n  }, []);\r\n  const restProps = {\r\n    ref,\r\n    tabIndex: 0,\r\n    // Role is only for VoiceOver\r\n    role,\r\n    'aria-hidden': role ? undefined : true,\r\n    [createAttribute('focus-guard')]: '',\r\n    style: HIDDEN_STYLES\r\n  };\r\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", _extends({}, props, restProps));\r\n});\r\n\r\nconst PortalContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\r\nconst attr = /*#__PURE__*/createAttribute('portal');\r\n\r\n/**\r\n * @see https://floating-ui.com/docs/FloatingPortal#usefloatingportalnode\r\n */\r\nfunction useFloatingPortalNode(props) {\r\n  if (props === void 0) {\r\n    props = {};\r\n  }\r\n  const {\r\n    id,\r\n    root\r\n  } = props;\r\n  const uniqueId = useId();\r\n  const portalContext = usePortalContext();\r\n  const [portalNode, setPortalNode] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\r\n  const portalNodeRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n  index(() => {\r\n    return () => {\r\n      portalNode == null || portalNode.remove();\r\n      // Allow the subsequent layout effects to create a new node on updates.\r\n      // The portal node will still be cleaned up on unmount.\r\n      // https://github.com/floating-ui/floating-ui/issues/2454\r\n      queueMicrotask(() => {\r\n        portalNodeRef.current = null;\r\n      });\r\n    };\r\n  }, [portalNode]);\r\n  index(() => {\r\n    if (portalNodeRef.current) return;\r\n    const existingIdRoot = id ? document.getElementById(id) : null;\r\n    if (!existingIdRoot) return;\r\n    const subRoot = document.createElement('div');\r\n    subRoot.id = uniqueId;\r\n    subRoot.setAttribute(attr, '');\r\n    existingIdRoot.appendChild(subRoot);\r\n    portalNodeRef.current = subRoot;\r\n    setPortalNode(subRoot);\r\n  }, [id, uniqueId]);\r\n  index(() => {\r\n    if (portalNodeRef.current) return;\r\n    let container = root || (portalContext == null ? void 0 : portalContext.portalNode);\r\n    if (container && !(0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.isElement)(container)) container = container.current;\r\n    container = container || document.body;\r\n    let idWrapper = null;\r\n    if (id) {\r\n      idWrapper = document.createElement('div');\r\n      idWrapper.id = id;\r\n      container.appendChild(idWrapper);\r\n    }\r\n    const subRoot = document.createElement('div');\r\n    subRoot.id = uniqueId;\r\n    subRoot.setAttribute(attr, '');\r\n    container = idWrapper || container;\r\n    container.appendChild(subRoot);\r\n    portalNodeRef.current = subRoot;\r\n    setPortalNode(subRoot);\r\n  }, [id, root, uniqueId, portalContext]);\r\n  return portalNode;\r\n}\r\n/**\r\n * Portals the floating element into a given container element — by default,\r\n * outside of the app root and into the body.\r\n * This is necessary to ensure the floating element can appear outside any\r\n * potential parent containers that cause clipping (such as `overflow: hidden`),\r\n * while retaining its location in the React tree.\r\n * @see https://floating-ui.com/docs/FloatingPortal\r\n */\r\nfunction FloatingPortal(props) {\r\n  const {\r\n    children,\r\n    id,\r\n    root = null,\r\n    preserveTabOrder = true\r\n  } = props;\r\n  const portalNode = useFloatingPortalNode({\r\n    id,\r\n    root\r\n  });\r\n  const [focusManagerState, setFocusManagerState] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\r\n  const beforeOutsideRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n  const afterOutsideRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n  const beforeInsideRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n  const afterInsideRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n  const shouldRenderGuards =\r\n  // The FocusManager and therefore floating element are currently open/\r\n  // rendered.\r\n  !!focusManagerState &&\r\n  // Guards are only for non-modal focus management.\r\n  !focusManagerState.modal &&\r\n  // Don't render if unmount is transitioning.\r\n  focusManagerState.open && preserveTabOrder && !!(root || portalNode);\r\n\r\n  // https://codesandbox.io/s/tabbable-portal-f4tng?file=/src/TabbablePortal.tsx\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    if (!portalNode || !preserveTabOrder || focusManagerState != null && focusManagerState.modal) {\r\n      return;\r\n    }\r\n\r\n    // Make sure elements inside the portal element are tabbable only when the\r\n    // portal has already been focused, either by tabbing into a focus trap\r\n    // element outside or using the mouse.\r\n    function onFocus(event) {\r\n      if (portalNode && isOutsideEvent(event)) {\r\n        const focusing = event.type === 'focusin';\r\n        const manageFocus = focusing ? enableFocusInside : disableFocusInside;\r\n        manageFocus(portalNode);\r\n      }\r\n    }\r\n    // Listen to the event on the capture phase so they run before the focus\r\n    // trap elements onFocus prop is called.\r\n    portalNode.addEventListener('focusin', onFocus, true);\r\n    portalNode.addEventListener('focusout', onFocus, true);\r\n    return () => {\r\n      portalNode.removeEventListener('focusin', onFocus, true);\r\n      portalNode.removeEventListener('focusout', onFocus, true);\r\n    };\r\n  }, [portalNode, preserveTabOrder, focusManagerState == null ? void 0 : focusManagerState.modal]);\r\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(PortalContext.Provider, {\r\n    value: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\r\n      preserveTabOrder,\r\n      beforeOutsideRef,\r\n      afterOutsideRef,\r\n      beforeInsideRef,\r\n      afterInsideRef,\r\n      portalNode,\r\n      setFocusManagerState\r\n    }), [preserveTabOrder, portalNode])\r\n  }, shouldRenderGuards && portalNode && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FocusGuard, {\r\n    \"data-type\": \"outside\",\r\n    ref: beforeOutsideRef,\r\n    onFocus: event => {\r\n      if (isOutsideEvent(event, portalNode)) {\r\n        var _beforeInsideRef$curr;\r\n        (_beforeInsideRef$curr = beforeInsideRef.current) == null || _beforeInsideRef$curr.focus();\r\n      } else {\r\n        const prevTabbable = getPreviousTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);\r\n        prevTabbable == null || prevTabbable.focus();\r\n      }\r\n    }\r\n  }), shouldRenderGuards && portalNode && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\r\n    \"aria-owns\": portalNode.id,\r\n    style: HIDDEN_STYLES\r\n  }), portalNode && /*#__PURE__*/(0,react_dom__WEBPACK_IMPORTED_MODULE_4__.createPortal)(children, portalNode), shouldRenderGuards && portalNode && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FocusGuard, {\r\n    \"data-type\": \"outside\",\r\n    ref: afterOutsideRef,\r\n    onFocus: event => {\r\n      if (isOutsideEvent(event, portalNode)) {\r\n        var _afterInsideRef$curre;\r\n        (_afterInsideRef$curre = afterInsideRef.current) == null || _afterInsideRef$curre.focus();\r\n      } else {\r\n        const nextTabbable = getNextTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);\r\n        nextTabbable == null || nextTabbable.focus();\r\n        (focusManagerState == null ? void 0 : focusManagerState.closeOnFocusOut) && (focusManagerState == null ? void 0 : focusManagerState.onOpenChange(false, event.nativeEvent));\r\n      }\r\n    }\r\n  }));\r\n}\r\nconst usePortalContext = () => react__WEBPACK_IMPORTED_MODULE_0__.useContext(PortalContext);\r\n\r\nconst LIST_LIMIT = 20;\r\nlet previouslyFocusedElements = [];\r\nfunction addPreviouslyFocusedElement(element) {\r\n  previouslyFocusedElements = previouslyFocusedElements.filter(el => el.isConnected);\r\n  let tabbableEl = element;\r\n  if (!tabbableEl || (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.getNodeName)(tabbableEl) === 'body') return;\r\n  if (!(0,tabbable__WEBPACK_IMPORTED_MODULE_7__.isTabbable)(tabbableEl, getTabbableOptions())) {\r\n    const tabbableChild = (0,tabbable__WEBPACK_IMPORTED_MODULE_7__.tabbable)(tabbableEl, getTabbableOptions())[0];\r\n    if (tabbableChild) {\r\n      tabbableEl = tabbableChild;\r\n    }\r\n  }\r\n  previouslyFocusedElements.push(tabbableEl);\r\n  if (previouslyFocusedElements.length > LIST_LIMIT) {\r\n    previouslyFocusedElements = previouslyFocusedElements.slice(-LIST_LIMIT);\r\n  }\r\n}\r\nfunction getPreviouslyFocusedElement() {\r\n  return previouslyFocusedElements.slice().reverse().find(el => el.isConnected);\r\n}\r\nconst VisuallyHiddenDismiss = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function VisuallyHiddenDismiss(props, ref) {\r\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", _extends({}, props, {\r\n    type: \"button\",\r\n    ref: ref,\r\n    tabIndex: -1,\r\n    style: HIDDEN_STYLES\r\n  }));\r\n});\r\n/**\r\n * Provides focus management for the floating element.\r\n * @see https://floating-ui.com/docs/FloatingFocusManager\r\n */\r\nfunction FloatingFocusManager(props) {\r\n  const {\r\n    context,\r\n    children,\r\n    disabled = false,\r\n    order = ['content'],\r\n    guards: _guards = true,\r\n    initialFocus = 0,\r\n    returnFocus = true,\r\n    modal = true,\r\n    visuallyHiddenDismiss = false,\r\n    closeOnFocusOut = true\r\n  } = props;\r\n  const {\r\n    open,\r\n    refs,\r\n    nodeId,\r\n    onOpenChange,\r\n    events,\r\n    dataRef,\r\n    elements: {\r\n      domReference,\r\n      floating\r\n    }\r\n  } = context;\r\n  const ignoreInitialFocus = typeof initialFocus === 'number' && initialFocus < 0;\r\n  // If the reference is a combobox and is typeable (e.g. input/textarea),\r\n  // there are different focus semantics. The guards should not be rendered, but\r\n  // aria-hidden should be applied to all nodes still. Further, the visually\r\n  // hidden dismiss button should only appear at the end of the list, not the\r\n  // start.\r\n  const isUntrappedTypeableCombobox = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isTypeableCombobox)(domReference) && ignoreInitialFocus;\r\n\r\n  // Force the guards to be rendered if the `inert` attribute is not supported.\r\n  const guards = supportsInert() ? _guards : true;\r\n  const orderRef = useLatestRef(order);\r\n  const initialFocusRef = useLatestRef(initialFocus);\r\n  const returnFocusRef = useLatestRef(returnFocus);\r\n  const tree = useFloatingTree();\r\n  const portalContext = usePortalContext();\r\n  const startDismissButtonRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n  const endDismissButtonRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n  const preventReturnFocusRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\r\n  const isPointerDownRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\r\n  const isInsidePortal = portalContext != null;\r\n  const getTabbableContent = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function (container) {\r\n    if (container === void 0) {\r\n      container = floating;\r\n    }\r\n    return container ? (0,tabbable__WEBPACK_IMPORTED_MODULE_7__.tabbable)(container, getTabbableOptions()) : [];\r\n  }, [floating]);\r\n  const getTabbableElements = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(container => {\r\n    const content = getTabbableContent(container);\r\n    return orderRef.current.map(type => {\r\n      if (domReference && type === 'reference') {\r\n        return domReference;\r\n      }\r\n      if (floating && type === 'floating') {\r\n        return floating;\r\n      }\r\n      return content;\r\n    }).filter(Boolean).flat();\r\n  }, [domReference, floating, orderRef, getTabbableContent]);\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    if (disabled || !modal) return;\r\n    function onKeyDown(event) {\r\n      if (event.key === 'Tab') {\r\n        // The focus guards have nothing to focus, so we need to stop the event.\r\n        if ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(floating, (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.activeElement)((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(floating))) && getTabbableContent().length === 0 && !isUntrappedTypeableCombobox) {\r\n          (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\r\n        }\r\n        const els = getTabbableElements();\r\n        const target = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getTarget)(event);\r\n        if (orderRef.current[0] === 'reference' && target === domReference) {\r\n          (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\r\n          if (event.shiftKey) {\r\n            enqueueFocus(els[els.length - 1]);\r\n          } else {\r\n            enqueueFocus(els[1]);\r\n          }\r\n        }\r\n        if (orderRef.current[1] === 'floating' && target === floating && event.shiftKey) {\r\n          (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\r\n          enqueueFocus(els[0]);\r\n        }\r\n      }\r\n    }\r\n    const doc = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(floating);\r\n    doc.addEventListener('keydown', onKeyDown);\r\n    return () => {\r\n      doc.removeEventListener('keydown', onKeyDown);\r\n    };\r\n  }, [disabled, domReference, floating, modal, orderRef, isUntrappedTypeableCombobox, getTabbableContent, getTabbableElements]);\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    if (disabled || !closeOnFocusOut) return;\r\n\r\n    // In Safari, buttons lose focus when pressing them.\r\n    function handlePointerDown() {\r\n      isPointerDownRef.current = true;\r\n      setTimeout(() => {\r\n        isPointerDownRef.current = false;\r\n      });\r\n    }\r\n    function handleFocusOutside(event) {\r\n      const relatedTarget = event.relatedTarget;\r\n      queueMicrotask(() => {\r\n        const movedToUnrelatedNode = !((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(domReference, relatedTarget) || (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(floating, relatedTarget) || (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(relatedTarget, floating) || (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(portalContext == null ? void 0 : portalContext.portalNode, relatedTarget) || relatedTarget != null && relatedTarget.hasAttribute(createAttribute('focus-guard')) || tree && (getChildren(tree.nodesRef.current, nodeId).find(node => {\r\n          var _node$context, _node$context2;\r\n          return (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)((_node$context = node.context) == null ? void 0 : _node$context.elements.floating, relatedTarget) || (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)((_node$context2 = node.context) == null ? void 0 : _node$context2.elements.domReference, relatedTarget);\r\n        }) || getAncestors(tree.nodesRef.current, nodeId).find(node => {\r\n          var _node$context3, _node$context4;\r\n          return ((_node$context3 = node.context) == null ? void 0 : _node$context3.elements.floating) === relatedTarget || ((_node$context4 = node.context) == null ? void 0 : _node$context4.elements.domReference) === relatedTarget;\r\n        })));\r\n\r\n        // Focus did not move inside the floating tree, and there are no tabbable\r\n        // portal guards to handle closing.\r\n        if (relatedTarget && movedToUnrelatedNode && !isPointerDownRef.current &&\r\n        // Fix React 18 Strict Mode returnFocus due to double rendering.\r\n        relatedTarget !== getPreviouslyFocusedElement()) {\r\n          preventReturnFocusRef.current = true;\r\n          onOpenChange(false, event);\r\n        }\r\n      });\r\n    }\r\n    if (floating && (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.isHTMLElement)(domReference)) {\r\n      domReference.addEventListener('focusout', handleFocusOutside);\r\n      domReference.addEventListener('pointerdown', handlePointerDown);\r\n      !modal && floating.addEventListener('focusout', handleFocusOutside);\r\n      return () => {\r\n        domReference.removeEventListener('focusout', handleFocusOutside);\r\n        domReference.removeEventListener('pointerdown', handlePointerDown);\r\n        !modal && floating.removeEventListener('focusout', handleFocusOutside);\r\n      };\r\n    }\r\n  }, [disabled, domReference, floating, modal, nodeId, tree, portalContext, onOpenChange, closeOnFocusOut]);\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    var _portalContext$portal;\r\n    if (disabled) return;\r\n\r\n    // Don't hide portals nested within the parent portal.\r\n    const portalNodes = Array.from((portalContext == null || (_portalContext$portal = portalContext.portalNode) == null ? void 0 : _portalContext$portal.querySelectorAll(\"[\" + createAttribute('portal') + \"]\")) || []);\r\n    if (floating) {\r\n      const insideElements = [floating, ...portalNodes, startDismissButtonRef.current, endDismissButtonRef.current, orderRef.current.includes('reference') || isUntrappedTypeableCombobox ? domReference : null].filter(x => x != null);\r\n      const cleanup = modal || isUntrappedTypeableCombobox ? markOthers(insideElements, guards, !guards) : markOthers(insideElements);\r\n      return () => {\r\n        cleanup();\r\n      };\r\n    }\r\n  }, [disabled, domReference, floating, modal, orderRef, portalContext, isUntrappedTypeableCombobox, guards]);\r\n  index(() => {\r\n    if (disabled || !floating) return;\r\n    const doc = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(floating);\r\n    const previouslyFocusedElement = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.activeElement)(doc);\r\n\r\n    // Wait for any layout effect state setters to execute to set `tabIndex`.\r\n    queueMicrotask(() => {\r\n      const focusableElements = getTabbableElements(floating);\r\n      const initialFocusValue = initialFocusRef.current;\r\n      const elToFocus = (typeof initialFocusValue === 'number' ? focusableElements[initialFocusValue] : initialFocusValue.current) || floating;\r\n      const focusAlreadyInsideFloatingEl = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(floating, previouslyFocusedElement);\r\n      if (!ignoreInitialFocus && !focusAlreadyInsideFloatingEl && open) {\r\n        enqueueFocus(elToFocus, {\r\n          preventScroll: elToFocus === floating\r\n        });\r\n      }\r\n    });\r\n  }, [disabled, open, floating, ignoreInitialFocus, getTabbableElements, initialFocusRef]);\r\n  index(() => {\r\n    if (disabled || !floating) return;\r\n    let preventReturnFocusScroll = false;\r\n    const doc = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(floating);\r\n    const previouslyFocusedElement = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.activeElement)(doc);\r\n    const contextData = dataRef.current;\r\n    let openEvent = contextData.openEvent;\r\n    addPreviouslyFocusedElement(previouslyFocusedElement);\r\n\r\n    // Dismissing via outside press should always ignore `returnFocus` to\r\n    // prevent unwanted scrolling.\r\n    function onOpenChange(_ref) {\r\n      let {\r\n        open,\r\n        reason,\r\n        event,\r\n        nested\r\n      } = _ref;\r\n      if (open) {\r\n        openEvent = event;\r\n      }\r\n      if (reason === 'escape-key' && refs.domReference.current) {\r\n        addPreviouslyFocusedElement(refs.domReference.current);\r\n      }\r\n      if (reason === 'hover' && event.type === 'mouseleave') {\r\n        preventReturnFocusRef.current = true;\r\n      }\r\n      if (reason !== 'outside-press') return;\r\n      if (nested) {\r\n        preventReturnFocusRef.current = false;\r\n        preventReturnFocusScroll = true;\r\n      } else {\r\n        preventReturnFocusRef.current = !((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isVirtualClick)(event) || (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isVirtualPointerEvent)(event));\r\n      }\r\n    }\r\n    events.on('openchange', onOpenChange);\r\n    return () => {\r\n      events.off('openchange', onOpenChange);\r\n      const activeEl = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.activeElement)(doc);\r\n      const isFocusInsideFloatingTree = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(floating, activeEl) || tree && getChildren(tree.nodesRef.current, nodeId).some(node => {\r\n        var _node$context5;\r\n        return (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)((_node$context5 = node.context) == null ? void 0 : _node$context5.elements.floating, activeEl);\r\n      });\r\n      const shouldFocusReference = isFocusInsideFloatingTree || openEvent && ['click', 'mousedown'].includes(openEvent.type);\r\n      if (shouldFocusReference && refs.domReference.current) {\r\n        addPreviouslyFocusedElement(refs.domReference.current);\r\n      }\r\n      const returnElement = getPreviouslyFocusedElement();\r\n      if (\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n      returnFocusRef.current && !preventReturnFocusRef.current && (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.isHTMLElement)(returnElement) && (\r\n      // If the focus moved somewhere else after mount, avoid returning focus\r\n      // since it likely entered a different element which should be\r\n      // respected: https://github.com/floating-ui/floating-ui/issues/2607\r\n      returnElement !== activeEl && activeEl !== doc.body ? isFocusInsideFloatingTree : true)) {\r\n        enqueueFocus(returnElement, {\r\n          // When dismissing nested floating elements, by the time the rAF has\r\n          // executed, the menus will all have been unmounted. When they try\r\n          // to get focused, the calls get ignored — leaving the root\r\n          // reference focused as desired.\r\n          cancelPrevious: false,\r\n          preventScroll: preventReturnFocusScroll\r\n        });\r\n      }\r\n    };\r\n  }, [disabled, floating, returnFocusRef, dataRef, refs, events, tree, nodeId]);\r\n\r\n  // Synchronize the `context` & `modal` value to the FloatingPortal context.\r\n  // It will decide whether or not it needs to render its own guards.\r\n  index(() => {\r\n    if (disabled || !portalContext) return;\r\n    portalContext.setFocusManagerState({\r\n      modal,\r\n      closeOnFocusOut,\r\n      open,\r\n      onOpenChange,\r\n      refs\r\n    });\r\n    return () => {\r\n      portalContext.setFocusManagerState(null);\r\n    };\r\n  }, [disabled, portalContext, modal, open, onOpenChange, refs, closeOnFocusOut]);\r\n  index(() => {\r\n    if (disabled || !floating || typeof MutationObserver !== 'function' || ignoreInitialFocus) {\r\n      return;\r\n    }\r\n    const handleMutation = () => {\r\n      const tabIndex = floating.getAttribute('tabindex');\r\n      if (orderRef.current.includes('floating') || (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.activeElement)((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(floating)) !== refs.domReference.current && getTabbableContent().length === 0) {\r\n        if (tabIndex !== '0') {\r\n          floating.setAttribute('tabindex', '0');\r\n        }\r\n      } else if (tabIndex !== '-1') {\r\n        floating.setAttribute('tabindex', '-1');\r\n      }\r\n    };\r\n    handleMutation();\r\n    const observer = new MutationObserver(handleMutation);\r\n    observer.observe(floating, {\r\n      childList: true,\r\n      subtree: true,\r\n      attributes: true\r\n    });\r\n    return () => {\r\n      observer.disconnect();\r\n    };\r\n  }, [disabled, floating, refs, orderRef, getTabbableContent, ignoreInitialFocus]);\r\n  function renderDismissButton(location) {\r\n    if (disabled || !visuallyHiddenDismiss || !modal) {\r\n      return null;\r\n    }\r\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(VisuallyHiddenDismiss, {\r\n      ref: location === 'start' ? startDismissButtonRef : endDismissButtonRef,\r\n      onClick: event => onOpenChange(false, event.nativeEvent)\r\n    }, typeof visuallyHiddenDismiss === 'string' ? visuallyHiddenDismiss : 'Dismiss');\r\n  }\r\n  const shouldRenderGuards = !disabled && guards && (isInsidePortal || modal);\r\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, shouldRenderGuards && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FocusGuard, {\r\n    \"data-type\": \"inside\",\r\n    ref: portalContext == null ? void 0 : portalContext.beforeInsideRef,\r\n    onFocus: event => {\r\n      if (modal) {\r\n        const els = getTabbableElements();\r\n        enqueueFocus(order[0] === 'reference' ? els[0] : els[els.length - 1]);\r\n      } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {\r\n        preventReturnFocusRef.current = false;\r\n        if (isOutsideEvent(event, portalContext.portalNode)) {\r\n          const nextTabbable = getNextTabbable() || domReference;\r\n          nextTabbable == null || nextTabbable.focus();\r\n        } else {\r\n          var _portalContext$before;\r\n          (_portalContext$before = portalContext.beforeOutsideRef.current) == null || _portalContext$before.focus();\r\n        }\r\n      }\r\n    }\r\n  }), !isUntrappedTypeableCombobox && renderDismissButton('start'), children, renderDismissButton('end'), shouldRenderGuards && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(FocusGuard, {\r\n    \"data-type\": \"inside\",\r\n    ref: portalContext == null ? void 0 : portalContext.afterInsideRef,\r\n    onFocus: event => {\r\n      if (modal) {\r\n        enqueueFocus(getTabbableElements()[0]);\r\n      } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {\r\n        if (closeOnFocusOut) {\r\n          preventReturnFocusRef.current = true;\r\n        }\r\n        if (isOutsideEvent(event, portalContext.portalNode)) {\r\n          const prevTabbable = getPreviousTabbable() || domReference;\r\n          prevTabbable == null || prevTabbable.focus();\r\n        } else {\r\n          var _portalContext$afterO;\r\n          (_portalContext$afterO = portalContext.afterOutsideRef.current) == null || _portalContext$afterO.focus();\r\n        }\r\n      }\r\n    }\r\n  }));\r\n}\r\n\r\nconst activeLocks = /*#__PURE__*/new Set();\r\n/**\r\n * Provides base styling for a fixed overlay element to dim content or block\r\n * pointer events behind a floating element.\r\n * It's a regular `<div>`, so it can be styled via any CSS solution you prefer.\r\n * @see https://floating-ui.com/docs/FloatingOverlay\r\n */\r\nconst FloatingOverlay = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function FloatingOverlay(props, ref) {\r\n  const {\r\n    lockScroll = false,\r\n    ...rest\r\n  } = props;\r\n  const lockId = useId();\r\n  index(() => {\r\n    if (!lockScroll) return;\r\n    activeLocks.add(lockId);\r\n    const isIOS = /iP(hone|ad|od)|iOS/.test((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getPlatform)());\r\n    const bodyStyle = document.body.style;\r\n    // RTL <body> scrollbar\r\n    const scrollbarX = Math.round(document.documentElement.getBoundingClientRect().left) + document.documentElement.scrollLeft;\r\n    const paddingProp = scrollbarX ? 'paddingLeft' : 'paddingRight';\r\n    const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;\r\n    const scrollX = bodyStyle.left ? parseFloat(bodyStyle.left) : window.pageXOffset;\r\n    const scrollY = bodyStyle.top ? parseFloat(bodyStyle.top) : window.pageYOffset;\r\n    bodyStyle.overflow = 'hidden';\r\n    if (scrollbarWidth) {\r\n      bodyStyle[paddingProp] = scrollbarWidth + \"px\";\r\n    }\r\n\r\n    // Only iOS doesn't respect `overflow: hidden` on document.body, and this\r\n    // technique has fewer side effects.\r\n    if (isIOS) {\r\n      var _window$visualViewpor, _window$visualViewpor2;\r\n      // iOS 12 does not support `visualViewport`.\r\n      const offsetLeft = ((_window$visualViewpor = window.visualViewport) == null ? void 0 : _window$visualViewpor.offsetLeft) || 0;\r\n      const offsetTop = ((_window$visualViewpor2 = window.visualViewport) == null ? void 0 : _window$visualViewpor2.offsetTop) || 0;\r\n      Object.assign(bodyStyle, {\r\n        position: 'fixed',\r\n        top: -(scrollY - Math.floor(offsetTop)) + \"px\",\r\n        left: -(scrollX - Math.floor(offsetLeft)) + \"px\",\r\n        right: '0'\r\n      });\r\n    }\r\n    return () => {\r\n      activeLocks.delete(lockId);\r\n      if (activeLocks.size === 0) {\r\n        Object.assign(bodyStyle, {\r\n          overflow: '',\r\n          [paddingProp]: ''\r\n        });\r\n        if (isIOS) {\r\n          Object.assign(bodyStyle, {\r\n            position: '',\r\n            top: '',\r\n            left: '',\r\n            right: ''\r\n          });\r\n          window.scrollTo(scrollX, scrollY);\r\n        }\r\n      }\r\n    };\r\n  }, [lockId, lockScroll]);\r\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", _extends({\r\n    ref: ref\r\n  }, rest, {\r\n    style: {\r\n      position: 'fixed',\r\n      overflow: 'auto',\r\n      top: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      left: 0,\r\n      ...rest.style\r\n    }\r\n  }));\r\n});\r\n\r\nfunction isButtonTarget(event) {\r\n  return (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.isHTMLElement)(event.target) && event.target.tagName === 'BUTTON';\r\n}\r\nfunction isSpaceIgnored(element) {\r\n  return (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isTypeableElement)(element);\r\n}\r\n/**\r\n * Opens or closes the floating element when clicking the reference element.\r\n * @see https://floating-ui.com/docs/useClick\r\n */\r\nfunction useClick(context, props) {\r\n  if (props === void 0) {\r\n    props = {};\r\n  }\r\n  const {\r\n    open,\r\n    onOpenChange,\r\n    dataRef,\r\n    elements: {\r\n      domReference\r\n    }\r\n  } = context;\r\n  const {\r\n    enabled = true,\r\n    event: eventOption = 'click',\r\n    toggle = true,\r\n    ignoreMouse = false,\r\n    keyboardHandlers = true\r\n  } = props;\r\n  const pointerTypeRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\r\n  const didKeyDownRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\r\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n    if (!enabled) return {};\r\n    return {\r\n      reference: {\r\n        onPointerDown(event) {\r\n          pointerTypeRef.current = event.pointerType;\r\n        },\r\n        onMouseDown(event) {\r\n          // Ignore all buttons except for the \"main\" button.\r\n          // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\r\n          if (event.button !== 0) {\r\n            return;\r\n          }\r\n          if ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isMouseLikePointerType)(pointerTypeRef.current, true) && ignoreMouse) {\r\n            return;\r\n          }\r\n          if (eventOption === 'click') {\r\n            return;\r\n          }\r\n          if (open && toggle && (dataRef.current.openEvent ? dataRef.current.openEvent.type === 'mousedown' : true)) {\r\n            onOpenChange(false, event.nativeEvent, 'click');\r\n          } else {\r\n            // Prevent stealing focus from the floating element\r\n            event.preventDefault();\r\n            onOpenChange(true, event.nativeEvent, 'click');\r\n          }\r\n        },\r\n        onClick(event) {\r\n          if (eventOption === 'mousedown' && pointerTypeRef.current) {\r\n            pointerTypeRef.current = undefined;\r\n            return;\r\n          }\r\n          if ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isMouseLikePointerType)(pointerTypeRef.current, true) && ignoreMouse) {\r\n            return;\r\n          }\r\n          if (open && toggle && (dataRef.current.openEvent ? dataRef.current.openEvent.type === 'click' : true)) {\r\n            onOpenChange(false, event.nativeEvent, 'click');\r\n          } else {\r\n            onOpenChange(true, event.nativeEvent, 'click');\r\n          }\r\n        },\r\n        onKeyDown(event) {\r\n          pointerTypeRef.current = undefined;\r\n          if (event.defaultPrevented || !keyboardHandlers || isButtonTarget(event)) {\r\n            return;\r\n          }\r\n          if (event.key === ' ' && !isSpaceIgnored(domReference)) {\r\n            // Prevent scrolling\r\n            event.preventDefault();\r\n            didKeyDownRef.current = true;\r\n          }\r\n          if (event.key === 'Enter') {\r\n            if (open && toggle) {\r\n              onOpenChange(false, event.nativeEvent, 'click');\r\n            } else {\r\n              onOpenChange(true, event.nativeEvent, 'click');\r\n            }\r\n          }\r\n        },\r\n        onKeyUp(event) {\r\n          if (event.defaultPrevented || !keyboardHandlers || isButtonTarget(event) || isSpaceIgnored(domReference)) {\r\n            return;\r\n          }\r\n          if (event.key === ' ' && didKeyDownRef.current) {\r\n            didKeyDownRef.current = false;\r\n            if (open && toggle) {\r\n              onOpenChange(false, event.nativeEvent, 'click');\r\n            } else {\r\n              onOpenChange(true, event.nativeEvent, 'click');\r\n            }\r\n          }\r\n        }\r\n      }\r\n    };\r\n  }, [enabled, dataRef, eventOption, ignoreMouse, keyboardHandlers, domReference, toggle, open, onOpenChange]);\r\n}\r\n\r\nfunction createVirtualElement(domRef, data) {\r\n  let offsetX = null;\r\n  let offsetY = null;\r\n  let isAutoUpdateEvent = false;\r\n  return {\r\n    contextElement: domRef.current || undefined,\r\n    getBoundingClientRect() {\r\n      var _domRef$current, _data$dataRef$current;\r\n      const domRect = ((_domRef$current = domRef.current) == null ? void 0 : _domRef$current.getBoundingClientRect()) || {\r\n        width: 0,\r\n        height: 0,\r\n        x: 0,\r\n        y: 0\r\n      };\r\n      const isXAxis = data.axis === 'x' || data.axis === 'both';\r\n      const isYAxis = data.axis === 'y' || data.axis === 'both';\r\n      const canTrackCursorOnAutoUpdate = ['mouseenter', 'mousemove'].includes(((_data$dataRef$current = data.dataRef.current.openEvent) == null ? void 0 : _data$dataRef$current.type) || '') && data.pointerType !== 'touch';\r\n      let width = domRect.width;\r\n      let height = domRect.height;\r\n      let x = domRect.x;\r\n      let y = domRect.y;\r\n      if (offsetX == null && data.x && isXAxis) {\r\n        offsetX = domRect.x - data.x;\r\n      }\r\n      if (offsetY == null && data.y && isYAxis) {\r\n        offsetY = domRect.y - data.y;\r\n      }\r\n      x -= offsetX || 0;\r\n      y -= offsetY || 0;\r\n      width = 0;\r\n      height = 0;\r\n      if (!isAutoUpdateEvent || canTrackCursorOnAutoUpdate) {\r\n        width = data.axis === 'y' ? domRect.width : 0;\r\n        height = data.axis === 'x' ? domRect.height : 0;\r\n        x = isXAxis && data.x != null ? data.x : x;\r\n        y = isYAxis && data.y != null ? data.y : y;\r\n      } else if (isAutoUpdateEvent && !canTrackCursorOnAutoUpdate) {\r\n        height = data.axis === 'x' ? domRect.height : height;\r\n        width = data.axis === 'y' ? domRect.width : width;\r\n      }\r\n      isAutoUpdateEvent = true;\r\n      return {\r\n        width,\r\n        height,\r\n        x,\r\n        y,\r\n        top: y,\r\n        right: x + width,\r\n        bottom: y + height,\r\n        left: x\r\n      };\r\n    }\r\n  };\r\n}\r\nfunction isMouseBasedEvent(event) {\r\n  return event != null && event.clientX != null;\r\n}\r\n/**\r\n * Positions the floating element relative to a client point (in the viewport),\r\n * such as the mouse position. By default, it follows the mouse cursor.\r\n * @see https://floating-ui.com/docs/useClientPoint\r\n */\r\nfunction useClientPoint(context, props) {\r\n  if (props === void 0) {\r\n    props = {};\r\n  }\r\n  const {\r\n    open,\r\n    refs,\r\n    dataRef,\r\n    elements: {\r\n      floating\r\n    }\r\n  } = context;\r\n  const {\r\n    enabled = true,\r\n    axis = 'both',\r\n    x = null,\r\n    y = null\r\n  } = props;\r\n  const initialRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\r\n  const cleanupListenerRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n  const [pointerType, setPointerType] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\r\n  const [reactive, setReactive] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\r\n  const setReference = useEffectEvent((x, y) => {\r\n    if (initialRef.current) return;\r\n\r\n    // Prevent setting if the open event was not a mouse-like one\r\n    // (e.g. focus to open, then hover over the reference element).\r\n    // Only apply if the event exists.\r\n    if (dataRef.current.openEvent && !isMouseBasedEvent(dataRef.current.openEvent)) {\r\n      return;\r\n    }\r\n    refs.setPositionReference(createVirtualElement(refs.domReference, {\r\n      x,\r\n      y,\r\n      axis,\r\n      dataRef,\r\n      pointerType\r\n    }));\r\n  });\r\n  const handleReferenceEnterOrMove = useEffectEvent(event => {\r\n    if (x != null || y != null) return;\r\n    if (!open) {\r\n      setReference(event.clientX, event.clientY);\r\n    } else if (!cleanupListenerRef.current) {\r\n      // If there's no cleanup, there's no listener, but we want to ensure\r\n      // we add the listener if the cursor landed on the floating element and\r\n      // then back on the reference (i.e. it's interactive).\r\n      setReactive([]);\r\n    }\r\n  });\r\n\r\n  // If the pointer is a mouse-like pointer, we want to continue following the\r\n  // mouse even if the floating element is transitioning out. On touch\r\n  // devices, this is undesirable because the floating element will move to\r\n  // the dismissal touch point.\r\n  const openCheck = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isMouseLikePointerType)(pointerType) ? floating : open;\r\n  const addListener = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {\r\n    // Explicitly specified `x`/`y` coordinates shouldn't add a listener.\r\n    if (!openCheck || !enabled || x != null || y != null) return;\r\n    const win = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.getWindow)(refs.floating.current);\r\n    function handleMouseMove(event) {\r\n      const target = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getTarget)(event);\r\n      if (!(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(refs.floating.current, target)) {\r\n        setReference(event.clientX, event.clientY);\r\n      } else {\r\n        win.removeEventListener('mousemove', handleMouseMove);\r\n        cleanupListenerRef.current = null;\r\n      }\r\n    }\r\n    if (!dataRef.current.openEvent || isMouseBasedEvent(dataRef.current.openEvent)) {\r\n      win.addEventListener('mousemove', handleMouseMove);\r\n      const cleanup = () => {\r\n        win.removeEventListener('mousemove', handleMouseMove);\r\n        cleanupListenerRef.current = null;\r\n      };\r\n      cleanupListenerRef.current = cleanup;\r\n      return cleanup;\r\n    }\r\n    refs.setPositionReference(refs.domReference.current);\r\n  }, [dataRef, enabled, openCheck, refs, setReference, x, y]);\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    return addListener();\r\n  }, [addListener, reactive]);\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    if (enabled && !floating) {\r\n      initialRef.current = false;\r\n    }\r\n  }, [enabled, floating]);\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    if (!enabled && open) {\r\n      initialRef.current = true;\r\n    }\r\n  }, [enabled, open]);\r\n  index(() => {\r\n    if (enabled && (x != null || y != null)) {\r\n      initialRef.current = false;\r\n      setReference(x, y);\r\n    }\r\n  }, [enabled, x, y, setReference]);\r\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n    if (!enabled) return {};\r\n    function setPointerTypeRef(_ref) {\r\n      let {\r\n        pointerType\r\n      } = _ref;\r\n      setPointerType(pointerType);\r\n    }\r\n    return {\r\n      reference: {\r\n        onPointerDown: setPointerTypeRef,\r\n        onPointerEnter: setPointerTypeRef,\r\n        onMouseMove: handleReferenceEnterOrMove,\r\n        onMouseEnter: handleReferenceEnterOrMove\r\n      }\r\n    };\r\n  }, [enabled, handleReferenceEnterOrMove]);\r\n}\r\n\r\nconst bubbleHandlerKeys = {\r\n  pointerdown: 'onPointerDown',\r\n  mousedown: 'onMouseDown',\r\n  click: 'onClick'\r\n};\r\nconst captureHandlerKeys = {\r\n  pointerdown: 'onPointerDownCapture',\r\n  mousedown: 'onMouseDownCapture',\r\n  click: 'onClickCapture'\r\n};\r\nconst normalizeProp = normalizable => {\r\n  var _normalizable$escapeK, _normalizable$outside;\r\n  return {\r\n    escapeKey: typeof normalizable === 'boolean' ? normalizable : (_normalizable$escapeK = normalizable == null ? void 0 : normalizable.escapeKey) != null ? _normalizable$escapeK : false,\r\n    outsidePress: typeof normalizable === 'boolean' ? normalizable : (_normalizable$outside = normalizable == null ? void 0 : normalizable.outsidePress) != null ? _normalizable$outside : true\r\n  };\r\n};\r\n/**\r\n * Closes the floating element when a dismissal is requested — by default, when\r\n * the user presses the `escape` key or outside of the floating element.\r\n * @see https://floating-ui.com/docs/useDismiss\r\n */\r\nfunction useDismiss(context, props) {\r\n  if (props === void 0) {\r\n    props = {};\r\n  }\r\n  const {\r\n    open,\r\n    onOpenChange,\r\n    nodeId,\r\n    elements: {\r\n      reference,\r\n      domReference,\r\n      floating\r\n    },\r\n    dataRef\r\n  } = context;\r\n  const {\r\n    enabled = true,\r\n    escapeKey = true,\r\n    outsidePress: unstable_outsidePress = true,\r\n    outsidePressEvent = 'pointerdown',\r\n    referencePress = false,\r\n    referencePressEvent = 'pointerdown',\r\n    ancestorScroll = false,\r\n    bubbles,\r\n    capture\r\n  } = props;\r\n  const tree = useFloatingTree();\r\n  const outsidePressFn = useEffectEvent(typeof unstable_outsidePress === 'function' ? unstable_outsidePress : () => false);\r\n  const outsidePress = typeof unstable_outsidePress === 'function' ? outsidePressFn : unstable_outsidePress;\r\n  const insideReactTreeRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\r\n  const endedOrStartedInsideRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\r\n  const {\r\n    escapeKey: escapeKeyBubbles,\r\n    outsidePress: outsidePressBubbles\r\n  } = normalizeProp(bubbles);\r\n  const {\r\n    escapeKey: escapeKeyCapture,\r\n    outsidePress: outsidePressCapture\r\n  } = normalizeProp(capture);\r\n  const closeOnEscapeKeyDown = useEffectEvent(event => {\r\n    if (!open || !enabled || !escapeKey || event.key !== 'Escape') {\r\n      return;\r\n    }\r\n    const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];\r\n    if (!escapeKeyBubbles) {\r\n      event.stopPropagation();\r\n      if (children.length > 0) {\r\n        let shouldDismiss = true;\r\n        children.forEach(child => {\r\n          var _child$context;\r\n          if ((_child$context = child.context) != null && _child$context.open && !child.context.dataRef.current.__escapeKeyBubbles) {\r\n            shouldDismiss = false;\r\n            return;\r\n          }\r\n        });\r\n        if (!shouldDismiss) {\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    onOpenChange(false, (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isReactEvent)(event) ? event.nativeEvent : event, 'escape-key');\r\n  });\r\n  const closeOnEscapeKeyDownCapture = useEffectEvent(event => {\r\n    var _getTarget2;\r\n    const callback = () => {\r\n      var _getTarget;\r\n      closeOnEscapeKeyDown(event);\r\n      (_getTarget = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getTarget)(event)) == null || _getTarget.removeEventListener('keydown', callback);\r\n    };\r\n    (_getTarget2 = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getTarget)(event)) == null || _getTarget2.addEventListener('keydown', callback);\r\n  });\r\n  const closeOnPressOutside = useEffectEvent(event => {\r\n    // Given developers can stop the propagation of the synthetic event,\r\n    // we can only be confident with a positive value.\r\n    const insideReactTree = insideReactTreeRef.current;\r\n    insideReactTreeRef.current = false;\r\n\r\n    // When click outside is lazy (`click` event), handle dragging.\r\n    // Don't close if:\r\n    // - The click started inside the floating element.\r\n    // - The click ended inside the floating element.\r\n    const endedOrStartedInside = endedOrStartedInsideRef.current;\r\n    endedOrStartedInsideRef.current = false;\r\n    if (outsidePressEvent === 'click' && endedOrStartedInside) {\r\n      return;\r\n    }\r\n    if (insideReactTree) {\r\n      return;\r\n    }\r\n    if (typeof outsidePress === 'function' && !outsidePress(event)) {\r\n      return;\r\n    }\r\n    const target = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getTarget)(event);\r\n    const inertSelector = \"[\" + createAttribute('inert') + \"]\";\r\n    const markers = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(floating).querySelectorAll(inertSelector);\r\n    let targetRootAncestor = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.isElement)(target) ? target : null;\r\n    while (targetRootAncestor && !(0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.isLastTraversableNode)(targetRootAncestor)) {\r\n      const nextParent = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.getParentNode)(targetRootAncestor);\r\n      if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.isLastTraversableNode)(nextParent) || !(0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.isElement)(nextParent)) {\r\n        break;\r\n      }\r\n      targetRootAncestor = nextParent;\r\n    }\r\n\r\n    // Check if the click occurred on a third-party element injected after the\r\n    // floating element rendered.\r\n    if (markers.length && (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.isElement)(target) && !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isRootElement)(target) &&\r\n    // Clicked on a direct ancestor (e.g. FloatingOverlay).\r\n    !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(target, floating) &&\r\n    // If the target root element contains none of the markers, then the\r\n    // element was injected after the floating element rendered.\r\n    Array.from(markers).every(marker => !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(targetRootAncestor, marker))) {\r\n      return;\r\n    }\r\n\r\n    // Check if the click occurred on the scrollbar\r\n    if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.isHTMLElement)(target) && floating) {\r\n      // In Firefox, `target.scrollWidth > target.clientWidth` for inline\r\n      // elements.\r\n      const canScrollX = target.clientWidth > 0 && target.scrollWidth > target.clientWidth;\r\n      const canScrollY = target.clientHeight > 0 && target.scrollHeight > target.clientHeight;\r\n      let xCond = canScrollY && event.offsetX > target.clientWidth;\r\n\r\n      // In some browsers it is possible to change the <body> (or window)\r\n      // scrollbar to the left side, but is very rare and is difficult to\r\n      // check for. Plus, for modal dialogs with backdrops, it is more\r\n      // important that the backdrop is checked but not so much the window.\r\n      if (canScrollY) {\r\n        const isRTL = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.getComputedStyle)(target).direction === 'rtl';\r\n        if (isRTL) {\r\n          xCond = event.offsetX <= target.offsetWidth - target.clientWidth;\r\n        }\r\n      }\r\n      if (xCond || canScrollX && event.offsetY > target.clientHeight) {\r\n        return;\r\n      }\r\n    }\r\n    const targetIsInsideChildren = tree && getChildren(tree.nodesRef.current, nodeId).some(node => {\r\n      var _node$context;\r\n      return (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isEventTargetWithin)(event, (_node$context = node.context) == null ? void 0 : _node$context.elements.floating);\r\n    });\r\n    if ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isEventTargetWithin)(event, floating) || (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isEventTargetWithin)(event, domReference) || targetIsInsideChildren) {\r\n      return;\r\n    }\r\n    const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];\r\n    if (children.length > 0) {\r\n      let shouldDismiss = true;\r\n      children.forEach(child => {\r\n        var _child$context2;\r\n        if ((_child$context2 = child.context) != null && _child$context2.open && !child.context.dataRef.current.__outsidePressBubbles) {\r\n          shouldDismiss = false;\r\n          return;\r\n        }\r\n      });\r\n      if (!shouldDismiss) {\r\n        return;\r\n      }\r\n    }\r\n    onOpenChange(false, event, 'outside-press');\r\n  });\r\n  const closeOnPressOutsideCapture = useEffectEvent(event => {\r\n    var _getTarget4;\r\n    const callback = () => {\r\n      var _getTarget3;\r\n      closeOnPressOutside(event);\r\n      (_getTarget3 = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getTarget)(event)) == null || _getTarget3.removeEventListener(outsidePressEvent, callback);\r\n    };\r\n    (_getTarget4 = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getTarget)(event)) == null || _getTarget4.addEventListener(outsidePressEvent, callback);\r\n  });\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    if (!open || !enabled) {\r\n      return;\r\n    }\r\n    dataRef.current.__escapeKeyBubbles = escapeKeyBubbles;\r\n    dataRef.current.__outsidePressBubbles = outsidePressBubbles;\r\n    function onScroll(event) {\r\n      onOpenChange(false, event, 'ancestor-scroll');\r\n    }\r\n    const doc = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(floating);\r\n    escapeKey && doc.addEventListener('keydown', escapeKeyCapture ? closeOnEscapeKeyDownCapture : closeOnEscapeKeyDown, escapeKeyCapture);\r\n    outsidePress && doc.addEventListener(outsidePressEvent, outsidePressCapture ? closeOnPressOutsideCapture : closeOnPressOutside, outsidePressCapture);\r\n    let ancestors = [];\r\n    if (ancestorScroll) {\r\n      if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.isElement)(domReference)) {\r\n        ancestors = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.getOverflowAncestors)(domReference);\r\n      }\r\n      if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.isElement)(floating)) {\r\n        ancestors = ancestors.concat((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.getOverflowAncestors)(floating));\r\n      }\r\n      if (!(0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.isElement)(reference) && reference && reference.contextElement) {\r\n        ancestors = ancestors.concat((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.getOverflowAncestors)(reference.contextElement));\r\n      }\r\n    }\r\n\r\n    // Ignore the visual viewport for scrolling dismissal (allow pinch-zoom)\r\n    ancestors = ancestors.filter(ancestor => {\r\n      var _doc$defaultView;\r\n      return ancestor !== ((_doc$defaultView = doc.defaultView) == null ? void 0 : _doc$defaultView.visualViewport);\r\n    });\r\n    ancestors.forEach(ancestor => {\r\n      ancestor.addEventListener('scroll', onScroll, {\r\n        passive: true\r\n      });\r\n    });\r\n    return () => {\r\n      escapeKey && doc.removeEventListener('keydown', escapeKeyCapture ? closeOnEscapeKeyDownCapture : closeOnEscapeKeyDown, escapeKeyCapture);\r\n      outsidePress && doc.removeEventListener(outsidePressEvent, outsidePressCapture ? closeOnPressOutsideCapture : closeOnPressOutside, outsidePressCapture);\r\n      ancestors.forEach(ancestor => {\r\n        ancestor.removeEventListener('scroll', onScroll);\r\n      });\r\n    };\r\n  }, [dataRef, floating, domReference, reference, escapeKey, outsidePress, outsidePressEvent, open, onOpenChange, ancestorScroll, enabled, escapeKeyBubbles, outsidePressBubbles, closeOnEscapeKeyDown, escapeKeyCapture, closeOnEscapeKeyDownCapture, closeOnPressOutside, outsidePressCapture, closeOnPressOutsideCapture]);\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    insideReactTreeRef.current = false;\r\n  }, [outsidePress, outsidePressEvent]);\r\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n    if (!enabled) {\r\n      return {};\r\n    }\r\n    return {\r\n      reference: {\r\n        onKeyDown: closeOnEscapeKeyDown,\r\n        [bubbleHandlerKeys[referencePressEvent]]: event => {\r\n          if (referencePress) {\r\n            onOpenChange(false, event.nativeEvent, 'reference-press');\r\n          }\r\n        }\r\n      },\r\n      floating: {\r\n        onKeyDown: closeOnEscapeKeyDown,\r\n        onMouseDown() {\r\n          endedOrStartedInsideRef.current = true;\r\n        },\r\n        onMouseUp() {\r\n          endedOrStartedInsideRef.current = true;\r\n        },\r\n        [captureHandlerKeys[outsidePressEvent]]: () => {\r\n          insideReactTreeRef.current = true;\r\n        }\r\n      }\r\n    };\r\n  }, [enabled, referencePress, outsidePressEvent, referencePressEvent, onOpenChange, closeOnEscapeKeyDown]);\r\n}\r\n\r\n/**\r\n * Provides data to position a floating element and context to add interactions.\r\n * @see https://floating-ui.com/docs/useFloating\r\n */\r\nfunction useFloating(options) {\r\n  var _options$elements;\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  const {\r\n    open = false,\r\n    onOpenChange: unstable_onOpenChange,\r\n    nodeId\r\n  } = options;\r\n  const [_domReference, setDomReference] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\r\n  const [positionReference, _setPositionReference] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\r\n  const optionDomReference = (_options$elements = options.elements) == null ? void 0 : _options$elements.reference;\r\n  const domReference = optionDomReference || _domReference;\r\n  if (true) {\r\n    if (optionDomReference && !(0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.isElement)(optionDomReference)) {\r\n      error('Cannot pass a virtual element to the `elements.reference` option,', 'as it must be a real DOM element. Use `refs.setPositionReference()`', 'instead.');\r\n    }\r\n  }\r\n  index(() => {\r\n    if (domReference) {\r\n      domReferenceRef.current = domReference;\r\n    }\r\n  }, [domReference]);\r\n  const position = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_1__.useFloating)({\r\n    ...options,\r\n    elements: {\r\n      ...options.elements,\r\n      ...(positionReference && {\r\n        reference: positionReference\r\n      })\r\n    }\r\n  });\r\n  const tree = useFloatingTree();\r\n  const nested = useFloatingParentNodeId() != null;\r\n  const onOpenChange = useEffectEvent((open, event, reason) => {\r\n    dataRef.current.openEvent = open ? event : undefined;\r\n    events.emit('openchange', {\r\n      open,\r\n      event,\r\n      reason,\r\n      nested\r\n    });\r\n    unstable_onOpenChange == null || unstable_onOpenChange(open, event, reason);\r\n  });\r\n  const domReferenceRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n  const dataRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef({});\r\n  const events = react__WEBPACK_IMPORTED_MODULE_0__.useState(() => createPubSub())[0];\r\n  const floatingId = useId();\r\n  const setPositionReference = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(node => {\r\n    const computedPositionReference = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.isElement)(node) ? {\r\n      getBoundingClientRect: () => node.getBoundingClientRect(),\r\n      contextElement: node\r\n    } : node;\r\n    // Store the positionReference in state if the DOM reference is specified externally via the\r\n    // `elements.reference` option. This ensures that it won't be overridden on future renders.\r\n    _setPositionReference(computedPositionReference);\r\n    position.refs.setReference(computedPositionReference);\r\n  }, [position.refs]);\r\n  const setReference = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(node => {\r\n    if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.isElement)(node) || node === null) {\r\n      domReferenceRef.current = node;\r\n      setDomReference(node);\r\n    }\r\n\r\n    // Backwards-compatibility for passing a virtual element to `reference`\r\n    // after it has set the DOM reference.\r\n    if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.isElement)(position.refs.reference.current) || position.refs.reference.current === null ||\r\n    // Don't allow setting virtual elements using the old technique back to\r\n    // `null` to support `positionReference` + an unstable `reference`\r\n    // callback ref.\r\n    node !== null && !(0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.isElement)(node)) {\r\n      position.refs.setReference(node);\r\n    }\r\n  }, [position.refs]);\r\n  const refs = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\r\n    ...position.refs,\r\n    setReference,\r\n    setPositionReference,\r\n    domReference: domReferenceRef\r\n  }), [position.refs, setReference, setPositionReference]);\r\n  const elements = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\r\n    ...position.elements,\r\n    domReference: domReference\r\n  }), [position.elements, domReference]);\r\n  const context = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\r\n    ...position,\r\n    refs,\r\n    elements,\r\n    dataRef,\r\n    nodeId,\r\n    floatingId,\r\n    events,\r\n    open,\r\n    onOpenChange\r\n  }), [position, nodeId, floatingId, events, open, onOpenChange, refs, elements]);\r\n  index(() => {\r\n    const node = tree == null ? void 0 : tree.nodesRef.current.find(node => node.id === nodeId);\r\n    if (node) {\r\n      node.context = context;\r\n    }\r\n  });\r\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\r\n    ...position,\r\n    context,\r\n    refs,\r\n    elements\r\n  }), [position, refs, elements, context]);\r\n}\r\n\r\n/**\r\n * Opens the floating element while the reference element has focus, like CSS\r\n * `:focus`.\r\n * @see https://floating-ui.com/docs/useFocus\r\n */\r\nfunction useFocus(context, props) {\r\n  if (props === void 0) {\r\n    props = {};\r\n  }\r\n  const {\r\n    open,\r\n    onOpenChange,\r\n    events,\r\n    refs,\r\n    elements: {\r\n      domReference\r\n    }\r\n  } = context;\r\n  const {\r\n    enabled = true,\r\n    visibleOnly = true\r\n  } = props;\r\n  const blockFocusRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\r\n  const timeoutRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\r\n  const keyboardModalityRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(true);\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    if (!enabled) {\r\n      return;\r\n    }\r\n    const win = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.getWindow)(domReference);\r\n\r\n    // If the reference was focused and the user left the tab/window, and the\r\n    // floating element was not open, the focus should be blocked when they\r\n    // return to the tab/window.\r\n    function onBlur() {\r\n      if (!open && (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.isHTMLElement)(domReference) && domReference === (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.activeElement)((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(domReference))) {\r\n        blockFocusRef.current = true;\r\n      }\r\n    }\r\n    function onKeyDown() {\r\n      keyboardModalityRef.current = true;\r\n    }\r\n    win.addEventListener('blur', onBlur);\r\n    win.addEventListener('keydown', onKeyDown, true);\r\n    return () => {\r\n      win.removeEventListener('blur', onBlur);\r\n      win.removeEventListener('keydown', onKeyDown, true);\r\n    };\r\n  }, [domReference, open, enabled]);\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    if (!enabled) {\r\n      return;\r\n    }\r\n    function onOpenChange(_ref) {\r\n      let {\r\n        reason\r\n      } = _ref;\r\n      if (reason === 'reference-press' || reason === 'escape-key') {\r\n        blockFocusRef.current = true;\r\n      }\r\n    }\r\n    events.on('openchange', onOpenChange);\r\n    return () => {\r\n      events.off('openchange', onOpenChange);\r\n    };\r\n  }, [events, enabled]);\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    return () => {\r\n      clearTimeout(timeoutRef.current);\r\n    };\r\n  }, []);\r\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n    if (!enabled) {\r\n      return {};\r\n    }\r\n    return {\r\n      reference: {\r\n        onPointerDown(event) {\r\n          if ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isVirtualPointerEvent)(event.nativeEvent)) return;\r\n          keyboardModalityRef.current = false;\r\n        },\r\n        onMouseLeave() {\r\n          blockFocusRef.current = false;\r\n        },\r\n        onFocus(event) {\r\n          if (blockFocusRef.current) return;\r\n          const target = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getTarget)(event.nativeEvent);\r\n          if (visibleOnly && (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.isElement)(target)) {\r\n            try {\r\n              // Mac Safari unreliably matches `:focus-visible` on the reference\r\n              // if focus was outside the page initially - use the fallback\r\n              // instead.\r\n              if ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isSafari)() && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isMac)()) throw Error();\r\n              if (!target.matches(':focus-visible')) return;\r\n            } catch (e) {\r\n              // Old browsers will throw an error when using `:focus-visible`.\r\n              if (!keyboardModalityRef.current && !(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isTypeableElement)(target)) {\r\n                return;\r\n              }\r\n            }\r\n          }\r\n          onOpenChange(true, event.nativeEvent, 'focus');\r\n        },\r\n        onBlur(event) {\r\n          blockFocusRef.current = false;\r\n          const relatedTarget = event.relatedTarget;\r\n\r\n          // Hit the non-modal focus management portal guard. Focus will be\r\n          // moved into the floating element immediately after.\r\n          const movedToFocusGuard = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.isElement)(relatedTarget) && relatedTarget.hasAttribute(createAttribute('focus-guard')) && relatedTarget.getAttribute('data-type') === 'outside';\r\n\r\n          // Wait for the window blur listener to fire.\r\n          timeoutRef.current = window.setTimeout(() => {\r\n            const activeEl = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.activeElement)(domReference ? domReference.ownerDocument : document);\r\n\r\n            // Focus left the page, keep it open.\r\n            if (!relatedTarget && activeEl === domReference) return;\r\n\r\n            // When focusing the reference element (e.g. regular click), then\r\n            // clicking into the floating element, prevent it from hiding.\r\n            // Note: it must be focusable, e.g. `tabindex=\"-1\"`.\r\n            // We can not rely on relatedTarget to point to the correct element\r\n            // as it will only point to the shadow host of the newly focused element\r\n            // and not the element that actually has received focus if it is located\r\n            // inside a shadow root.\r\n            if ((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(refs.floating.current, activeEl) || (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(domReference, activeEl) || movedToFocusGuard) {\r\n              return;\r\n            }\r\n            onOpenChange(false, event.nativeEvent, 'focus');\r\n          });\r\n        }\r\n      }\r\n    };\r\n  }, [enabled, visibleOnly, domReference, refs, onOpenChange]);\r\n}\r\n\r\nconst ACTIVE_KEY = 'active';\r\nconst SELECTED_KEY = 'selected';\r\nfunction mergeProps(userProps, propsList, elementKey) {\r\n  const map = new Map();\r\n  const isItem = elementKey === 'item';\r\n  let domUserProps = userProps;\r\n  if (isItem && userProps) {\r\n    const {\r\n      [ACTIVE_KEY]: _,\r\n      [SELECTED_KEY]: __,\r\n      ...validProps\r\n    } = userProps;\r\n    domUserProps = validProps;\r\n  }\r\n  return {\r\n    ...(elementKey === 'floating' && {\r\n      tabIndex: -1\r\n    }),\r\n    ...domUserProps,\r\n    ...propsList.map(value => {\r\n      const propsOrGetProps = value ? value[elementKey] : null;\r\n      if (typeof propsOrGetProps === 'function') {\r\n        return userProps ? propsOrGetProps(userProps) : null;\r\n      }\r\n      return propsOrGetProps;\r\n    }).concat(userProps).reduce((acc, props) => {\r\n      if (!props) {\r\n        return acc;\r\n      }\r\n      Object.entries(props).forEach(_ref => {\r\n        let [key, value] = _ref;\r\n        if (isItem && [ACTIVE_KEY, SELECTED_KEY].includes(key)) {\r\n          return;\r\n        }\r\n        if (key.indexOf('on') === 0) {\r\n          if (!map.has(key)) {\r\n            map.set(key, []);\r\n          }\r\n          if (typeof value === 'function') {\r\n            var _map$get;\r\n            (_map$get = map.get(key)) == null || _map$get.push(value);\r\n            acc[key] = function () {\r\n              var _map$get2;\r\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n                args[_key] = arguments[_key];\r\n              }\r\n              return (_map$get2 = map.get(key)) == null ? void 0 : _map$get2.map(fn => fn(...args)).find(val => val !== undefined);\r\n            };\r\n          }\r\n        } else {\r\n          acc[key] = value;\r\n        }\r\n      });\r\n      return acc;\r\n    }, {})\r\n  };\r\n}\r\n/**\r\n * Merges an array of interaction hooks' props into prop getters, allowing\r\n * event handler functions to be composed together without overwriting one\r\n * another.\r\n * @see https://floating-ui.com/docs/useInteractions\r\n */\r\nfunction useInteractions(propsList) {\r\n  if (propsList === void 0) {\r\n    propsList = [];\r\n  }\r\n  // The dependencies are a dynamic array, so we can't use the linter's\r\n  // suggestion to add it to the deps array.\r\n  const deps = propsList;\r\n  const getReferenceProps = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(userProps => mergeProps(userProps, propsList, 'reference'),\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  deps);\r\n  const getFloatingProps = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(userProps => mergeProps(userProps, propsList, 'floating'),\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  deps);\r\n  const getItemProps = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(userProps => mergeProps(userProps, propsList, 'item'),\r\n  // Granularly check for `item` changes, because the `getItemProps` getter\r\n  // should be as referentially stable as possible since it may be passed as\r\n  // a prop to many components. All `item` key values must therefore be\r\n  // memoized.\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  propsList.map(key => key == null ? void 0 : key.item));\r\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\r\n    getReferenceProps,\r\n    getFloatingProps,\r\n    getItemProps\r\n  }), [getReferenceProps, getFloatingProps, getItemProps]);\r\n}\r\n\r\nlet isPreventScrollSupported = false;\r\nfunction doSwitch(orientation, vertical, horizontal) {\r\n  switch (orientation) {\r\n    case 'vertical':\r\n      return vertical;\r\n    case 'horizontal':\r\n      return horizontal;\r\n    default:\r\n      return vertical || horizontal;\r\n  }\r\n}\r\nfunction isMainOrientationKey(key, orientation) {\r\n  const vertical = key === ARROW_UP || key === ARROW_DOWN;\r\n  const horizontal = key === ARROW_LEFT || key === ARROW_RIGHT;\r\n  return doSwitch(orientation, vertical, horizontal);\r\n}\r\nfunction isMainOrientationToEndKey(key, orientation, rtl) {\r\n  const vertical = key === ARROW_DOWN;\r\n  const horizontal = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;\r\n  return doSwitch(orientation, vertical, horizontal) || key === 'Enter' || key === ' ' || key === '';\r\n}\r\nfunction isCrossOrientationOpenKey(key, orientation, rtl) {\r\n  const vertical = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;\r\n  const horizontal = key === ARROW_DOWN;\r\n  return doSwitch(orientation, vertical, horizontal);\r\n}\r\nfunction isCrossOrientationCloseKey(key, orientation, rtl) {\r\n  const vertical = rtl ? key === ARROW_RIGHT : key === ARROW_LEFT;\r\n  const horizontal = key === ARROW_UP;\r\n  return doSwitch(orientation, vertical, horizontal);\r\n}\r\n/**\r\n * Adds arrow key-based navigation of a list of items, either using real DOM\r\n * focus or virtual focus.\r\n * @see https://floating-ui.com/docs/useListNavigation\r\n */\r\nfunction useListNavigation(context, props) {\r\n  const {\r\n    open,\r\n    onOpenChange,\r\n    refs,\r\n    elements: {\r\n      domReference,\r\n      floating\r\n    }\r\n  } = context;\r\n  const {\r\n    listRef,\r\n    activeIndex,\r\n    onNavigate: unstable_onNavigate = () => {},\r\n    enabled = true,\r\n    selectedIndex = null,\r\n    allowEscape = false,\r\n    loop = false,\r\n    nested = false,\r\n    rtl = false,\r\n    virtual = false,\r\n    focusItemOnOpen = 'auto',\r\n    focusItemOnHover = true,\r\n    openOnArrowKeyDown = true,\r\n    disabledIndices = undefined,\r\n    orientation = 'vertical',\r\n    cols = 1,\r\n    scrollItemIntoView = true,\r\n    virtualItemRef,\r\n    itemSizes,\r\n    dense = false\r\n  } = props;\r\n  if (true) {\r\n    if (allowEscape) {\r\n      if (!loop) {\r\n        warn('`useListNavigation` looping must be enabled to allow escaping.');\r\n      }\r\n      if (!virtual) {\r\n        warn('`useListNavigation` must be virtual to allow escaping.');\r\n      }\r\n    }\r\n    if (orientation === 'vertical' && cols > 1) {\r\n      warn('In grid list navigation mode (`cols` > 1), the `orientation` should', 'be either \"horizontal\" or \"both\".');\r\n    }\r\n  }\r\n  const parentId = useFloatingParentNodeId();\r\n  const tree = useFloatingTree();\r\n  const onNavigate = useEffectEvent(unstable_onNavigate);\r\n  const focusItemOnOpenRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(focusItemOnOpen);\r\n  const indexRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(selectedIndex != null ? selectedIndex : -1);\r\n  const keyRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n  const isPointerModalityRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(true);\r\n  const previousOnNavigateRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(onNavigate);\r\n  const previousMountedRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(!!floating);\r\n  const forceSyncFocus = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\r\n  const forceScrollIntoViewRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\r\n  const disabledIndicesRef = useLatestRef(disabledIndices);\r\n  const latestOpenRef = useLatestRef(open);\r\n  const scrollItemIntoViewRef = useLatestRef(scrollItemIntoView);\r\n  const [activeId, setActiveId] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\r\n  const [virtualId, setVirtualId] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\r\n  const focusItem = useEffectEvent(function (listRef, indexRef, forceScrollIntoView) {\r\n    if (forceScrollIntoView === void 0) {\r\n      forceScrollIntoView = false;\r\n    }\r\n    const item = listRef.current[indexRef.current];\r\n    if (!item) return;\r\n    if (virtual) {\r\n      setActiveId(item.id);\r\n      tree == null || tree.events.emit('virtualfocus', item);\r\n      if (virtualItemRef) {\r\n        virtualItemRef.current = item;\r\n      }\r\n    } else {\r\n      enqueueFocus(item, {\r\n        preventScroll: true,\r\n        // Mac Safari does not move the virtual cursor unless the focus call\r\n        // is sync. However, for the very first focus call, we need to wait\r\n        // for the position to be ready in order to prevent unwanted\r\n        // scrolling. This means the virtual cursor will not move to the first\r\n        // item when first opening the floating element, but will on\r\n        // subsequent calls. `preventScroll` is supported in modern Safari,\r\n        // so we can use that instead.\r\n        // iOS Safari must be async or the first item will not be focused.\r\n        sync: (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isMac)() && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isSafari)() ? isPreventScrollSupported || forceSyncFocus.current : false\r\n      });\r\n    }\r\n    requestAnimationFrame(() => {\r\n      const scrollIntoViewOptions = scrollItemIntoViewRef.current;\r\n      const shouldScrollIntoView = scrollIntoViewOptions && item && (forceScrollIntoView || !isPointerModalityRef.current);\r\n      if (shouldScrollIntoView) {\r\n        // JSDOM doesn't support `.scrollIntoView()` but it's widely supported\r\n        // by all browsers.\r\n        item.scrollIntoView == null || item.scrollIntoView(typeof scrollIntoViewOptions === 'boolean' ? {\r\n          block: 'nearest',\r\n          inline: 'nearest'\r\n        } : scrollIntoViewOptions);\r\n      }\r\n    });\r\n  });\r\n  index(() => {\r\n    document.createElement('div').focus({\r\n      get preventScroll() {\r\n        isPreventScrollSupported = true;\r\n        return false;\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  // Sync `selectedIndex` to be the `activeIndex` upon opening the floating\r\n  // element. Also, reset `activeIndex` upon closing the floating element.\r\n  index(() => {\r\n    if (!enabled) {\r\n      return;\r\n    }\r\n    if (open && floating) {\r\n      if (focusItemOnOpenRef.current && selectedIndex != null) {\r\n        // Regardless of the pointer modality, we want to ensure the selected\r\n        // item comes into view when the floating element is opened.\r\n        forceScrollIntoViewRef.current = true;\r\n        indexRef.current = selectedIndex;\r\n        onNavigate(selectedIndex);\r\n      }\r\n    } else if (previousMountedRef.current) {\r\n      // Since the user can specify `onNavigate` conditionally\r\n      // (onNavigate: open ? setActiveIndex : setSelectedIndex),\r\n      // we store and call the previous function.\r\n      indexRef.current = -1;\r\n      previousOnNavigateRef.current(null);\r\n    }\r\n  }, [enabled, open, floating, selectedIndex, onNavigate]);\r\n\r\n  // Sync `activeIndex` to be the focused item while the floating element is\r\n  // open.\r\n  index(() => {\r\n    if (!enabled) {\r\n      return;\r\n    }\r\n    if (open && floating) {\r\n      if (activeIndex == null) {\r\n        forceSyncFocus.current = false;\r\n        if (selectedIndex != null) {\r\n          return;\r\n        }\r\n\r\n        // Reset while the floating element was open (e.g. the list changed).\r\n        if (previousMountedRef.current) {\r\n          indexRef.current = -1;\r\n          focusItem(listRef, indexRef);\r\n        }\r\n\r\n        // Initial sync.\r\n        if (!previousMountedRef.current && focusItemOnOpenRef.current && (keyRef.current != null || focusItemOnOpenRef.current === true && keyRef.current == null)) {\r\n          let runs = 0;\r\n          const waitForListPopulated = () => {\r\n            if (listRef.current[0] == null) {\r\n              // Avoid letting the browser paint if possible on the first try,\r\n              // otherwise use rAF. Don't try more than twice, since something\r\n              // is wrong otherwise.\r\n              if (runs < 2) {\r\n                const scheduler = runs ? requestAnimationFrame : queueMicrotask;\r\n                scheduler(waitForListPopulated);\r\n              }\r\n              runs++;\r\n            } else {\r\n              indexRef.current = keyRef.current == null || isMainOrientationToEndKey(keyRef.current, orientation, rtl) || nested ? getMinIndex(listRef, disabledIndicesRef.current) : getMaxIndex(listRef, disabledIndicesRef.current);\r\n              keyRef.current = null;\r\n              onNavigate(indexRef.current);\r\n            }\r\n          };\r\n          waitForListPopulated();\r\n        }\r\n      } else if (!isIndexOutOfBounds(listRef, activeIndex)) {\r\n        indexRef.current = activeIndex;\r\n        focusItem(listRef, indexRef, forceScrollIntoViewRef.current);\r\n        forceScrollIntoViewRef.current = false;\r\n      }\r\n    }\r\n  }, [enabled, open, floating, activeIndex, selectedIndex, nested, listRef, orientation, rtl, onNavigate, focusItem, disabledIndicesRef]);\r\n\r\n  // Ensure the parent floating element has focus when a nested child closes\r\n  // to allow arrow key navigation to work after the pointer leaves the child.\r\n  index(() => {\r\n    var _nodes$find;\r\n    if (!enabled || floating || !tree || virtual || !previousMountedRef.current) {\r\n      return;\r\n    }\r\n    const nodes = tree.nodesRef.current;\r\n    const parent = (_nodes$find = nodes.find(node => node.id === parentId)) == null || (_nodes$find = _nodes$find.context) == null ? void 0 : _nodes$find.elements.floating;\r\n    const activeEl = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.activeElement)((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getDocument)(floating));\r\n    const treeContainsActiveEl = nodes.some(node => node.context && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(node.context.elements.floating, activeEl));\r\n    if (parent && !treeContainsActiveEl && isPointerModalityRef.current) {\r\n      parent.focus({\r\n        preventScroll: true\r\n      });\r\n    }\r\n  }, [enabled, floating, tree, parentId, virtual]);\r\n  index(() => {\r\n    if (!enabled || !tree || !virtual || parentId) return;\r\n    function handleVirtualFocus(item) {\r\n      setVirtualId(item.id);\r\n      if (virtualItemRef) {\r\n        virtualItemRef.current = item;\r\n      }\r\n    }\r\n    tree.events.on('virtualfocus', handleVirtualFocus);\r\n    return () => {\r\n      tree.events.off('virtualfocus', handleVirtualFocus);\r\n    };\r\n  }, [enabled, tree, virtual, parentId, virtualItemRef]);\r\n  index(() => {\r\n    previousOnNavigateRef.current = onNavigate;\r\n    previousMountedRef.current = !!floating;\r\n  });\r\n  index(() => {\r\n    if (!open) {\r\n      keyRef.current = null;\r\n    }\r\n  }, [open]);\r\n  const hasActiveIndex = activeIndex != null;\r\n  const item = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n    function syncCurrentTarget(currentTarget) {\r\n      if (!open) return;\r\n      const index = listRef.current.indexOf(currentTarget);\r\n      if (index !== -1) {\r\n        onNavigate(index);\r\n      }\r\n    }\r\n    const props = {\r\n      onFocus(_ref) {\r\n        let {\r\n          currentTarget\r\n        } = _ref;\r\n        syncCurrentTarget(currentTarget);\r\n      },\r\n      onClick: _ref2 => {\r\n        let {\r\n          currentTarget\r\n        } = _ref2;\r\n        return currentTarget.focus({\r\n          preventScroll: true\r\n        });\r\n      },\r\n      // Safari\r\n      ...(focusItemOnHover && {\r\n        onMouseMove(_ref3) {\r\n          let {\r\n            currentTarget\r\n          } = _ref3;\r\n          syncCurrentTarget(currentTarget);\r\n        },\r\n        onPointerLeave(_ref4) {\r\n          let {\r\n            pointerType\r\n          } = _ref4;\r\n          if (!isPointerModalityRef.current || pointerType === 'touch') {\r\n            return;\r\n          }\r\n          indexRef.current = -1;\r\n          focusItem(listRef, indexRef);\r\n          onNavigate(null);\r\n          if (!virtual) {\r\n            enqueueFocus(refs.floating.current, {\r\n              preventScroll: true\r\n            });\r\n          }\r\n        }\r\n      })\r\n    };\r\n    return props;\r\n  }, [open, refs, focusItem, focusItemOnHover, listRef, onNavigate, virtual]);\r\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n    if (!enabled) {\r\n      return {};\r\n    }\r\n    const disabledIndices = disabledIndicesRef.current;\r\n    function onKeyDown(event) {\r\n      isPointerModalityRef.current = false;\r\n      forceSyncFocus.current = true;\r\n\r\n      // If the floating element is animating out, ignore navigation. Otherwise,\r\n      // the `activeIndex` gets set to 0 despite not being open so the next time\r\n      // the user ArrowDowns, the first item won't be focused.\r\n      if (!latestOpenRef.current && event.currentTarget === refs.floating.current) {\r\n        return;\r\n      }\r\n      if (nested && isCrossOrientationCloseKey(event.key, orientation, rtl)) {\r\n        (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\r\n        onOpenChange(false, event.nativeEvent, 'list-navigation');\r\n        if ((0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.isHTMLElement)(domReference) && !virtual) {\r\n          domReference.focus();\r\n        }\r\n        return;\r\n      }\r\n      const currentIndex = indexRef.current;\r\n      const minIndex = getMinIndex(listRef, disabledIndices);\r\n      const maxIndex = getMaxIndex(listRef, disabledIndices);\r\n      if (event.key === 'Home') {\r\n        (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\r\n        indexRef.current = minIndex;\r\n        onNavigate(indexRef.current);\r\n      }\r\n      if (event.key === 'End') {\r\n        (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\r\n        indexRef.current = maxIndex;\r\n        onNavigate(indexRef.current);\r\n      }\r\n\r\n      // Grid navigation.\r\n      if (cols > 1) {\r\n        const sizes = itemSizes || Array.from({\r\n          length: listRef.current.length\r\n        }, () => ({\r\n          width: 1,\r\n          height: 1\r\n        }));\r\n        // To calculate movements on the grid, we use hypothetical cell indices\r\n        // as if every item was 1x1, then convert back to real indices.\r\n        const cellMap = buildCellMap(sizes, cols, dense);\r\n        const minGridIndex = cellMap.findIndex(index => index != null && !(disabledIndices != null && disabledIndices.includes(index)));\r\n        // last enabled index\r\n        const maxGridIndex = cellMap.reduce((foundIndex, index, cellIndex) => index != null && !(disabledIndices != null && disabledIndices.includes(index)) ? cellIndex : foundIndex, -1);\r\n        indexRef.current = cellMap[getGridNavigatedIndex({\r\n          current: cellMap.map(itemIndex => itemIndex != null ? listRef.current[itemIndex] : null)\r\n        }, {\r\n          event,\r\n          orientation,\r\n          loop,\r\n          cols,\r\n          // treat undefined (empty grid spaces) as disabled indices so we\r\n          // don't end up in them\r\n          disabledIndices: getCellIndices([...(disabledIndices || []), undefined], cellMap),\r\n          minIndex: minGridIndex,\r\n          maxIndex: maxGridIndex,\r\n          prevIndex: getCellIndexOfCorner(indexRef.current, sizes, cellMap, cols,\r\n          // use a corner matching the edge closest to the direction\r\n          // we're moving in so we don't end up in the same item. Prefer\r\n          // top/left over bottom/right.\r\n          event.key === ARROW_DOWN ? 'bl' : event.key === ARROW_RIGHT ? 'tr' : 'tl'),\r\n          stopEvent: true\r\n        })]; // navigated cell will never be nullish\r\n\r\n        onNavigate(indexRef.current);\r\n        if (orientation === 'both') {\r\n          return;\r\n        }\r\n      }\r\n      if (isMainOrientationKey(event.key, orientation)) {\r\n        (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\r\n\r\n        // Reset the index if no item is focused.\r\n        if (open && !virtual && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.activeElement)(event.currentTarget.ownerDocument) === event.currentTarget) {\r\n          indexRef.current = isMainOrientationToEndKey(event.key, orientation, rtl) ? minIndex : maxIndex;\r\n          onNavigate(indexRef.current);\r\n          return;\r\n        }\r\n        if (isMainOrientationToEndKey(event.key, orientation, rtl)) {\r\n          if (loop) {\r\n            indexRef.current = currentIndex >= maxIndex ? allowEscape && currentIndex !== listRef.current.length ? -1 : minIndex : findNonDisabledIndex(listRef, {\r\n              startingIndex: currentIndex,\r\n              disabledIndices\r\n            });\r\n          } else {\r\n            indexRef.current = Math.min(maxIndex, findNonDisabledIndex(listRef, {\r\n              startingIndex: currentIndex,\r\n              disabledIndices\r\n            }));\r\n          }\r\n        } else {\r\n          if (loop) {\r\n            indexRef.current = currentIndex <= minIndex ? allowEscape && currentIndex !== -1 ? listRef.current.length : maxIndex : findNonDisabledIndex(listRef, {\r\n              startingIndex: currentIndex,\r\n              decrement: true,\r\n              disabledIndices\r\n            });\r\n          } else {\r\n            indexRef.current = Math.max(minIndex, findNonDisabledIndex(listRef, {\r\n              startingIndex: currentIndex,\r\n              decrement: true,\r\n              disabledIndices\r\n            }));\r\n          }\r\n        }\r\n        if (isIndexOutOfBounds(listRef, indexRef.current)) {\r\n          onNavigate(null);\r\n        } else {\r\n          onNavigate(indexRef.current);\r\n        }\r\n      }\r\n    }\r\n    function checkVirtualMouse(event) {\r\n      if (focusItemOnOpen === 'auto' && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isVirtualClick)(event.nativeEvent)) {\r\n        focusItemOnOpenRef.current = true;\r\n      }\r\n    }\r\n    function checkVirtualPointer(event) {\r\n      // `pointerdown` fires first, reset the state then perform the checks.\r\n      focusItemOnOpenRef.current = focusItemOnOpen;\r\n      if (focusItemOnOpen === 'auto' && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isVirtualPointerEvent)(event.nativeEvent)) {\r\n        focusItemOnOpenRef.current = true;\r\n      }\r\n    }\r\n    const ariaActiveDescendantProp = virtual && open && hasActiveIndex && {\r\n      'aria-activedescendant': virtualId || activeId\r\n    };\r\n    const activeItem = listRef.current.find(item => (item == null ? void 0 : item.id) === activeId);\r\n    return {\r\n      reference: {\r\n        ...ariaActiveDescendantProp,\r\n        onKeyDown(event) {\r\n          isPointerModalityRef.current = false;\r\n          const isArrowKey = event.key.indexOf('Arrow') === 0;\r\n          const isCrossOpenKey = isCrossOrientationOpenKey(event.key, orientation, rtl);\r\n          const isCrossCloseKey = isCrossOrientationCloseKey(event.key, orientation, rtl);\r\n          const isMainKey = isMainOrientationKey(event.key, orientation);\r\n          const isNavigationKey = (nested ? isCrossOpenKey : isMainKey) || event.key === 'Enter' || event.key.trim() === '';\r\n          if (virtual && open) {\r\n            const rootNode = tree == null ? void 0 : tree.nodesRef.current.find(node => node.parentId == null);\r\n            const deepestNode = tree && rootNode ? getDeepestNode(tree.nodesRef.current, rootNode.id) : null;\r\n            if (isArrowKey && deepestNode && virtualItemRef) {\r\n              const eventObject = new KeyboardEvent('keydown', {\r\n                key: event.key,\r\n                bubbles: true\r\n              });\r\n              if (isCrossOpenKey || isCrossCloseKey) {\r\n                var _deepestNode$context, _deepestNode$context2;\r\n                const isCurrentTarget = ((_deepestNode$context = deepestNode.context) == null ? void 0 : _deepestNode$context.elements.domReference) === event.currentTarget;\r\n                const dispatchItem = isCrossCloseKey && !isCurrentTarget ? (_deepestNode$context2 = deepestNode.context) == null ? void 0 : _deepestNode$context2.elements.domReference : isCrossOpenKey ? activeItem : null;\r\n                if (dispatchItem) {\r\n                  (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\r\n                  dispatchItem.dispatchEvent(eventObject);\r\n                  setVirtualId(undefined);\r\n                }\r\n              }\r\n              if (isMainKey && deepestNode.context) {\r\n                if (deepestNode.context.open && deepestNode.parentId && event.currentTarget !== deepestNode.context.elements.domReference) {\r\n                  var _deepestNode$context$;\r\n                  (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\r\n                  (_deepestNode$context$ = deepestNode.context.elements.domReference) == null || _deepestNode$context$.dispatchEvent(eventObject);\r\n                  return;\r\n                }\r\n              }\r\n            }\r\n            return onKeyDown(event);\r\n          }\r\n\r\n          // If a floating element should not open on arrow key down, avoid\r\n          // setting `activeIndex` while it's closed.\r\n          if (!open && !openOnArrowKeyDown && isArrowKey) {\r\n            return;\r\n          }\r\n          if (isNavigationKey) {\r\n            keyRef.current = nested && isMainKey ? null : event.key;\r\n          }\r\n          if (nested) {\r\n            if (isCrossOpenKey) {\r\n              (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\r\n              if (open) {\r\n                indexRef.current = getMinIndex(listRef, disabledIndices);\r\n                onNavigate(indexRef.current);\r\n              } else {\r\n                onOpenChange(true, event.nativeEvent, 'list-navigation');\r\n              }\r\n            }\r\n            return;\r\n          }\r\n          if (isMainKey) {\r\n            if (selectedIndex != null) {\r\n              indexRef.current = selectedIndex;\r\n            }\r\n            (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\r\n            if (!open && openOnArrowKeyDown) {\r\n              onOpenChange(true, event.nativeEvent, 'list-navigation');\r\n            } else {\r\n              onKeyDown(event);\r\n            }\r\n            if (open) {\r\n              onNavigate(indexRef.current);\r\n            }\r\n          }\r\n        },\r\n        onFocus() {\r\n          if (open) {\r\n            onNavigate(null);\r\n          }\r\n        },\r\n        onPointerDown: checkVirtualPointer,\r\n        onMouseDown: checkVirtualMouse,\r\n        onClick: checkVirtualMouse\r\n      },\r\n      floating: {\r\n        'aria-orientation': orientation === 'both' ? undefined : orientation,\r\n        ...(!(0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.isTypeableCombobox)(domReference) && ariaActiveDescendantProp),\r\n        onKeyDown,\r\n        onPointerMove() {\r\n          isPointerModalityRef.current = true;\r\n        }\r\n      },\r\n      item\r\n    };\r\n  }, [domReference, refs, activeId, virtualId, disabledIndicesRef, latestOpenRef, listRef, enabled, orientation, rtl, virtual, open, hasActiveIndex, nested, selectedIndex, openOnArrowKeyDown, allowEscape, cols, loop, focusItemOnOpen, onNavigate, onOpenChange, item, tree, virtualItemRef, itemSizes, dense]);\r\n}\r\n\r\nconst componentRoleToAriaRoleMap = /*#__PURE__*/new Map([['select', 'listbox'], ['combobox', 'listbox'], ['label', false]]);\r\n\r\n/**\r\n * Adds base screen reader props to the reference and floating elements for a\r\n * given floating element `role`.\r\n * @see https://floating-ui.com/docs/useRole\r\n */\r\nfunction useRole(context, props) {\r\n  var _componentRoleToAriaR;\r\n  if (props === void 0) {\r\n    props = {};\r\n  }\r\n  const {\r\n    open,\r\n    floatingId\r\n  } = context;\r\n  const {\r\n    enabled = true,\r\n    role = 'dialog'\r\n  } = props;\r\n  const ariaRole = (_componentRoleToAriaR = componentRoleToAriaRoleMap.get(role)) != null ? _componentRoleToAriaR : role;\r\n  const referenceId = useId();\r\n  const parentId = useFloatingParentNodeId();\r\n  const isNested = parentId != null;\r\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n    if (!enabled) return {};\r\n    const floatingProps = {\r\n      id: floatingId,\r\n      ...(ariaRole && {\r\n        role: ariaRole\r\n      })\r\n    };\r\n    if (ariaRole === 'tooltip' || role === 'label') {\r\n      return {\r\n        reference: {\r\n          [\"aria-\" + (role === 'label' ? 'labelledby' : 'describedby')]: open ? floatingId : undefined\r\n        },\r\n        floating: floatingProps\r\n      };\r\n    }\r\n    return {\r\n      reference: {\r\n        'aria-expanded': open ? 'true' : 'false',\r\n        'aria-haspopup': ariaRole === 'alertdialog' ? 'dialog' : ariaRole,\r\n        'aria-controls': open ? floatingId : undefined,\r\n        ...(ariaRole === 'listbox' && {\r\n          role: 'combobox'\r\n        }),\r\n        ...(ariaRole === 'menu' && {\r\n          id: referenceId\r\n        }),\r\n        ...(ariaRole === 'menu' && isNested && {\r\n          role: 'menuitem'\r\n        }),\r\n        ...(role === 'select' && {\r\n          'aria-autocomplete': 'none'\r\n        }),\r\n        ...(role === 'combobox' && {\r\n          'aria-autocomplete': 'list'\r\n        })\r\n      },\r\n      floating: {\r\n        ...floatingProps,\r\n        ...(ariaRole === 'menu' && {\r\n          'aria-labelledby': referenceId\r\n        })\r\n      },\r\n      item(_ref) {\r\n        let {\r\n          active,\r\n          selected\r\n        } = _ref;\r\n        const commonProps = {\r\n          role: 'option',\r\n          ...(active && {\r\n            id: floatingId + \"-option\"\r\n          })\r\n        };\r\n\r\n        // For `menu`, we are unable to tell if the item is a `menuitemradio`\r\n        // or `menuitemcheckbox`. For backwards-compatibility reasons, also\r\n        // avoid defaulting to `menuitem` as it may overwrite custom role props.\r\n        switch (role) {\r\n          case 'select':\r\n            return {\r\n              ...commonProps,\r\n              'aria-selected': active && selected\r\n            };\r\n          case 'combobox':\r\n            {\r\n              return {\r\n                ...commonProps,\r\n                ...(active && {\r\n                  'aria-selected': true\r\n                })\r\n              };\r\n            }\r\n        }\r\n        return {};\r\n      }\r\n    };\r\n  }, [enabled, role, ariaRole, open, floatingId, referenceId, isNested]);\r\n}\r\n\r\n// Converts a JS style key like `backgroundColor` to a CSS transition-property\r\n// like `background-color`.\r\nconst camelCaseToKebabCase = str => str.replace(/[A-Z]+(?![a-z])|[A-Z]/g, ($, ofs) => (ofs ? '-' : '') + $.toLowerCase());\r\nfunction execWithArgsOrReturn(valueOrFn, args) {\r\n  return typeof valueOrFn === 'function' ? valueOrFn(args) : valueOrFn;\r\n}\r\nfunction useDelayUnmount(open, durationMs) {\r\n  const [isMounted, setIsMounted] = react__WEBPACK_IMPORTED_MODULE_0__.useState(open);\r\n  if (open && !isMounted) {\r\n    setIsMounted(true);\r\n  }\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    if (!open) {\r\n      const timeout = setTimeout(() => setIsMounted(false), durationMs);\r\n      return () => clearTimeout(timeout);\r\n    }\r\n  }, [open, durationMs]);\r\n  return isMounted;\r\n}\r\n/**\r\n * Provides a status string to apply CSS transitions to a floating element,\r\n * correctly handling placement-aware transitions.\r\n * @see https://floating-ui.com/docs/useTransition#usetransitionstatus\r\n */\r\nfunction useTransitionStatus(context, props) {\r\n  if (props === void 0) {\r\n    props = {};\r\n  }\r\n  const {\r\n    open,\r\n    elements: {\r\n      floating\r\n    }\r\n  } = context;\r\n  const {\r\n    duration = 250\r\n  } = props;\r\n  const isNumberDuration = typeof duration === 'number';\r\n  const closeDuration = (isNumberDuration ? duration : duration.close) || 0;\r\n  const [initiated, setInitiated] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\r\n  const [status, setStatus] = react__WEBPACK_IMPORTED_MODULE_0__.useState('unmounted');\r\n  const isMounted = useDelayUnmount(open, closeDuration);\r\n\r\n  // `initiated` check prevents this `setState` call from breaking\r\n  // <FloatingPortal />. This call is necessary to ensure subsequent opens\r\n  // after the initial one allows the correct side animation to play when the\r\n  // placement has changed.\r\n  index(() => {\r\n    if (initiated && !isMounted) {\r\n      setStatus('unmounted');\r\n    }\r\n  }, [initiated, isMounted]);\r\n  index(() => {\r\n    if (!floating) return;\r\n    if (open) {\r\n      setStatus('initial');\r\n      const frame = requestAnimationFrame(() => {\r\n        setStatus('open');\r\n      });\r\n      return () => {\r\n        cancelAnimationFrame(frame);\r\n      };\r\n    }\r\n    setInitiated(true);\r\n    setStatus('close');\r\n  }, [open, floating]);\r\n  return {\r\n    isMounted,\r\n    status\r\n  };\r\n}\r\n/**\r\n * Provides styles to apply CSS transitions to a floating element, correctly\r\n * handling placement-aware transitions. Wrapper around `useTransitionStatus`.\r\n * @see https://floating-ui.com/docs/useTransition#usetransitionstyles\r\n */\r\nfunction useTransitionStyles(context, props) {\r\n  if (props === void 0) {\r\n    props = {};\r\n  }\r\n  const {\r\n    initial: unstable_initial = {\r\n      opacity: 0\r\n    },\r\n    open: unstable_open,\r\n    close: unstable_close,\r\n    common: unstable_common,\r\n    duration = 250\r\n  } = props;\r\n  const placement = context.placement;\r\n  const side = placement.split('-')[0];\r\n  const fnArgs = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => ({\r\n    side,\r\n    placement\r\n  }), [side, placement]);\r\n  const isNumberDuration = typeof duration === 'number';\r\n  const openDuration = (isNumberDuration ? duration : duration.open) || 0;\r\n  const closeDuration = (isNumberDuration ? duration : duration.close) || 0;\r\n  const [styles, setStyles] = react__WEBPACK_IMPORTED_MODULE_0__.useState(() => ({\r\n    ...execWithArgsOrReturn(unstable_common, fnArgs),\r\n    ...execWithArgsOrReturn(unstable_initial, fnArgs)\r\n  }));\r\n  const {\r\n    isMounted,\r\n    status\r\n  } = useTransitionStatus(context, {\r\n    duration\r\n  });\r\n  const initialRef = useLatestRef(unstable_initial);\r\n  const openRef = useLatestRef(unstable_open);\r\n  const closeRef = useLatestRef(unstable_close);\r\n  const commonRef = useLatestRef(unstable_common);\r\n  index(() => {\r\n    const initialStyles = execWithArgsOrReturn(initialRef.current, fnArgs);\r\n    const closeStyles = execWithArgsOrReturn(closeRef.current, fnArgs);\r\n    const commonStyles = execWithArgsOrReturn(commonRef.current, fnArgs);\r\n    const openStyles = execWithArgsOrReturn(openRef.current, fnArgs) || Object.keys(initialStyles).reduce((acc, key) => {\r\n      acc[key] = '';\r\n      return acc;\r\n    }, {});\r\n    if (status === 'initial') {\r\n      setStyles(styles => ({\r\n        transitionProperty: styles.transitionProperty,\r\n        ...commonStyles,\r\n        ...initialStyles\r\n      }));\r\n    }\r\n    if (status === 'open') {\r\n      setStyles({\r\n        transitionProperty: Object.keys(openStyles).map(camelCaseToKebabCase).join(','),\r\n        transitionDuration: openDuration + \"ms\",\r\n        ...commonStyles,\r\n        ...openStyles\r\n      });\r\n    }\r\n    if (status === 'close') {\r\n      const styles = closeStyles || initialStyles;\r\n      setStyles({\r\n        transitionProperty: Object.keys(styles).map(camelCaseToKebabCase).join(','),\r\n        transitionDuration: closeDuration + \"ms\",\r\n        ...commonStyles,\r\n        ...styles\r\n      });\r\n    }\r\n  }, [closeDuration, closeRef, initialRef, openRef, commonRef, openDuration, status, fnArgs]);\r\n  return {\r\n    isMounted,\r\n    styles\r\n  };\r\n}\r\n\r\n/**\r\n * Provides a matching callback that can be used to focus an item as the user\r\n * types, often used in tandem with `useListNavigation()`.\r\n * @see https://floating-ui.com/docs/useTypeahead\r\n */\r\nfunction useTypeahead(context, props) {\r\n  var _ref;\r\n  const {\r\n    open,\r\n    dataRef\r\n  } = context;\r\n  const {\r\n    listRef,\r\n    activeIndex,\r\n    onMatch: unstable_onMatch,\r\n    onTypingChange: unstable_onTypingChange,\r\n    enabled = true,\r\n    findMatch = null,\r\n    resetMs = 750,\r\n    ignoreKeys = [],\r\n    selectedIndex = null\r\n  } = props;\r\n  const timeoutIdRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\r\n  const stringRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef('');\r\n  const prevIndexRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef((_ref = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref : -1);\r\n  const matchIndexRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n  const onMatch = useEffectEvent(unstable_onMatch);\r\n  const onTypingChange = useEffectEvent(unstable_onTypingChange);\r\n  const findMatchRef = useLatestRef(findMatch);\r\n  const ignoreKeysRef = useLatestRef(ignoreKeys);\r\n  index(() => {\r\n    if (open) {\r\n      clearTimeout(timeoutIdRef.current);\r\n      matchIndexRef.current = null;\r\n      stringRef.current = '';\r\n    }\r\n  }, [open]);\r\n  index(() => {\r\n    // Sync arrow key navigation but not typeahead navigation.\r\n    if (open && stringRef.current === '') {\r\n      var _ref2;\r\n      prevIndexRef.current = (_ref2 = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref2 : -1;\r\n    }\r\n  }, [open, selectedIndex, activeIndex]);\r\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n    if (!enabled) {\r\n      return {};\r\n    }\r\n    function setTypingChange(value) {\r\n      if (value) {\r\n        if (!dataRef.current.typing) {\r\n          dataRef.current.typing = value;\r\n          onTypingChange(value);\r\n        }\r\n      } else {\r\n        if (dataRef.current.typing) {\r\n          dataRef.current.typing = value;\r\n          onTypingChange(value);\r\n        }\r\n      }\r\n    }\r\n    function getMatchingIndex(list, orderedList, string) {\r\n      const str = findMatchRef.current ? findMatchRef.current(orderedList, string) : orderedList.find(text => (text == null ? void 0 : text.toLocaleLowerCase().indexOf(string.toLocaleLowerCase())) === 0);\r\n      return str ? list.indexOf(str) : -1;\r\n    }\r\n    function onKeyDown(event) {\r\n      const listContent = listRef.current;\r\n      if (stringRef.current.length > 0 && stringRef.current[0] !== ' ') {\r\n        if (getMatchingIndex(listContent, listContent, stringRef.current) === -1) {\r\n          setTypingChange(false);\r\n        } else if (event.key === ' ') {\r\n          (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\r\n        }\r\n      }\r\n      if (listContent == null || ignoreKeysRef.current.includes(event.key) ||\r\n      // Character key.\r\n      event.key.length !== 1 ||\r\n      // Modifier key.\r\n      event.ctrlKey || event.metaKey || event.altKey) {\r\n        return;\r\n      }\r\n      if (open && event.key !== ' ') {\r\n        (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.stopEvent)(event);\r\n        setTypingChange(true);\r\n      }\r\n\r\n      // Bail out if the list contains a word like \"llama\" or \"aaron\". TODO:\r\n      // allow it in this case, too.\r\n      const allowRapidSuccessionOfFirstLetter = listContent.every(text => {\r\n        var _text$, _text$2;\r\n        return text ? ((_text$ = text[0]) == null ? void 0 : _text$.toLocaleLowerCase()) !== ((_text$2 = text[1]) == null ? void 0 : _text$2.toLocaleLowerCase()) : true;\r\n      });\r\n\r\n      // Allows the user to cycle through items that start with the same letter\r\n      // in rapid succession.\r\n      if (allowRapidSuccessionOfFirstLetter && stringRef.current === event.key) {\r\n        stringRef.current = '';\r\n        prevIndexRef.current = matchIndexRef.current;\r\n      }\r\n      stringRef.current += event.key;\r\n      clearTimeout(timeoutIdRef.current);\r\n      timeoutIdRef.current = setTimeout(() => {\r\n        stringRef.current = '';\r\n        prevIndexRef.current = matchIndexRef.current;\r\n        setTypingChange(false);\r\n      }, resetMs);\r\n      const prevIndex = prevIndexRef.current;\r\n      const index = getMatchingIndex(listContent, [...listContent.slice((prevIndex || 0) + 1), ...listContent.slice(0, (prevIndex || 0) + 1)], stringRef.current);\r\n      if (index !== -1) {\r\n        onMatch(index);\r\n        matchIndexRef.current = index;\r\n      } else if (event.key !== ' ') {\r\n        stringRef.current = '';\r\n        setTypingChange(false);\r\n      }\r\n    }\r\n    return {\r\n      reference: {\r\n        onKeyDown\r\n      },\r\n      floating: {\r\n        onKeyDown,\r\n        onKeyUp(event) {\r\n          if (event.key === ' ') {\r\n            setTypingChange(false);\r\n          }\r\n        }\r\n      }\r\n    };\r\n  }, [enabled, open, dataRef, listRef, resetMs, ignoreKeysRef, findMatchRef, onMatch, onTypingChange]);\r\n}\r\n\r\nfunction getArgsWithCustomFloatingHeight(state, height) {\r\n  return {\r\n    ...state,\r\n    rects: {\r\n      ...state.rects,\r\n      floating: {\r\n        ...state.rects.floating,\r\n        height\r\n      }\r\n    }\r\n  };\r\n}\r\n/**\r\n * Positions the floating element such that an inner element inside\r\n * of it is anchored to the reference element.\r\n * @see https://floating-ui.com/docs/inner\r\n */\r\nconst inner = props => ({\r\n  name: 'inner',\r\n  options: props,\r\n  async fn(state) {\r\n    const {\r\n      listRef,\r\n      overflowRef,\r\n      onFallbackChange,\r\n      offset: innerOffset = 0,\r\n      index = 0,\r\n      minItemsVisible = 4,\r\n      referenceOverflowThreshold = 0,\r\n      scrollRef,\r\n      ...detectOverflowOptions\r\n    } = props;\r\n    const {\r\n      rects,\r\n      elements: {\r\n        floating\r\n      }\r\n    } = state;\r\n    const item = listRef.current[index];\r\n    if (true) {\r\n      if (!state.placement.startsWith('bottom')) {\r\n        warn('`placement` side must be \"bottom\" when using the `inner`', 'middleware.');\r\n      }\r\n    }\r\n    if (!item) {\r\n      return {};\r\n    }\r\n    const nextArgs = {\r\n      ...state,\r\n      ...(await (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.offset)(-item.offsetTop - floating.clientTop - rects.reference.height / 2 - item.offsetHeight / 2 - innerOffset).fn(state))\r\n    };\r\n    const el = (scrollRef == null ? void 0 : scrollRef.current) || floating;\r\n    const overflow = await (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.detectOverflow)(getArgsWithCustomFloatingHeight(nextArgs, el.scrollHeight), detectOverflowOptions);\r\n    const refOverflow = await (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.detectOverflow)(nextArgs, {\r\n      ...detectOverflowOptions,\r\n      elementContext: 'reference'\r\n    });\r\n    const diffY = Math.max(0, overflow.top);\r\n    const nextY = nextArgs.y + diffY;\r\n    const maxHeight = Math.max(0, el.scrollHeight - diffY - Math.max(0, overflow.bottom));\r\n    el.style.maxHeight = maxHeight + \"px\";\r\n    el.scrollTop = diffY;\r\n\r\n    // There is not enough space, fallback to standard anchored positioning\r\n    if (onFallbackChange) {\r\n      if (el.offsetHeight < item.offsetHeight * Math.min(minItemsVisible, listRef.current.length - 1) - 1 || refOverflow.top >= -referenceOverflowThreshold || refOverflow.bottom >= -referenceOverflowThreshold) {\r\n        (0,react_dom__WEBPACK_IMPORTED_MODULE_4__.flushSync)(() => onFallbackChange(true));\r\n      } else {\r\n        (0,react_dom__WEBPACK_IMPORTED_MODULE_4__.flushSync)(() => onFallbackChange(false));\r\n      }\r\n    }\r\n    if (overflowRef) {\r\n      overflowRef.current = await (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_2__.detectOverflow)(getArgsWithCustomFloatingHeight({\r\n        ...nextArgs,\r\n        y: nextY\r\n      }, el.offsetHeight), detectOverflowOptions);\r\n    }\r\n    return {\r\n      y: nextY\r\n    };\r\n  }\r\n});\r\n/**\r\n * Changes the `inner` middleware's `offset` upon a `wheel` event to\r\n * expand the floating element's height, revealing more list items.\r\n * @see https://floating-ui.com/docs/inner\r\n */\r\nfunction useInnerOffset(context, props) {\r\n  const {\r\n    open,\r\n    elements\r\n  } = context;\r\n  const {\r\n    enabled = true,\r\n    overflowRef,\r\n    scrollRef,\r\n    onChange: unstable_onChange\r\n  } = props;\r\n  const onChange = useEffectEvent(unstable_onChange);\r\n  const controlledScrollingRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\r\n  const prevScrollTopRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n  const initialOverflowRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n    if (!enabled) {\r\n      return;\r\n    }\r\n    function onWheel(e) {\r\n      if (e.ctrlKey || !el || overflowRef.current == null) {\r\n        return;\r\n      }\r\n      const dY = e.deltaY;\r\n      const isAtTop = overflowRef.current.top >= -0.5;\r\n      const isAtBottom = overflowRef.current.bottom >= -0.5;\r\n      const remainingScroll = el.scrollHeight - el.clientHeight;\r\n      const sign = dY < 0 ? -1 : 1;\r\n      const method = dY < 0 ? 'max' : 'min';\r\n      if (el.scrollHeight <= el.clientHeight) {\r\n        return;\r\n      }\r\n      if (!isAtTop && dY > 0 || !isAtBottom && dY < 0) {\r\n        e.preventDefault();\r\n        (0,react_dom__WEBPACK_IMPORTED_MODULE_4__.flushSync)(() => {\r\n          onChange(d => d + Math[method](dY, remainingScroll * sign));\r\n        });\r\n      } else if (/firefox/i.test((0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getUserAgent)())) {\r\n        // Needed to propagate scrolling during momentum scrolling phase once\r\n        // it gets limited by the boundary. UX improvement, not critical.\r\n        el.scrollTop += dY;\r\n      }\r\n    }\r\n    const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;\r\n    if (open && el) {\r\n      el.addEventListener('wheel', onWheel);\r\n\r\n      // Wait for the position to be ready.\r\n      requestAnimationFrame(() => {\r\n        prevScrollTopRef.current = el.scrollTop;\r\n        if (overflowRef.current != null) {\r\n          initialOverflowRef.current = {\r\n            ...overflowRef.current\r\n          };\r\n        }\r\n      });\r\n      return () => {\r\n        prevScrollTopRef.current = null;\r\n        initialOverflowRef.current = null;\r\n        el.removeEventListener('wheel', onWheel);\r\n      };\r\n    }\r\n  }, [enabled, open, elements.floating, overflowRef, scrollRef, onChange]);\r\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n    if (!enabled) {\r\n      return {};\r\n    }\r\n    return {\r\n      floating: {\r\n        onKeyDown() {\r\n          controlledScrollingRef.current = true;\r\n        },\r\n        onWheel() {\r\n          controlledScrollingRef.current = false;\r\n        },\r\n        onPointerMove() {\r\n          controlledScrollingRef.current = false;\r\n        },\r\n        onScroll() {\r\n          const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;\r\n          if (!overflowRef.current || !el || !controlledScrollingRef.current) {\r\n            return;\r\n          }\r\n          if (prevScrollTopRef.current !== null) {\r\n            const scrollDiff = el.scrollTop - prevScrollTopRef.current;\r\n            if (overflowRef.current.bottom < -0.5 && scrollDiff < -1 || overflowRef.current.top < -0.5 && scrollDiff > 1) {\r\n              (0,react_dom__WEBPACK_IMPORTED_MODULE_4__.flushSync)(() => onChange(d => d + scrollDiff));\r\n            }\r\n          }\r\n\r\n          // [Firefox] Wait for the height change to have been applied.\r\n          requestAnimationFrame(() => {\r\n            prevScrollTopRef.current = el.scrollTop;\r\n          });\r\n        }\r\n      }\r\n    };\r\n  }, [enabled, overflowRef, elements.floating, scrollRef, onChange]);\r\n}\r\n\r\nfunction isPointInPolygon(point, polygon) {\r\n  const [x, y] = point;\r\n  let isInside = false;\r\n  const length = polygon.length;\r\n  for (let i = 0, j = length - 1; i < length; j = i++) {\r\n    const [xi, yi] = polygon[i] || [0, 0];\r\n    const [xj, yj] = polygon[j] || [0, 0];\r\n    const intersect = yi >= y !== yj >= y && x <= (xj - xi) * (y - yi) / (yj - yi) + xi;\r\n    if (intersect) {\r\n      isInside = !isInside;\r\n    }\r\n  }\r\n  return isInside;\r\n}\r\nfunction isInside(point, rect) {\r\n  return point[0] >= rect.x && point[0] <= rect.x + rect.width && point[1] >= rect.y && point[1] <= rect.y + rect.height;\r\n}\r\n/**\r\n * Generates a safe polygon area that the user can traverse without closing the\r\n * floating element once leaving the reference element.\r\n * @see https://floating-ui.com/docs/useHover#safepolygon\r\n */\r\nfunction safePolygon(options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  const {\r\n    buffer = 0.5,\r\n    blockPointerEvents = false,\r\n    requireIntent = true\r\n  } = options;\r\n  let timeoutId;\r\n  let hasLanded = false;\r\n  let lastX = null;\r\n  let lastY = null;\r\n  let lastCursorTime = performance.now();\r\n  function getCursorSpeed(x, y) {\r\n    const currentTime = performance.now();\r\n    const elapsedTime = currentTime - lastCursorTime;\r\n    if (lastX === null || lastY === null || elapsedTime === 0) {\r\n      lastX = x;\r\n      lastY = y;\r\n      lastCursorTime = currentTime;\r\n      return null;\r\n    }\r\n    const deltaX = x - lastX;\r\n    const deltaY = y - lastY;\r\n    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\r\n    const speed = distance / elapsedTime; // px / ms\r\n\r\n    lastX = x;\r\n    lastY = y;\r\n    lastCursorTime = currentTime;\r\n    return speed;\r\n  }\r\n  const fn = _ref => {\r\n    let {\r\n      x,\r\n      y,\r\n      placement,\r\n      elements,\r\n      onClose,\r\n      nodeId,\r\n      tree\r\n    } = _ref;\r\n    return function onMouseMove(event) {\r\n      function close() {\r\n        clearTimeout(timeoutId);\r\n        onClose();\r\n      }\r\n      clearTimeout(timeoutId);\r\n      if (!elements.domReference || !elements.floating || placement == null || x == null || y == null) {\r\n        return;\r\n      }\r\n      const {\r\n        clientX,\r\n        clientY\r\n      } = event;\r\n      const clientPoint = [clientX, clientY];\r\n      const target = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.getTarget)(event);\r\n      const isLeave = event.type === 'mouseleave';\r\n      const isOverFloatingEl = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(elements.floating, target);\r\n      const isOverReferenceEl = (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(elements.domReference, target);\r\n      const refRect = elements.domReference.getBoundingClientRect();\r\n      const rect = elements.floating.getBoundingClientRect();\r\n      const side = placement.split('-')[0];\r\n      const cursorLeaveFromRight = x > rect.right - rect.width / 2;\r\n      const cursorLeaveFromBottom = y > rect.bottom - rect.height / 2;\r\n      const isOverReferenceRect = isInside(clientPoint, refRect);\r\n      const isFloatingWider = rect.width > refRect.width;\r\n      const isFloatingTaller = rect.height > refRect.height;\r\n      const left = (isFloatingWider ? refRect : rect).left;\r\n      const right = (isFloatingWider ? refRect : rect).right;\r\n      const top = (isFloatingTaller ? refRect : rect).top;\r\n      const bottom = (isFloatingTaller ? refRect : rect).bottom;\r\n      if (isOverFloatingEl) {\r\n        hasLanded = true;\r\n        if (!isLeave) {\r\n          return;\r\n        }\r\n      }\r\n      if (isOverReferenceEl) {\r\n        hasLanded = false;\r\n      }\r\n      if (isOverReferenceEl && !isLeave) {\r\n        hasLanded = true;\r\n        return;\r\n      }\r\n\r\n      // Prevent overlapping floating element from being stuck in an open-close\r\n      // loop: https://github.com/floating-ui/floating-ui/issues/1910\r\n      if (isLeave && (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_3__.isElement)(event.relatedTarget) && (0,_floating_ui_react_utils__WEBPACK_IMPORTED_MODULE_5__.contains)(elements.floating, event.relatedTarget)) {\r\n        return;\r\n      }\r\n\r\n      // If any nested child is open, abort.\r\n      if (tree && getChildren(tree.nodesRef.current, nodeId).some(_ref2 => {\r\n        let {\r\n          context\r\n        } = _ref2;\r\n        return context == null ? void 0 : context.open;\r\n      })) {\r\n        return;\r\n      }\r\n\r\n      // If the pointer is leaving from the opposite side, the \"buffer\" logic\r\n      // creates a point where the floating element remains open, but should be\r\n      // ignored.\r\n      // A constant of 1 handles floating point rounding errors.\r\n      if (side === 'top' && y >= refRect.bottom - 1 || side === 'bottom' && y <= refRect.top + 1 || side === 'left' && x >= refRect.right - 1 || side === 'right' && x <= refRect.left + 1) {\r\n        return close();\r\n      }\r\n\r\n      // Ignore when the cursor is within the rectangular trough between the\r\n      // two elements. Since the triangle is created from the cursor point,\r\n      // which can start beyond the ref element's edge, traversing back and\r\n      // forth from the ref to the floating element can cause it to close. This\r\n      // ensures it always remains open in that case.\r\n      let rectPoly = [];\r\n      switch (side) {\r\n        case 'top':\r\n          rectPoly = [[left, refRect.top + 1], [left, rect.bottom - 1], [right, rect.bottom - 1], [right, refRect.top + 1]];\r\n          break;\r\n        case 'bottom':\r\n          rectPoly = [[left, rect.top + 1], [left, refRect.bottom - 1], [right, refRect.bottom - 1], [right, rect.top + 1]];\r\n          break;\r\n        case 'left':\r\n          rectPoly = [[rect.right - 1, bottom], [rect.right - 1, top], [refRect.left + 1, top], [refRect.left + 1, bottom]];\r\n          break;\r\n        case 'right':\r\n          rectPoly = [[refRect.right - 1, bottom], [refRect.right - 1, top], [rect.left + 1, top], [rect.left + 1, bottom]];\r\n          break;\r\n      }\r\n      function getPolygon(_ref3) {\r\n        let [x, y] = _ref3;\r\n        switch (side) {\r\n          case 'top':\r\n            {\r\n              const cursorPointOne = [isFloatingWider ? x + buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y + buffer + 1];\r\n              const cursorPointTwo = [isFloatingWider ? x - buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y + buffer + 1];\r\n              const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.bottom - buffer : isFloatingWider ? rect.bottom - buffer : rect.top], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.bottom - buffer : rect.top : rect.bottom - buffer]];\r\n              return [cursorPointOne, cursorPointTwo, ...commonPoints];\r\n            }\r\n          case 'bottom':\r\n            {\r\n              const cursorPointOne = [isFloatingWider ? x + buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y - buffer];\r\n              const cursorPointTwo = [isFloatingWider ? x - buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y - buffer];\r\n              const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.top + buffer : isFloatingWider ? rect.top + buffer : rect.bottom], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.top + buffer : rect.bottom : rect.top + buffer]];\r\n              return [cursorPointOne, cursorPointTwo, ...commonPoints];\r\n            }\r\n          case 'left':\r\n            {\r\n              const cursorPointOne = [x + buffer + 1, isFloatingTaller ? y + buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\r\n              const cursorPointTwo = [x + buffer + 1, isFloatingTaller ? y - buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\r\n              const commonPoints = [[cursorLeaveFromBottom ? rect.right - buffer : isFloatingTaller ? rect.right - buffer : rect.left, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.right - buffer : rect.left : rect.right - buffer, rect.bottom]];\r\n              return [...commonPoints, cursorPointOne, cursorPointTwo];\r\n            }\r\n          case 'right':\r\n            {\r\n              const cursorPointOne = [x - buffer, isFloatingTaller ? y + buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\r\n              const cursorPointTwo = [x - buffer, isFloatingTaller ? y - buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\r\n              const commonPoints = [[cursorLeaveFromBottom ? rect.left + buffer : isFloatingTaller ? rect.left + buffer : rect.right, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.left + buffer : rect.right : rect.left + buffer, rect.bottom]];\r\n              return [cursorPointOne, cursorPointTwo, ...commonPoints];\r\n            }\r\n        }\r\n      }\r\n      if (isPointInPolygon([clientX, clientY], rectPoly)) {\r\n        return;\r\n      }\r\n      if (hasLanded && !isOverReferenceRect) {\r\n        return close();\r\n      }\r\n      if (!isLeave && requireIntent) {\r\n        const cursorSpeed = getCursorSpeed(event.clientX, event.clientY);\r\n        const cursorSpeedThreshold = 0.1;\r\n        if (cursorSpeed !== null && cursorSpeed < cursorSpeedThreshold) {\r\n          return close();\r\n        }\r\n      }\r\n      if (!isPointInPolygon([clientX, clientY], getPolygon([x, y]))) {\r\n        close();\r\n      } else if (!hasLanded && requireIntent) {\r\n        timeoutId = window.setTimeout(close, 40);\r\n      }\r\n    };\r\n  };\r\n  fn.__options = {\r\n    blockPointerEvents\r\n  };\r\n  return fn;\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@floating-ui/react/dist/floating-ui.react.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@floating-ui/react/dist/floating-ui.react.utils.mjs":
/*!***************************************************************************!*\
  !*** ../node_modules/@floating-ui/react/dist/floating-ui.react.utils.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TYPEABLE_SELECTOR: () => (/* binding */ TYPEABLE_SELECTOR),\n/* harmony export */   activeElement: () => (/* binding */ activeElement),\n/* harmony export */   contains: () => (/* binding */ contains),\n/* harmony export */   getDocument: () => (/* binding */ getDocument),\n/* harmony export */   getPlatform: () => (/* binding */ getPlatform),\n/* harmony export */   getTarget: () => (/* binding */ getTarget),\n/* harmony export */   getUserAgent: () => (/* binding */ getUserAgent),\n/* harmony export */   isAndroid: () => (/* binding */ isAndroid),\n/* harmony export */   isEventTargetWithin: () => (/* binding */ isEventTargetWithin),\n/* harmony export */   isJSDOM: () => (/* binding */ isJSDOM),\n/* harmony export */   isMac: () => (/* binding */ isMac),\n/* harmony export */   isMouseLikePointerType: () => (/* binding */ isMouseLikePointerType),\n/* harmony export */   isReactEvent: () => (/* binding */ isReactEvent),\n/* harmony export */   isRootElement: () => (/* binding */ isRootElement),\n/* harmony export */   isSafari: () => (/* binding */ isSafari),\n/* harmony export */   isTypeableCombobox: () => (/* binding */ isTypeableCombobox),\n/* harmony export */   isTypeableElement: () => (/* binding */ isTypeableElement),\n/* harmony export */   isVirtualClick: () => (/* binding */ isVirtualClick),\n/* harmony export */   isVirtualPointerEvent: () => (/* binding */ isVirtualPointerEvent),\n/* harmony export */   stopEvent: () => (/* binding */ stopEvent)\n/* harmony export */ });\n/* harmony import */ var _floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @floating-ui/utils/dom */ \"(ssr)/../node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs\");\n\r\n\r\nfunction activeElement(doc) {\r\n  let activeElement = doc.activeElement;\r\n  while (((_activeElement = activeElement) == null || (_activeElement = _activeElement.shadowRoot) == null ? void 0 : _activeElement.activeElement) != null) {\r\n    var _activeElement;\r\n    activeElement = activeElement.shadowRoot.activeElement;\r\n  }\r\n  return activeElement;\r\n}\r\nfunction contains(parent, child) {\r\n  if (!parent || !child) {\r\n    return false;\r\n  }\r\n  const rootNode = child.getRootNode == null ? void 0 : child.getRootNode();\r\n\r\n  // First, attempt with faster native method\r\n  if (parent.contains(child)) {\r\n    return true;\r\n  }\r\n\r\n  // then fallback to custom implementation with Shadow DOM support\r\n  if (rootNode && (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isShadowRoot)(rootNode)) {\r\n    let next = child;\r\n    while (next) {\r\n      if (parent === next) {\r\n        return true;\r\n      }\r\n      // @ts-ignore\r\n      next = next.parentNode || next.host;\r\n    }\r\n  }\r\n\r\n  // Give up, the result is false\r\n  return false;\r\n}\r\n// Avoid Chrome DevTools blue warning.\r\nfunction getPlatform() {\r\n  const uaData = navigator.userAgentData;\r\n  if (uaData != null && uaData.platform) {\r\n    return uaData.platform;\r\n  }\r\n  return navigator.platform;\r\n}\r\nfunction getUserAgent() {\r\n  const uaData = navigator.userAgentData;\r\n  if (uaData && Array.isArray(uaData.brands)) {\r\n    return uaData.brands.map(_ref => {\r\n      let {\r\n        brand,\r\n        version\r\n      } = _ref;\r\n      return brand + \"/\" + version;\r\n    }).join(' ');\r\n  }\r\n  return navigator.userAgent;\r\n}\r\n\r\n// License: https://github.com/adobe/react-spectrum/blob/b35d5c02fe900badccd0cf1a8f23bb593419f238/packages/@react-aria/utils/src/isVirtualEvent.ts\r\nfunction isVirtualClick(event) {\r\n  // FIXME: Firefox is now emitting a deprecation warning for `mozInputSource`.\r\n  // Try to find a workaround for this. `react-aria` source still has the check.\r\n  if (event.mozInputSource === 0 && event.isTrusted) {\r\n    return true;\r\n  }\r\n  if (isAndroid() && event.pointerType) {\r\n    return event.type === 'click' && event.buttons === 1;\r\n  }\r\n  return event.detail === 0 && !event.pointerType;\r\n}\r\nfunction isVirtualPointerEvent(event) {\r\n  if (isJSDOM()) return false;\r\n  return !isAndroid() && event.width === 0 && event.height === 0 || isAndroid() && event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === 'mouse' ||\r\n  // iOS VoiceOver returns 0.333• for width/height.\r\n  event.width < 1 && event.height < 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === 'touch';\r\n}\r\nfunction isSafari() {\r\n  // Chrome DevTools does not complain about navigator.vendor\r\n  return /apple/i.test(navigator.vendor);\r\n}\r\nfunction isAndroid() {\r\n  const re = /android/i;\r\n  return re.test(getPlatform()) || re.test(getUserAgent());\r\n}\r\nfunction isMac() {\r\n  return getPlatform().toLowerCase().startsWith('mac') && !navigator.maxTouchPoints;\r\n}\r\nfunction isJSDOM() {\r\n  return getUserAgent().includes('jsdom/');\r\n}\r\nfunction isMouseLikePointerType(pointerType, strict) {\r\n  // On some Linux machines with Chromium, mouse inputs return a `pointerType`\r\n  // of \"pen\": https://github.com/floating-ui/floating-ui/issues/2015\r\n  const values = ['mouse', 'pen'];\r\n  if (!strict) {\r\n    values.push('', undefined);\r\n  }\r\n  return values.includes(pointerType);\r\n}\r\nfunction isReactEvent(event) {\r\n  return 'nativeEvent' in event;\r\n}\r\nfunction isRootElement(element) {\r\n  return element.matches('html,body');\r\n}\r\nfunction getDocument(node) {\r\n  return (node == null ? void 0 : node.ownerDocument) || document;\r\n}\r\nfunction isEventTargetWithin(event, node) {\r\n  if (node == null) {\r\n    return false;\r\n  }\r\n  if ('composedPath' in event) {\r\n    return event.composedPath().includes(node);\r\n  }\r\n\r\n  // TS thinks `event` is of type never as it assumes all browsers support composedPath, but browsers without shadow dom don't\r\n  const e = event;\r\n  return e.target != null && node.contains(e.target);\r\n}\r\nfunction getTarget(event) {\r\n  if ('composedPath' in event) {\r\n    return event.composedPath()[0];\r\n  }\r\n\r\n  // TS thinks `event` is of type never as it assumes all browsers support\r\n  // `composedPath()`, but browsers without shadow DOM don't.\r\n  return event.target;\r\n}\r\nconst TYPEABLE_SELECTOR = \"input:not([type='hidden']):not([disabled]),\" + \"[contenteditable]:not([contenteditable='false']),textarea:not([disabled])\";\r\nfunction isTypeableElement(element) {\r\n  return (0,_floating_ui_utils_dom__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) && element.matches(TYPEABLE_SELECTOR);\r\n}\r\nfunction stopEvent(event) {\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n}\r\nfunction isTypeableCombobox(element) {\r\n  if (!element) return false;\r\n  return element.getAttribute('role') === 'combobox' && isTypeableElement(element);\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@floating-ui/react/dist/floating-ui.react.utils.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs":
/*!*************************************************************************!*\
  !*** ../node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getComputedStyle: () => (/* binding */ getComputedStyle),\n/* harmony export */   getContainingBlock: () => (/* binding */ getContainingBlock),\n/* harmony export */   getDocumentElement: () => (/* binding */ getDocumentElement),\n/* harmony export */   getNearestOverflowAncestor: () => (/* binding */ getNearestOverflowAncestor),\n/* harmony export */   getNodeName: () => (/* binding */ getNodeName),\n/* harmony export */   getNodeScroll: () => (/* binding */ getNodeScroll),\n/* harmony export */   getOverflowAncestors: () => (/* binding */ getOverflowAncestors),\n/* harmony export */   getParentNode: () => (/* binding */ getParentNode),\n/* harmony export */   getWindow: () => (/* binding */ getWindow),\n/* harmony export */   isContainingBlock: () => (/* binding */ isContainingBlock),\n/* harmony export */   isElement: () => (/* binding */ isElement),\n/* harmony export */   isHTMLElement: () => (/* binding */ isHTMLElement),\n/* harmony export */   isLastTraversableNode: () => (/* binding */ isLastTraversableNode),\n/* harmony export */   isNode: () => (/* binding */ isNode),\n/* harmony export */   isOverflowElement: () => (/* binding */ isOverflowElement),\n/* harmony export */   isShadowRoot: () => (/* binding */ isShadowRoot),\n/* harmony export */   isTableElement: () => (/* binding */ isTableElement),\n/* harmony export */   isWebKit: () => (/* binding */ isWebKit)\n/* harmony export */ });\nfunction getNodeName(node) {\r\n  if (isNode(node)) {\r\n    return (node.nodeName || '').toLowerCase();\r\n  }\r\n  // Mocked nodes in testing environments may not be instances of Node. By\r\n  // returning `#document` an infinite loop won't occur.\r\n  // https://github.com/floating-ui/floating-ui/issues/2317\r\n  return '#document';\r\n}\r\nfunction getWindow(node) {\r\n  var _node$ownerDocument;\r\n  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\r\n}\r\nfunction getDocumentElement(node) {\r\n  var _ref;\r\n  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;\r\n}\r\nfunction isNode(value) {\r\n  return value instanceof Node || value instanceof getWindow(value).Node;\r\n}\r\nfunction isElement(value) {\r\n  return value instanceof Element || value instanceof getWindow(value).Element;\r\n}\r\nfunction isHTMLElement(value) {\r\n  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;\r\n}\r\nfunction isShadowRoot(value) {\r\n  // Browsers without `ShadowRoot` support.\r\n  if (typeof ShadowRoot === 'undefined') {\r\n    return false;\r\n  }\r\n  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;\r\n}\r\nfunction isOverflowElement(element) {\r\n  const {\r\n    overflow,\r\n    overflowX,\r\n    overflowY,\r\n    display\r\n  } = getComputedStyle(element);\r\n  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);\r\n}\r\nfunction isTableElement(element) {\r\n  return ['table', 'td', 'th'].includes(getNodeName(element));\r\n}\r\nfunction isContainingBlock(element) {\r\n  const webkit = isWebKit();\r\n  const css = getComputedStyle(element);\r\n\r\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\r\n  return css.transform !== 'none' || css.perspective !== 'none' || (css.containerType ? css.containerType !== 'normal' : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !webkit && (css.filter ? css.filter !== 'none' : false) || ['transform', 'perspective', 'filter'].some(value => (css.willChange || '').includes(value)) || ['paint', 'layout', 'strict', 'content'].some(value => (css.contain || '').includes(value));\r\n}\r\nfunction getContainingBlock(element) {\r\n  let currentNode = getParentNode(element);\r\n  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {\r\n    if (isContainingBlock(currentNode)) {\r\n      return currentNode;\r\n    }\r\n    currentNode = getParentNode(currentNode);\r\n  }\r\n  return null;\r\n}\r\nfunction isWebKit() {\r\n  if (typeof CSS === 'undefined' || !CSS.supports) return false;\r\n  return CSS.supports('-webkit-backdrop-filter', 'none');\r\n}\r\nfunction isLastTraversableNode(node) {\r\n  return ['html', 'body', '#document'].includes(getNodeName(node));\r\n}\r\nfunction getComputedStyle(element) {\r\n  return getWindow(element).getComputedStyle(element);\r\n}\r\nfunction getNodeScroll(element) {\r\n  if (isElement(element)) {\r\n    return {\r\n      scrollLeft: element.scrollLeft,\r\n      scrollTop: element.scrollTop\r\n    };\r\n  }\r\n  return {\r\n    scrollLeft: element.pageXOffset,\r\n    scrollTop: element.pageYOffset\r\n  };\r\n}\r\nfunction getParentNode(node) {\r\n  if (getNodeName(node) === 'html') {\r\n    return node;\r\n  }\r\n  const result =\r\n  // Step into the shadow DOM of the parent of a slotted node.\r\n  node.assignedSlot ||\r\n  // DOM Element detected.\r\n  node.parentNode ||\r\n  // ShadowRoot detected.\r\n  isShadowRoot(node) && node.host ||\r\n  // Fallback.\r\n  getDocumentElement(node);\r\n  return isShadowRoot(result) ? result.host : result;\r\n}\r\nfunction getNearestOverflowAncestor(node) {\r\n  const parentNode = getParentNode(node);\r\n  if (isLastTraversableNode(parentNode)) {\r\n    return node.ownerDocument ? node.ownerDocument.body : node.body;\r\n  }\r\n  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {\r\n    return parentNode;\r\n  }\r\n  return getNearestOverflowAncestor(parentNode);\r\n}\r\nfunction getOverflowAncestors(node, list, traverseIframes) {\r\n  var _node$ownerDocument2;\r\n  if (list === void 0) {\r\n    list = [];\r\n  }\r\n  if (traverseIframes === void 0) {\r\n    traverseIframes = true;\r\n  }\r\n  const scrollableAncestor = getNearestOverflowAncestor(node);\r\n  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);\r\n  const win = getWindow(scrollableAncestor);\r\n  if (isBody) {\r\n    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);\r\n  }\r\n  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs":
/*!*********************************************************************!*\
  !*** ../node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   alignments: () => (/* binding */ alignments),\n/* harmony export */   clamp: () => (/* binding */ clamp),\n/* harmony export */   createCoords: () => (/* binding */ createCoords),\n/* harmony export */   evaluate: () => (/* binding */ evaluate),\n/* harmony export */   expandPaddingObject: () => (/* binding */ expandPaddingObject),\n/* harmony export */   floor: () => (/* binding */ floor),\n/* harmony export */   getAlignment: () => (/* binding */ getAlignment),\n/* harmony export */   getAlignmentAxis: () => (/* binding */ getAlignmentAxis),\n/* harmony export */   getAlignmentSides: () => (/* binding */ getAlignmentSides),\n/* harmony export */   getAxisLength: () => (/* binding */ getAxisLength),\n/* harmony export */   getExpandedPlacements: () => (/* binding */ getExpandedPlacements),\n/* harmony export */   getOppositeAlignmentPlacement: () => (/* binding */ getOppositeAlignmentPlacement),\n/* harmony export */   getOppositeAxis: () => (/* binding */ getOppositeAxis),\n/* harmony export */   getOppositeAxisPlacements: () => (/* binding */ getOppositeAxisPlacements),\n/* harmony export */   getOppositePlacement: () => (/* binding */ getOppositePlacement),\n/* harmony export */   getPaddingObject: () => (/* binding */ getPaddingObject),\n/* harmony export */   getSide: () => (/* binding */ getSide),\n/* harmony export */   getSideAxis: () => (/* binding */ getSideAxis),\n/* harmony export */   max: () => (/* binding */ max),\n/* harmony export */   min: () => (/* binding */ min),\n/* harmony export */   placements: () => (/* binding */ placements),\n/* harmony export */   rectToClientRect: () => (/* binding */ rectToClientRect),\n/* harmony export */   round: () => (/* binding */ round),\n/* harmony export */   sides: () => (/* binding */ sides)\n/* harmony export */ });\n/**\r\n * Custom positioning reference element.\r\n * @see https://floating-ui.com/docs/virtual-elements\r\n */\r\n\r\nconst sides = ['top', 'right', 'bottom', 'left'];\r\nconst alignments = ['start', 'end'];\r\nconst placements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-\" + alignments[0], side + \"-\" + alignments[1]), []);\r\nconst min = Math.min;\r\nconst max = Math.max;\r\nconst round = Math.round;\r\nconst floor = Math.floor;\r\nconst createCoords = v => ({\r\n  x: v,\r\n  y: v\r\n});\r\nconst oppositeSideMap = {\r\n  left: 'right',\r\n  right: 'left',\r\n  bottom: 'top',\r\n  top: 'bottom'\r\n};\r\nconst oppositeAlignmentMap = {\r\n  start: 'end',\r\n  end: 'start'\r\n};\r\nfunction clamp(start, value, end) {\r\n  return max(start, min(value, end));\r\n}\r\nfunction evaluate(value, param) {\r\n  return typeof value === 'function' ? value(param) : value;\r\n}\r\nfunction getSide(placement) {\r\n  return placement.split('-')[0];\r\n}\r\nfunction getAlignment(placement) {\r\n  return placement.split('-')[1];\r\n}\r\nfunction getOppositeAxis(axis) {\r\n  return axis === 'x' ? 'y' : 'x';\r\n}\r\nfunction getAxisLength(axis) {\r\n  return axis === 'y' ? 'height' : 'width';\r\n}\r\nfunction getSideAxis(placement) {\r\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'y' : 'x';\r\n}\r\nfunction getAlignmentAxis(placement) {\r\n  return getOppositeAxis(getSideAxis(placement));\r\n}\r\nfunction getAlignmentSides(placement, rects, rtl) {\r\n  if (rtl === void 0) {\r\n    rtl = false;\r\n  }\r\n  const alignment = getAlignment(placement);\r\n  const alignmentAxis = getAlignmentAxis(placement);\r\n  const length = getAxisLength(alignmentAxis);\r\n  let mainAlignmentSide = alignmentAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\r\n  if (rects.reference[length] > rects.floating[length]) {\r\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\r\n  }\r\n  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];\r\n}\r\nfunction getExpandedPlacements(placement) {\r\n  const oppositePlacement = getOppositePlacement(placement);\r\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\r\n}\r\nfunction getOppositeAlignmentPlacement(placement) {\r\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\r\n}\r\nfunction getSideList(side, isStart, rtl) {\r\n  const lr = ['left', 'right'];\r\n  const rl = ['right', 'left'];\r\n  const tb = ['top', 'bottom'];\r\n  const bt = ['bottom', 'top'];\r\n  switch (side) {\r\n    case 'top':\r\n    case 'bottom':\r\n      if (rtl) return isStart ? rl : lr;\r\n      return isStart ? lr : rl;\r\n    case 'left':\r\n    case 'right':\r\n      return isStart ? tb : bt;\r\n    default:\r\n      return [];\r\n  }\r\n}\r\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\r\n  const alignment = getAlignment(placement);\r\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\r\n  if (alignment) {\r\n    list = list.map(side => side + \"-\" + alignment);\r\n    if (flipAlignment) {\r\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\r\n    }\r\n  }\r\n  return list;\r\n}\r\nfunction getOppositePlacement(placement) {\r\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\r\n}\r\nfunction expandPaddingObject(padding) {\r\n  return {\r\n    top: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    left: 0,\r\n    ...padding\r\n  };\r\n}\r\nfunction getPaddingObject(padding) {\r\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\r\n    top: padding,\r\n    right: padding,\r\n    bottom: padding,\r\n    left: padding\r\n  };\r\n}\r\nfunction rectToClientRect(rect) {\r\n  const {\r\n    x,\r\n    y,\r\n    width,\r\n    height\r\n  } = rect;\r\n  return {\r\n    width,\r\n    height,\r\n    top: y,\r\n    left: x,\r\n    right: x + width,\r\n    bottom: y + height,\r\n    x,\r\n    y\r\n  };\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0BmbG9hdGluZy11aS91dGlscy9kaXN0L2Zsb2F0aW5nLXVpLnV0aWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN5VyIsInNvdXJjZXMiOlsid2VicGFjazovL2VtcGxveWVlLy4uL25vZGVfbW9kdWxlcy9AZmxvYXRpbmctdWkvdXRpbHMvZGlzdC9mbG9hdGluZy11aS51dGlscy5tanM/NWRmYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ3VzdG9tIHBvc2l0aW9uaW5nIHJlZmVyZW5jZSBlbGVtZW50LlxyXG4gKiBAc2VlIGh0dHBzOi8vZmxvYXRpbmctdWkuY29tL2RvY3MvdmlydHVhbC1lbGVtZW50c1xyXG4gKi9cclxuXHJcbmNvbnN0IHNpZGVzID0gWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXTtcclxuY29uc3QgYWxpZ25tZW50cyA9IFsnc3RhcnQnLCAnZW5kJ107XHJcbmNvbnN0IHBsYWNlbWVudHMgPSAvKiNfX1BVUkVfXyovc2lkZXMucmVkdWNlKChhY2MsIHNpZGUpID0+IGFjYy5jb25jYXQoc2lkZSwgc2lkZSArIFwiLVwiICsgYWxpZ25tZW50c1swXSwgc2lkZSArIFwiLVwiICsgYWxpZ25tZW50c1sxXSksIFtdKTtcclxuY29uc3QgbWluID0gTWF0aC5taW47XHJcbmNvbnN0IG1heCA9IE1hdGgubWF4O1xyXG5jb25zdCByb3VuZCA9IE1hdGgucm91bmQ7XHJcbmNvbnN0IGZsb29yID0gTWF0aC5mbG9vcjtcclxuY29uc3QgY3JlYXRlQ29vcmRzID0gdiA9PiAoe1xyXG4gIHg6IHYsXHJcbiAgeTogdlxyXG59KTtcclxuY29uc3Qgb3Bwb3NpdGVTaWRlTWFwID0ge1xyXG4gIGxlZnQ6ICdyaWdodCcsXHJcbiAgcmlnaHQ6ICdsZWZ0JyxcclxuICBib3R0b206ICd0b3AnLFxyXG4gIHRvcDogJ2JvdHRvbSdcclxufTtcclxuY29uc3Qgb3Bwb3NpdGVBbGlnbm1lbnRNYXAgPSB7XHJcbiAgc3RhcnQ6ICdlbmQnLFxyXG4gIGVuZDogJ3N0YXJ0J1xyXG59O1xyXG5mdW5jdGlvbiBjbGFtcChzdGFydCwgdmFsdWUsIGVuZCkge1xyXG4gIHJldHVybiBtYXgoc3RhcnQsIG1pbih2YWx1ZSwgZW5kKSk7XHJcbn1cclxuZnVuY3Rpb24gZXZhbHVhdGUodmFsdWUsIHBhcmFtKSB7XHJcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/IHZhbHVlKHBhcmFtKSA6IHZhbHVlO1xyXG59XHJcbmZ1bmN0aW9uIGdldFNpZGUocGxhY2VtZW50KSB7XHJcbiAgcmV0dXJuIHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xyXG59XHJcbmZ1bmN0aW9uIGdldEFsaWdubWVudChwbGFjZW1lbnQpIHtcclxuICByZXR1cm4gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XHJcbn1cclxuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVBeGlzKGF4aXMpIHtcclxuICByZXR1cm4gYXhpcyA9PT0gJ3gnID8gJ3knIDogJ3gnO1xyXG59XHJcbmZ1bmN0aW9uIGdldEF4aXNMZW5ndGgoYXhpcykge1xyXG4gIHJldHVybiBheGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XHJcbn1cclxuZnVuY3Rpb24gZ2V0U2lkZUF4aXMocGxhY2VtZW50KSB7XHJcbiAgcmV0dXJuIFsndG9wJywgJ2JvdHRvbSddLmluY2x1ZGVzKGdldFNpZGUocGxhY2VtZW50KSkgPyAneScgOiAneCc7XHJcbn1cclxuZnVuY3Rpb24gZ2V0QWxpZ25tZW50QXhpcyhwbGFjZW1lbnQpIHtcclxuICByZXR1cm4gZ2V0T3Bwb3NpdGVBeGlzKGdldFNpZGVBeGlzKHBsYWNlbWVudCkpO1xyXG59XHJcbmZ1bmN0aW9uIGdldEFsaWdubWVudFNpZGVzKHBsYWNlbWVudCwgcmVjdHMsIHJ0bCkge1xyXG4gIGlmIChydGwgPT09IHZvaWQgMCkge1xyXG4gICAgcnRsID0gZmFsc2U7XHJcbiAgfVxyXG4gIGNvbnN0IGFsaWdubWVudCA9IGdldEFsaWdubWVudChwbGFjZW1lbnQpO1xyXG4gIGNvbnN0IGFsaWdubWVudEF4aXMgPSBnZXRBbGlnbm1lbnRBeGlzKHBsYWNlbWVudCk7XHJcbiAgY29uc3QgbGVuZ3RoID0gZ2V0QXhpc0xlbmd0aChhbGlnbm1lbnRBeGlzKTtcclxuICBsZXQgbWFpbkFsaWdubWVudFNpZGUgPSBhbGlnbm1lbnRBeGlzID09PSAneCcgPyBhbGlnbm1lbnQgPT09IChydGwgPyAnZW5kJyA6ICdzdGFydCcpID8gJ3JpZ2h0JyA6ICdsZWZ0JyA6IGFsaWdubWVudCA9PT0gJ3N0YXJ0JyA/ICdib3R0b20nIDogJ3RvcCc7XHJcbiAgaWYgKHJlY3RzLnJlZmVyZW5jZVtsZW5ndGhdID4gcmVjdHMuZmxvYXRpbmdbbGVuZ3RoXSkge1xyXG4gICAgbWFpbkFsaWdubWVudFNpZGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChtYWluQWxpZ25tZW50U2lkZSk7XHJcbiAgfVxyXG4gIHJldHVybiBbbWFpbkFsaWdubWVudFNpZGUsIGdldE9wcG9zaXRlUGxhY2VtZW50KG1haW5BbGlnbm1lbnRTaWRlKV07XHJcbn1cclxuZnVuY3Rpb24gZ2V0RXhwYW5kZWRQbGFjZW1lbnRzKHBsYWNlbWVudCkge1xyXG4gIGNvbnN0IG9wcG9zaXRlUGxhY2VtZW50ID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcclxuICByZXR1cm4gW2dldE9wcG9zaXRlQWxpZ25tZW50UGxhY2VtZW50KHBsYWNlbWVudCksIG9wcG9zaXRlUGxhY2VtZW50LCBnZXRPcHBvc2l0ZUFsaWdubWVudFBsYWNlbWVudChvcHBvc2l0ZVBsYWNlbWVudCldO1xyXG59XHJcbmZ1bmN0aW9uIGdldE9wcG9zaXRlQWxpZ25tZW50UGxhY2VtZW50KHBsYWNlbWVudCkge1xyXG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvc3RhcnR8ZW5kL2csIGFsaWdubWVudCA9PiBvcHBvc2l0ZUFsaWdubWVudE1hcFthbGlnbm1lbnRdKTtcclxufVxyXG5mdW5jdGlvbiBnZXRTaWRlTGlzdChzaWRlLCBpc1N0YXJ0LCBydGwpIHtcclxuICBjb25zdCBsciA9IFsnbGVmdCcsICdyaWdodCddO1xyXG4gIGNvbnN0IHJsID0gWydyaWdodCcsICdsZWZ0J107XHJcbiAgY29uc3QgdGIgPSBbJ3RvcCcsICdib3R0b20nXTtcclxuICBjb25zdCBidCA9IFsnYm90dG9tJywgJ3RvcCddO1xyXG4gIHN3aXRjaCAoc2lkZSkge1xyXG4gICAgY2FzZSAndG9wJzpcclxuICAgIGNhc2UgJ2JvdHRvbSc6XHJcbiAgICAgIGlmIChydGwpIHJldHVybiBpc1N0YXJ0ID8gcmwgOiBscjtcclxuICAgICAgcmV0dXJuIGlzU3RhcnQgPyBsciA6IHJsO1xyXG4gICAgY2FzZSAnbGVmdCc6XHJcbiAgICBjYXNlICdyaWdodCc6XHJcbiAgICAgIHJldHVybiBpc1N0YXJ0ID8gdGIgOiBidDtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiBbXTtcclxuICB9XHJcbn1cclxuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVBeGlzUGxhY2VtZW50cyhwbGFjZW1lbnQsIGZsaXBBbGlnbm1lbnQsIGRpcmVjdGlvbiwgcnRsKSB7XHJcbiAgY29uc3QgYWxpZ25tZW50ID0gZ2V0QWxpZ25tZW50KHBsYWNlbWVudCk7XHJcbiAgbGV0IGxpc3QgPSBnZXRTaWRlTGlzdChnZXRTaWRlKHBsYWNlbWVudCksIGRpcmVjdGlvbiA9PT0gJ3N0YXJ0JywgcnRsKTtcclxuICBpZiAoYWxpZ25tZW50KSB7XHJcbiAgICBsaXN0ID0gbGlzdC5tYXAoc2lkZSA9PiBzaWRlICsgXCItXCIgKyBhbGlnbm1lbnQpO1xyXG4gICAgaWYgKGZsaXBBbGlnbm1lbnQpIHtcclxuICAgICAgbGlzdCA9IGxpc3QuY29uY2F0KGxpc3QubWFwKGdldE9wcG9zaXRlQWxpZ25tZW50UGxhY2VtZW50KSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBsaXN0O1xyXG59XHJcbmZ1bmN0aW9uIGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCkge1xyXG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvbGVmdHxyaWdodHxib3R0b218dG9wL2csIHNpZGUgPT4gb3Bwb3NpdGVTaWRlTWFwW3NpZGVdKTtcclxufVxyXG5mdW5jdGlvbiBleHBhbmRQYWRkaW5nT2JqZWN0KHBhZGRpbmcpIHtcclxuICByZXR1cm4ge1xyXG4gICAgdG9wOiAwLFxyXG4gICAgcmlnaHQ6IDAsXHJcbiAgICBib3R0b206IDAsXHJcbiAgICBsZWZ0OiAwLFxyXG4gICAgLi4ucGFkZGluZ1xyXG4gIH07XHJcbn1cclxuZnVuY3Rpb24gZ2V0UGFkZGluZ09iamVjdChwYWRkaW5nKSB7XHJcbiAgcmV0dXJuIHR5cGVvZiBwYWRkaW5nICE9PSAnbnVtYmVyJyA/IGV4cGFuZFBhZGRpbmdPYmplY3QocGFkZGluZykgOiB7XHJcbiAgICB0b3A6IHBhZGRpbmcsXHJcbiAgICByaWdodDogcGFkZGluZyxcclxuICAgIGJvdHRvbTogcGFkZGluZyxcclxuICAgIGxlZnQ6IHBhZGRpbmdcclxuICB9O1xyXG59XHJcbmZ1bmN0aW9uIHJlY3RUb0NsaWVudFJlY3QocmVjdCkge1xyXG4gIGNvbnN0IHtcclxuICAgIHgsXHJcbiAgICB5LFxyXG4gICAgd2lkdGgsXHJcbiAgICBoZWlnaHRcclxuICB9ID0gcmVjdDtcclxuICByZXR1cm4ge1xyXG4gICAgd2lkdGgsXHJcbiAgICBoZWlnaHQsXHJcbiAgICB0b3A6IHksXHJcbiAgICBsZWZ0OiB4LFxyXG4gICAgcmlnaHQ6IHggKyB3aWR0aCxcclxuICAgIGJvdHRvbTogeSArIGhlaWdodCxcclxuICAgIHgsXHJcbiAgICB5XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IHsgYWxpZ25tZW50cywgY2xhbXAsIGNyZWF0ZUNvb3JkcywgZXZhbHVhdGUsIGV4cGFuZFBhZGRpbmdPYmplY3QsIGZsb29yLCBnZXRBbGlnbm1lbnQsIGdldEFsaWdubWVudEF4aXMsIGdldEFsaWdubWVudFNpZGVzLCBnZXRBeGlzTGVuZ3RoLCBnZXRFeHBhbmRlZFBsYWNlbWVudHMsIGdldE9wcG9zaXRlQWxpZ25tZW50UGxhY2VtZW50LCBnZXRPcHBvc2l0ZUF4aXMsIGdldE9wcG9zaXRlQXhpc1BsYWNlbWVudHMsIGdldE9wcG9zaXRlUGxhY2VtZW50LCBnZXRQYWRkaW5nT2JqZWN0LCBnZXRTaWRlLCBnZXRTaWRlQXhpcywgbWF4LCBtaW4sIHBsYWNlbWVudHMsIHJlY3RUb0NsaWVudFJlY3QsIHJvdW5kLCBzaWRlcyB9O1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs\n");

/***/ })

};
;